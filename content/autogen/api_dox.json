var gizmo_dox_data = {
	'acf' : [
		['acf.getAStabHeading', 'acf.getAStabHeading()', ' Returns: Aritifial stability input: heading(rudder): range: -1 to 1\r\n', 
		'api_acf.cpp#L261'],
		['acf.getAStabPitch', 'acf.getAStabPitch()', ' Returns: Aritifial stability input: pitch: range: -1 to 1\r\n', 
		'api_acf.cpp#L249'],
		['acf.getAStabRoll', 'acf.getAStabRoll()', ' Returns: Aritifial stability input: roll: range: -1 to 1\r\n', 
		'api_acf.cpp#L255'],
		['acf.getAlpha', 'acf.getAlpha()', ' Returns: Aircraft attitude: alpha in degrees.\r\n', 
		'api_acf.cpp#L241'],
		['acf.getAltAgl', 'acf.getAltAgl()', '\r\nReturns: float\r\n\r\nGet Aircraft altitude above ground level in meters.\r\n\r\n<code>\r\nlocal acf_alt_agl = acf.getAltAgl()\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_acf.cpp#L108'],
		['acf.getAltMsl', 'acf.getAltMsl()', '\r\nReturns: float\r\n\r\nGet Aircraft altitude above mean-sea-level in meters.\r\n\r\n<code>\r\nlocal acf_alt_msl = acf.getAltMsl()\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_acf.cpp#L124'],
		['acf.getAuthor', 'acf.getAuthor()', '\r\nReturns: string\r\n\r\nGet Aircraft Author from .acf file as string value.\r\n\r\n<code>\r\nlocal acf_author = acf.getAuthor()\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_acf.cpp#L140'],
		['acf.getBeta', 'acf.getBeta()', ' Returns: Aircraft attitude: beta in degrees.\r\n', 
		'api_acf.cpp#L269'],
		['acf.getDescription', 'acf.getDescription()', 'Returns: string\r\n\r\nGet Description string from ACF file, as set in PlaneMaker.\r\n\r\n<code>\r\nlocal acf_desc = acf.getDescription()\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_acf.cpp#L165'],
		['acf.getEncryptedScripts', 'acf.getEncryptedScripts()', '\r\nReturns: boolean. \r\n\r\nTrue if booted from init.lua.aes\r\n\r\n<code>\r\nlocal secure_mode = acf.getEncryptedScripts()\r\n</code>\r\n\r\nAPI: 11.11+\r\n', 
		'api_acf.cpp#L531'],
		['acf.getFCHeading', 'acf.getFCHeading()', ' Returns: Value of flight control pitch.\r\n', 
		'api_acf.cpp#L288'],
		['acf.getFCPitch', 'acf.getFCPitch()', ' Returns: Value of flight control pitch.\r\n', 
		'api_acf.cpp#L276'],
		['acf.getFCRoll', 'acf.getFCRoll()', ' Returns: Value of flight control pitch.\r\n', 
		'api_acf.cpp#L282'],
		['acf.getFilename', 'acf.getFilename()', '\r\nReturns: string\r\n\r\n<code>\r\n--Get Aircraft filename, no folder info.\r\nlocal acf_filename = acf.getFilename()\r\n\r\n--acf_filename now contains: "c4.acf"\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_acf.cpp#L189'],
		['acf.getFolder', 'acf.getFolder()', '\r\nReturns: string\r\n\r\nGet Full path to aircraft folder as string.\r\n\r\n<code>\r\n-- "/Applications/X-Plane 9 Demo/Aircraft/General Aviation/Cirrus Jet/"\r\nlocal acf_folder = acf.getFolder()\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_acf.cpp#L209'],
		['acf.getGS', 'acf.getGS()', ' Returns: Aircraft ground speed in meters per second.\r\n', 
		'api_acf.cpp#L296'],
		['acf.getGearDeployState', 'acf.getGearDeployState()', ' Returns: Aircraft landing gear: actual state. Lua table of values as ratios.\r\n\r\n\tEg: gear_state = { acf.getGearDeployState() }\r\n\tgear_state is now somthing like [ 1, 0.5, 0.75,  1,1,1,  1,1,1, 1 ]\r\n', 
		'api_acf.cpp#L622'],
		['acf.getGearHandleState', 'acf.getGearHandleState()', ' Returns: Aircraft landing gear handle selection request value. 0 = gear up, 1 = gear down.\r\n', 
		'api_acf.cpp#L641'],
		['acf.getHeading', 'acf.getHeading()', ' Returns: Aircraft attitude: magnetic heading in degrees.\r\n', 
		'api_acf.cpp#L304'],
		['acf.getHeadingTrue', 'acf.getHeadingTrue()', ' Returns: Aircraft attitude: true heading in degrees.\r\n', 
		'api_acf.cpp#L310'],
		['acf.getIAS', 'acf.getIAS()', ' Returns: Indicated Air Speed in Meters/Second.\r\n', 
		'api_acf.cpp#L318'],
		['acf.getKIAS', 'acf.getKIAS()', ' Returns: Indicated Air Speed in Knots.\r\n', 
		'api_acf.cpp#L324'],
		['acf.getLat', 'acf.getLat()', ' Returns: latitude of aircraft as decimal number.\r\n', 
		'api_acf.cpp#L332'],
		['acf.getLiveryFolder', 'acf.getLiveryFolder()', ' Returns: Path of Livery folder relative to X-Plane app.\r\n Eg: "Aircraft/General Aviation/Cirrus Jet/liveries/red"\r\n \r\n API >= 11.9.1\r\n', 
		'api_acf.cpp#L352'],
		['acf.getLiveryName', 'acf.getLiveryName()', ' Returns: Name of livery in use.\r\n Eg: "red"\r\n \r\n API >= 11.9.1\r\n', 
		'api_acf.cpp#L340'],
		['acf.getLon', 'acf.getLon()', '\r\nReturns: longitude of aircraft as decimal number.\r\n\r\n', 
		'api_acf.cpp#L365'],
		['acf.getP', 'acf.getP()', '\r\nReturns: float\r\n\r\nThe roll rotation rates (relative to the flight)\r\n\r\n<code>\r\nlocal roll_rate = acf.getP()\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_acf.cpp#L407'],
		['acf.getP_dot', 'acf.getP_dot()', '\r\nReturns: float\r\n\r\nThe roll angular acceleration (relative to the flight)\r\n\r\n<code>\r\nlocal roll_acc_rate = acf.getP_dot()\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_acf.cpp#L423'],
		['acf.getPitch', 'acf.getPitch()', '\r\nReturns: float\r\n\r\nThe pitch of the airframe.\r\n\r\n<code>\r\nlocal acf_pitch = acf.getPitch()\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_acf.cpp#L439'],
		['acf.getPosition', 'acf.getPosition()', 'Returns: lat,lon,alt_msl\r\n\r\nAPI: >= 11.5.18\r\n', 
		'api_acf.cpp#L375'],
		['acf.getPositionGL', 'acf.getPositionGL()', '\r\nReturns: x,y,z,p,r,h\r\n\r\n<code>\r\nx,y,z,p,r,h = gfx.getAircraftPositionGL()\r\n</code>\r\n\r\n\r\nAPI: >= 11.5.18\r\n', 
		'api_acf.cpp#L390'],
		['acf.getQ', 'acf.getQ()', '\r\nReturns: float\r\n\r\nThe pitch rotation rates (relative to the flight)\r\n\r\n<code>\r\nlocal pitch_rate = acf.getQ()\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_acf.cpp#L455'],
		['acf.getQ_dot', 'acf.getQ_dot()', 'Returns: float\r\n\r\nThe pitch angular acceleration (relative to the flight)\r\n\r\n<code>\r\nlocal pitch_rate = acf.getQ()\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_acf.cpp#L471'],
		['acf.getR', 'acf.getR()', '\r\nReturns: float\r\n\r\nThe yaw rotation rates (relative to the flight)\r\n\r\n<code>\r\nlocal yaw_rate = acf.getR()\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_acf.cpp#L498'],
		['acf.getR_dot', 'acf.getR_dot()', '\r\nReturns: float\r\n\r\nThe yaw angular acceleration rates (relative to the flight)\r\n\r\n<code>\r\nlocal yaw_rate = acf.getR()\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_acf.cpp#L514'],
		['acf.getRelativeFolder', 'acf.getRelativeFolder()', ' Returns: String containing relative path to X-Plane folder, includes trailing slash. All slashes are set to /\r\n Eg: "Aircraft/General Aviation/Cirrus Jet/"\r\n', 
		'api_acf.cpp#L229'],
		['acf.getRoll', 'acf.getRoll()', '\r\nReturns: float\r\n\r\nThe airframe roll value in degrees.\r\n\r\nAPI: >= 12.01\r\n', 
		'api_acf.cpp#L486'],
		['acf.getSessionTime', 'acf.getSessionTime()', '\r\nReturns: float\r\n\r\nNumber of seconds that the airframe has been flown for this sim-session.\r\n \r\nAPI: 11.4+\r\n', 
		'api_acf.cpp#L552'],
		['acf.getTAS', 'acf.getTAS()', ' Returns: Aircraft true airspeed in meters per second.\r\n', 
		'api_acf.cpp#L586'],
		['acf.getTrack', 'acf.getTrack()', ' Returns: Aircraft track-heading across ground in degrees.\r\n', 
		'api_acf.cpp#L591'],
		['acf.getVS', 'acf.getVS()', ' Returns: Aircraft vertical speed in meters per second.\r\n', 
		'api_acf.cpp#L596'],
		['acf.getYokeHeading', 'acf.getYokeHeading()', ' Returns: pilot heading input as decimal number.\r\n', 
		'api_acf.cpp#L615'],
		['acf.getYokePitch', 'acf.getYokePitch()', ' Returns: pilot pitch input as decimal number.\r\n', 
		'api_acf.cpp#L603'],
		['acf.getYokeRoll', 'acf.getYokeRoll()', ' Returns: pilot roll input as decimal number.\r\n', 
		'api_acf.cpp#L609'],
		['acf.load', 'acf.load( xp_relative_fiilename )', '\r\neg:  acf.load("Aircraft/Heavy Metal/B747-400 United/United-Air.acf")\r\n\r\n \r\n Load the specified ACF file for the user to fly.\r\n \r\n This call will reset the Gizmo engine and can be used to instruct X-Plane to load any valid ACF file inside the X-Plane folder.\r\n \r\n API: >= 12.9.14\r\n \r\n', 
		'api_acf.cpp#L677'],
		['acf.reload', 'acf.reload()', '\r\n Attempts to reload the users currnetly selected aircraft.\r\n This can be performed to make certain content changes take effect.\r\n It also has the effect of rebinding any objects to new datarefs that\r\n were created between the time that the user first loaded the aircraft\r\n and invoked the ./scripts/init.lua file and when this function is called.\r\n', 
		'api_acf.cpp#L655']
		],
	'al' : [
		['al.readme', 'al.readme()', ' \nGizmo64 makes the LuaAL OpenAL API available for use.\n \nSee the following for more info:\n\nhttp://coronalabs.com/blog/2011/07/27/the-secretundocumented-audio-apis-in-corona-sdk/\nhttps://www.openhub.net/p/luaal\nhttp://www.openal.org/documentation/openal-1.1-specification.pdf\n \n', 
		'al_api.lua#L10']
		],
	'camera' : [
		['camera.getAttitude', 'camera.getAttitude()', '\r\nReturns: pitch,roll,heading\r\nEg: p,r,h = camera.getAttitude()\r\n\r\nAPI: >= 11.11.14\r\n', 
		'api_camera.cpp#L46'],
		['camera.getControl', 'camera.getControl()', ' Ask X-Plane for control of the camera.\r\n', 
		'api_camera.cpp#L84'],
		['camera.getControlGreedy', 'camera.getControlGreedy()', ' Ask X-Plane for control of the camera.\r\n', 
		'api_camera.cpp#L101'],
		['camera.getFOV', 'camera.getFOV()', ' Returns: Current field of view.\r\n fov = camera.getFOV()\r\n', 
		'api_camera.cpp#L119'],
		['camera.getPosition', 'camera.getPosition()', ' Returns: latitude, longitude, altitude\r\n latitude, longitude, altitude = camera.getPosition()\r\n \r\n API: >= 11.11.14\r\n', 
		'api_camera.cpp#L134'],
		['camera.getPositionGL', 'camera.getPositionGL()', ' Returns: x,y,z\r\n x,y,z = camera.getPositionGL()\r\n \r\n  API: >= 11.11.14\r\n', 
		'api_camera.cpp#L161'],
		['camera.getZoom', 'camera.getZoom()', ' Returns: zoom\r\n zoom = camera.getZoom()\r\n', 
		'api_camera.cpp#L180'],
		['camera.lookAt', 'camera.lookAt( lat, lot, altitude )', ' Rotate the camera in such a way that it is (hopefully) facing the specified location in the world.\r\n', 
		'api_camera.cpp#L196'],
		['camera.lookAtGL', 'camera.lookAtGL( x,y,z )', ' Rotate the camera in such a way that it is facing the specified location in OpenGL space.\r\n', 
		'api_camera.cpp#L243'],
		['camera.releaseControl', 'camera.releaseControl()', ' Release the Camera back into X-Planes hands.\r\n', 
		'api_camera.cpp#L280'],
		['camera.setAttitude', 'camera.setAttitude( p,r,h )', ' Rotate the camera to face a specified orientation.\r\n', 
		'api_camera.cpp#L349'],
		['camera.setFOV', 'camera.setFOV( fov )', ' Set the field of view for the camera.\r\n', 
		'api_camera.cpp#L367'],
		['camera.setPosition', 'camera.setPosition( lat,lon,alt )', ' Set the camera location in world-coordinates.\r\n', 
		'api_camera.cpp#L294'],
		['camera.setPositionGL', 'camera.setPositionGL( x,y,z )', ' Set the camera position using OpenGL-coordinates.\r\n', 
		'api_camera.cpp#L328'],
		['camera.setZoom', 'camera.setZoom( zoom )', ' Set the zoom value for the camera.\r\n \r\n API: 11.4+\r\n \r\n', 
		'api_camera.cpp#L385']
		],
	'cmd' : [
		['cmd.beginByName', 'cmd.beginByName( command_name )', '\r\nReturns: nothing\r\n\r\nEquivalent to pressing-and-holding a joystick button or hotkey for the named command.\r\n\r\nX-Plane will call the hold down event until you call cmd.endByName( command_name )\r\n\r\n<code>--Begin a command press event\r\ncmd.beginByName( "sim/foo/button" )\r\n</code>\r\n<code>--Some time later on, release the button..\r\ncmd.endByName( "sim/foo/button" )\r\n</code>\r\n\r\nAPI: >= 14.09.10\r\n', 
		'api_cmd.cpp#L39'],
		['cmd.endByName', 'cmd.endByName( command_name )', ' \r\nReturns: nothing\r\n\r\nEquivalent to releasing a joystick button or hotkey for the named command.\r\n\r\nUse after calling cmd.beginByName( command_name )\r\n\r\n<code>--Begin a command press event\r\ncmd.beginByName( "sim/foo/button" )\r\n</code>\r\n<code>--Some time later on, release the button..\r\ncmd.endByName( "sim/foo/button" )\r\n</code>\r\n\r\nAPI: >= 14.09.10\r\n', 
		'api_cmd.cpp#L95'],
		['cmd.getOnHoldDelay', 'cmd.getOnHoldDelay( cmd_id )', '\r\nReturns: _OnHold delay in milliseconds.\r\n\r\n<code>--Query existing delay setting..\r\nlocal delay = cmd.getOnHoldDelay( my_custom_cmd )\r\n</code>\r\n\r\nAPI: >= 14.09.10\r\n', 
		'api_cmd.cpp#L336'],
		['cmd.newCommand', 'cmd.newCommand( command_name, description, script_function_name, after_flag )', ' \r\nReturns: cmd_id\r\n\r\nRegisters a new custom command and makes it available for use inside X-Plane.\r\n\r\n<code>--Create a new Custom Command Handler.\r\ncmd_CustomCommandCanopyOpen = cmd.newCommand("my/custom/command/canopy_open", "Open the canopy.", "canopy_open" )\r\n</code>\r\n\r\nSetup your scripted event handler code:\r\n<code>--Custom Event Handlers for command logic functionality.\r\nfunction canopy_open_OnStart()\r\n--button or key press started\r\n\r\nconsole.log("_OnStart")\r\n\r\n--If you want to recieve _OnHold and _OnStop notices you need to return 1 from this function.\r\nreturn 1\r\nend\r\n\r\nfunction canopy_open_OnHold()\r\n--button or key is being held down\r\nconsole.log("_OnHold")\r\nend\r\n\r\nfunction canopy_open_OnStop()\r\n--button or key was released\r\nconsole.log("_OnStop")\r\nend\r\n</code>\r\n\r\nYou can also use your command via the xp.command...(...) API calls, eg:\r\n<code>--Calling a custom command as though it was a sim command.\r\ncmd.onceByName( "my/custom/command/canopy_open" )\r\n</code>\r\n\r\n<hr>\r\n \r\nsim/command Override:\r\nReturn 1 from _OnStart to override a sim/command entry. Eg:\r\n<code>\r\ncmd.newCommand("sim/operation/pause_toggle", "Gizmo64 Pause Override", "gizmo_pause_override")\r\n \r\nfunction gizmo_pause_override_OnStart()\r\n    local do_override = true\r\n    if( do_override )then\r\n        sound.say("pause override active, not pausing.")\r\n        return 1 --bleh\r\n    else\r\n        sound.say("pausing..")\r\n        return 0\r\n    end\r\nend\r\n</code>\r\n\r\n\r\nAPI: >= 14.09.10\r\n\r\n after_flag only valid for >= 18.7\r\n\r\n', 
		'api_cmd.cpp#L197'],
		['cmd.onceByName', 'cmd.onceByName( command_name )', '\r\nReturns: nothing\r\n\r\nEquivalent to momentarily pressing a joystick button or hotkey for the named command.\r\n\r\n<code>--Trigger a command press event.\r\ncmd.onceByName( "sim/foo/button" )\r\n</code>\r\n\r\nAPI: >= 14.09.10\r\n', 
		'api_cmd.cpp#L155'],
		['cmd.setOnHoldDelay', 'cmd.setOnHoldDelay( cmd_id, new_delay )', '\r\nReturns: nothing\r\n\r\n<code>--Configure our custom command to require 1500ms (1.5 seconds) to trigger an _OnHold event..\r\ncmd.setOnHoldDelay( my_custom_cmd, 1500 )\r\n</code>\r\n\r\nAPI: >= 14.09.10\r\n', 
		'api_cmd.cpp#L363']
		],
	'color' : [
		['color.read_me', 'color.read_me()', '\r\nGizmo64 provides a table of common color names that can be used to make your code easier to read and write.\r\n\r\nPlease see this file for more information:\r\nhttps://github.com/benrussell/Gizmo-Firmware/blob/master/firmware/core/color_api.lua\r\n\r\n<code>\r\ngfx.setColor( color.red )\r\n</code>\r\n\r\nColors available as of 2014.04.19\r\n\r\ncolor.red\r\ncolor.green\r\ncolor.blue\r\n\r\ncolor.yellow\r\ncolor.orange\r\ncolor.magenta\r\n\r\ncolor.black\r\ncolor.white\r\n\r\ncolor.dark_gray\r\ncolor.light_gray\r\ncolor.gray\r\ncolor.grey\r\n\r\ncolor.bg_gray\r\ncolor.bg_gray_bright\r\n\r\n\r\nAPI: >= 14.04\r\n', 
		'color_api.lua#L12']
		],
	'console' : [
		['console.error', 'console.error( message )', '\nLog an error message to the console.\n\n<code>\nconsole.warn("Error!")\n</code>\n\nAPI: >= 12.01\n', 
		'console_api.lua#L43'],
		['console.log', 'console.log( message )', '\nLog a message to the console.\n\n<code>\nconsole.warn("Message!")\n</code>\n\nAPI: >= 12.01\n', 
		'console_api.lua#L29'],
		['console.warn', 'console.warn( message )', '\nLog a warning message to the console.\n\n<code>\nconsole.warn("Warning!")\n</code>\n\nAPI: >= 12.01\n', 
		'console_api.lua#L15']
		],
	'coroutine' : [
		['coroutine.read_me', 'coroutine.read_me()', '\nStandard Lua coroutine support is available. \n', 
		'api_third_party_docs.cpp#L24']
		],
	'crypto' : [
		['crypto.aesDecrypt', 'crypto.aesDecrypt( encrypted_payload, password )', '\r\nReturns: string\r\n\r\nAPI: >= 14.08.18\r\n', 
		'api_crypto.cpp#L82'],
		['crypto.aesEncrypt', 'crypto.aesEncrypt( plaintext_payload, password )', '\r\nReturns: string\r\n\r\nAPI: >= 14.08.18\r\n', 
		'api_crypto.cpp#L29']
		],
	'debug' : [
		['debug.read_me', 'debug.read_me()', '\nThe debug library is disabled for all third party content.\n\n', 
		'api_third_party_docs.cpp#L35']
		],
	'dref' : [
		['dref.getArraySize', 'dref.getArraySize( dref_id )', '\r\nReturns: array_element_count\r\n\r\nNumber of array elements the dref supports.\r\n\r\n<code>local array_size = dref.getArraySize( dr_MyCustomFloatArray )</code>\r\n\r\nAPI: >= broken!\r\n', 
		'api_dref.cpp#L530'],
		['dref.getBytes', 'dref.getBytes( dataref_id, start_at, number_to_fetch )', '\r\nReturns: Lua String\r\n\r\n<code>--Copy byte-string dataref value into a Lua variable.\r\n\r\nlocal dr_AcfAuthor = dref.getDataref("sim/acf/description/author")\r\n\r\nlocal dref_string_value_copy = dref.getBytes( dr_AcfAuthor, 1, 1024 )\r\n</code>\r\n\r\nAPI: >= 14.01\r\n', 
		'api_dref.cpp#L725'],
		['dref.getDataref', 'dref.getDataref( string_dataref_name )', '\nReturns: dref_id\n\nNOTE: This function does NOT accept "part numbers" as a shortcut for using array datarefs.\nThis will NOT work: dref.getDataref( "sim/dataref[99999]" )\n\nException: The weather datarefs for cloud and wind layers are NOT array datarefs but contain [0], [1] and [2] in the dataref name string.\nThese datarefs will work as expected.\n\nSee the documentation for dref.getFloatV(...), dref.getIntV(...), dref.getBytes(...), etc for more information about working with array datarefs.\n\n<code>--Locate the sims built-in anti-ice-switch dataref.\ndr_ice_switch = dref.getDataref("sim/cockpit/switches/ice")\n</code>\n\n<code>--check to see if the switch is on or off\nlocal switch_value = dref.getInt( dr_ice_switch )\nif( switch_value == 0 )then\n\t--switch is off\n\t\nelse if( switch_value == 1 )then\n\t--switch is on\n\t\nend\n</code>\n\nAPI: >= 12.01\n*/\n--]]\ndref.getDataref = function(...)\n    \n    local args = {... }\n    \n    local ret = { dref.getDatarefEx(...) }\n    \n    if( ret[1] == nil )then\n        --report error message.\n        error( ret[2], 2 )\n    else\n        --dataref handle is good, return to caller.\n        return unpack(ret)\n    end\n\nend\n\n\n\n--eof\n\n', 
		'dref_api.lua#L13'],
		['dref.getDatarefEx', 'dref.getDatarefEx( string_dataref_name )', '\r\nReturns: dref_id\r\n\r\nNOTE: This function does NOT accept "part numbers" as a shortcut for using array datarefs.\r\nThis will NOT work: dref.getDataref( "sim/dataref[99999]" )\r\n\r\nException: The weather datarefs for cloud and wind layers are NOT array datarefs but contain [0], [1] and [2] in the dataref name string.\r\nThese datarefs will work as expected.\r\n\r\nSee the documentation for dref.getFloatV(...), dref.getIntV(...), dref.getBytes(...), etc for more information about working with array datarefs.\r\n\r\n<code>--Locate the sims built-in anti-ice-switch dataref.\r\ndr_ice_switch = dref.getDataref("sim/cockpit/switches/ice")\r\n</code>\r\n\r\n<code>--check to see if the switch is on or off\r\nlocal switch_value = dref.getInt( dr_ice_switch )\r\nif( switch_value == 0 )then\r\n\t--switch is off\r\n\t\r\nelse if( switch_value == 1 )then\r\n\t--switch is on\r\n\t\r\nend\r\n</code>\r\n\r\nAPI: >= 14.12.26\r\n', 
		'api_dref.cpp#L568'],
		['dref.getFloat', 'dref.getFloat( dref_id )', '\r\nReturns: Floating point value for dataref specified by dref_id.\r\n\r\nSee dref.getDataref, dref.newFloat, dref.newInt, etc. for more information.\r\n\r\n<code>--Fetch the value of a dataref.\r\nlocal tmp_value = dref.getFloat( dref_id )\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_dref.cpp#L891'],
		['dref.getFloatV', 'dref.getFloatV( dataref_id, start_at, number_to_fetch )', ' Returns: multiple values for dataref_id as decimal numbers\r\n \r\n See xp.getDataref("sim/foo") and xp.newDataref("custom/dataref") for more info.\r\n start_at refers to the part number in sim/dataref[99]\r\n \r\n In X-Plane, OBJ8 and C, part numbers start at 0.\r\n In Lua, part numbers start at 1.\r\n \r\n For this reason, the start_at parameter also starts at 1.\r\n \r\n If you want to get sim/dataref[0] use:\r\n value = xp.getFloatv( dataref_id, 1, 1 )\r\n \r\n We ask Gizmo to get us one value, starting at the first item.\r\n \r\n This seems a little bit annoying, but when you start using your tables of values\r\n with the rest of Luas functions you will understand why there is a little "shift"\r\n here when we push numbers in and out of X-Planes dataref systems.\t\r\n \r\n \r\n value = {}  -- Table to hold the array\r\n value    =    { xp.getFloatV(dataref_id, 1, n)}\r\n \r\n', 
		'api_dref.cpp#L830'],
		['dref.getInt', 'dref.getInt( dataref_id )', ' Returns: value of dataref_id Integer number\r\n See dref.getDataref("sim/foo") and dref.newDataref("custom/dataref") for more info.\r\n', 
		'api_dref.cpp#L995'],
		['dref.getIntV', 'dref.getIntV( dataref_id, start_at, number_to_fetch )', ' Returns: multiple values for dataref_id as numbers\r\n \r\n See xp.getDataref("sim/foo") and xp.newDataref("custom/dataref") for more info.\r\n start_at refers to the part number in sim/dataref[99]\r\n \r\n In X-Plane, OBJ8 and C, part numbers start at 0.\r\n In Lua, part numbers start at 1.\r\n \r\n For this reason, the start_at parameter also starts at 1.\r\n \r\n If you want to get sim/dataref[0] use:\r\n value = xp.getFloatv( dataref_id, 1, 1 )\r\n \r\n We ask Gizmo to get us one value, starting at the first item.\r\n \r\n This seems a little bit annoying, but when you start using your tables of values\r\n with the rest of Luas functions you will understand why there is a little "shift"\r\n here when we push numbers in and out of X-Planes dataref systems.\t\r\n \r\n \r\n value = {}  -- Table to hold the array\r\n value    =    { xp.getFloatV(dataref_id, 1, n)}\r\n \r\n \r\n \r\n', 
		'api_dref.cpp#L934'],
		['dref.getString', 'dref.getString( dataref_id )', ' Returns: Lua String\r\n \r\n Eg: \r\n foo = dref.getString( dr_id )\r\n print( foo )\r\n \r\n Note: Max string length is currently hard-limited to 1024 bytes.\r\n \r\n API: >= 11.10\r\n \r\n', 
		'api_dref.cpp#L779'],
		['dref.newByteArray', 'dref.newByteArray( string_dataref_name )', ' Returns: dref_id\r\n \r\n Please use dref.setArraySize to define how much storage your dref provides.\r\n \r\n API: >= 11.8\r\n \r\n', 
		'api_dref.cpp#L468'],
		['dref.newFloat', 'dref.newFloat( dataref_name, OPT_hook_event_name )', '\r\nReturns: dref_id\r\n\r\nSimple:\r\n-------\r\nStorage of the value for this dataref will be completely managed by Gizmo64.\r\nYour code can update the value of the dataref using dref.getFloat(...) and dref.setFloat(...)\r\n<code>--create a new floating point dataref\r\n--store the handle for it in a variable called dr_MyCustomDataref\r\nlocal dr_MyCustomDataref = dref.newFloat("my/custom/dataref")\r\n\r\n--update the value of our dateref\r\ndref.setFloat( dr_MyCustomDataref, 1.234 )\r\n\r\n--retrieve the value of our dataref\r\nlocal tmp_val = dref.getFloat( dr_MyCustomDataref )</code>\r\n\r\nAdvanced:\r\n---------\r\nCreate a new floating point dataref that is fully managed by your code.\r\n\r\nThese "hooked" datarefs are ideal for managing input from a 3D Cokpit Object that utilizes "manipulators" for user input.\r\n\r\nThey can also be useful to provide a dataref that is always the value of a specific algorithm.\r\n<code>--create a new floating point dataref\r\n--store the handle for it in a variable called dr_MyCustomDataref\r\nlocal dr_MyCustomDataref = dref.newFloat("my/custom/dataref", "my_custom_dataref_hooks")\r\n\r\n--This code is called when a read of the dataref occurs.\r\nfunction my_custom_dataref_hooks_OnRead()\r\n\treturn acf.getIAS() * 10\r\nend\r\n\r\n--This code is called when a write to the dataref occurs.\r\nfunction my_custom_dataref_hooks_OnWrite( newValue )\r\n\tsound.say("dataref changed")\r\nend \r\n</code>\r\n\r\nAPI: >= 11.8\r\n', 
		'api_dref.cpp#L71'],
		['dref.newFloatArray', 'dref.newFloatArray( string_dataref_name )', '\r\nReturns: dref_id\r\n\r\nCreates a new float-array dataref.\r\n\r\nUse this when you want to use "part numbers" in your OBJ8 files.\r\n\r\nEg:\r\nmy/custom/float/array[2]\r\n\r\nValues are managed by Gizmo64. \r\nThe new dataref supports read+write access.\r\nAny other plugin may change their value at any time.\r\n\r\n<code>--Create a new custom dataref of type: float-array\r\nlocal dr_MyCustomFloatArray = dref.newFloatArray( "my/custom/float/array" )\r\n\r\n--Adjust the size of the float-array dataref. This can be done at any time.\r\ndref.setArraySize( dr_MyCustomFloatArray, 10 )\r\n\r\n--You can now use "part numbers" [0] through [9] in your OBJ8 files.\r\n</code>\r\n\r\nAPI: >= 11.8\r\n', 
		'api_dref.cpp#L320'],
		['dref.newInt', 'dref.newInt( dataref_name, OPT_hook_event_name )', '\r\nReturns: dref_id\r\n\r\nSimple:\r\n-------\r\nStorage of the value for this dataref will be completely managed by Gizmo64.\r\nYour code can update the value of the dataref using dref.getInt(...) and dref.setInt(...)\r\n<code>--create a new floating point dataref\r\n--store the handle for it in a variable called dr_MyCustomDataref\r\nlocal dr_MyCustomDataref = dref.newInt("my/custom/dataref")\r\n\r\n--update the value of our dateref\r\ndref.setInt( dr_MyCustomDataref, 5678 )\r\n\r\n--retrieve the value of our dataref\r\nlocal tmp_val = dref.getInt( dr_MyCustomDataref )</code>\r\n\r\nAdvanced:\r\n---------\r\nCreate a new integer dataref that is fully managed by your code.\r\n\r\nThese "hooked" datarefs are ideal for managing input from a 3D Cokpit Object that utilizes "manipulators" for user input.\r\n\r\nThey can also be useful to provide a dataref that is always the value of a specific algorithm.\r\n<code>--create a new floating point dataref\r\n--store the handle for it in a variable called dr_MyCustomDataref\r\nlocal dr_MyCustomDataref = dref.newInt("my/custom/dataref", "my_custom_dataref_hooks")\r\n\r\n--This code is called when a read of the dataref occurs.\r\nfunction my_custom_dataref_hooks_OnRead()\r\n\treturn acf.getIAS() * 10\r\nend\r\n\r\n--This code is called when a write to the dataref occurs.\r\nfunction my_custom_dataref_hooks_OnWrite( newValue )\r\n\tsound.say("dataref changed")\r\nend \r\n</code>\r\n\r\nAPI: >= 11.8\r\n', 
		'api_dref.cpp#L193'],
		['dref.newIntArray', 'dref.newIntArray( string_dataref_name )', '\r\nReturns: dref_id\r\n\r\nCreates a new int-array dataref.\r\n\r\nUse this when you want to use "part numbers" in your OBJ8 files.\r\n\r\nEg:\r\nmy/custom/float/array[2]\r\n\r\nValues are managed by Gizmo64. \r\nThe new dataref supports read+write access.\r\nAny other plugin may change their value at any time.\r\n\r\n<code>--Create a new custom dataref of type: float-array\r\nlocal dr_MyCustomIntArray = dref.newIntArray( "my/custom/int/array" )\r\n\r\n--Adjust the size of the float-array dataref. This can be done at any time.\r\ndref.setArraySize( dr_MyCustomIntArray, 10 )\r\n\r\n--You can now use "part numbers" [0] through [9] in your OBJ8 files.\r\n</code>\r\n\r\nAPI: >= 11.8\r\n', 
		'api_dref.cpp#L394'],
		['dref.publish', 'dref.publish( string_dataref_name )', 'Returns: nothing\r\nInforms DataRefEditor that a dataref with the specified name exists.\r\n\r\nThe dataref does not need to exist.\r\nThe dataref does not need to belong to Gizmo64.\r\n\r\nAPI: >= 13.07.05\r\n\r\n', 
		'api_dref.cpp#L1026'],
		['dref.setArraySize', 'dref.setArraySize( dref_id, new_size )', ' Returns: nothing\r\n \r\n Only valid when used on a custom-dataref that is owned and managed by Gizmo. Hooked datarefs manage their own size.\r\n \r\n API: >= 11.8\r\n \r\n', 
		'api_dref.cpp#L1095'],
		['dref.setAutoPublish', 'dref.setAutoPublish( boolean )', 'Returns: nothing\r\n\r\nToggles auto-publish feature of DRE for finer control of large projects.\r\n\r\nAPI: >= 13.07.05\r\n', 
		'api_dref.cpp#L1061'],
		['dref.setBytes', 'dref.setBytes( dataref_id, start_at, byte_string_var )', '\r\n Eg: dref.setBytes( dr_id, 1, "This is a new value payload." )\r\n \r\n', 
		'api_dref.cpp#L1128'],
		['dref.setFloat', 'dref.setFloat( dataref_id, value )', ' Push a new value into a dataref. Value is a decimal number.\r\n vvi = vvi * 2 \r\n dref.setFloat( dref_VVI, vvi )\r\n', 
		'api_dref.cpp#L1333'],
		['dref.setFloatV', 'dref.setFloatV( dataref_id, start_at, value1, value2, value3, ... )', ' OR\r\n tmp = { value1, value2, value3, ...., value10 }\r\n dref.setFloatV( dataref_id, start_at, tmp )\r\n \r\n Please also read the notes for dref.getFloatV() and dref.getIntV() functions.\r\n \r\n dref.setFloatArray(..) does the same things.\r\n', 
		'api_dref.cpp#L1246'],
		['dref.setInt', 'dref.setInt( dataref_id, value )', ' Push a new value into a dataref. Value is a decimal number.\r\n vvi = vvi * 2 \r\n dref.setFloat( dref_VVI, vvi )\r\n', 
		'api_dref.cpp#L1451'],
		['dref.setIntV', 'dref.setIntV( dataref_id, start_at, value1, value2, value3, ... )', ' OR\r\n tmp = { value1, value2, value3, ...., value10 }\r\n dref.setIntV( dataref_id, start_at, tmp )\r\n \r\n Please also read the notes for dref.getFloatV() and dref.getIntV() functions.\r\n \r\n dref.setIntArray(..) does the same things.\r\n', 
		'api_dref.cpp#L1359'],
		['dref.setString', 'dref.setString( dataref_id, byte_string_var )', '\r\nReturns: nothing\r\n \r\nEg: dref.setString( dr_id, "This is a new value payload." )\r\n\r\nYour string value will be terminated with a null byte to meet C-String formatting rules.\r\n\r\nhttp://en.wikipedia.org/wiki/C_string\r\n \r\n', 
		'api_dref.cpp#L1177']
		],
	'easings' : [
		['easings.easeOutQuad', 'easings.easeOutQuad( value, target, strength )', '\nReturns: intermediate value based on paramaters.\n\nvalue: current value of user data\ntarget: maximum desired value of user data\nstrength: how fast to get to the user data maximum\n\nAPI: >= 14.04\n', 
		'easings_api.lua#L15']
		],
	'event' : [
		['event.cacheAdd', 'event.cacheAdd( "function_name" )', '\r\nReturns: Registry index value for cached handle.\r\n\r\nAPI: >= 18.10.04\r\n', 
		'api_event.cpp#L239'],
		['event.register', 'event.register( string_event_name, string_cb_function_name )', '\r\nReturns: nothing.\r\n\r\nUse this function to create aliased event hooks.\r\n\r\nThis allows you to have multiple "clean" event handler functions.\r\n \r\n<code>function OnUpdate_HelloWorld()\r\n  --Update Hello World secret variables.\r\nend\r\n \r\nevent.register("OnUpdate", "OnUpdate_HelloWorld")\r\n</code>\r\nBy using the example above we can create multiple co-existing extensions inside Gizmo64.\r\nEach extension has full access to the rich Gizmo64 event model.\r\n \r\nAPI >= 12.02.01\r\n', 
		'api_event.cpp#L38'],
		['event.unregister', 'event.unregister( string_event_name, string_cb_function_name )', '\r\nReturns: nothing.\r\n\r\nUnregister an event hook alias that was previously registered using event.register(...)\r\n\r\nUse this function to destroy aliased event hooks.\r\n\r\n<code>function OnUpdate_HelloWorld()\r\n  --Update Hello World secret variables.\r\nend\r\n \r\nevent.register("OnUpdate", "OnUpdate_HelloWorld")\r\n\r\n--some time later on...\r\nevent.unregister("OnUpdate", "OnUpdate_HelloWorld")\r\n\r\n</code>\r\n \r\nAPI >= 12.02.01\r\n', 
		'api_event.cpp#L90']
		],
	'fmc' : [
		['fmc.clear', 'fmc.clear( index_number )', ' Clears the FMC step identified by index_number, eg: 2.\r\n', 
		'api_fmc.cpp#L67'],
		['fmc.clearAll', 'fmc.clearAll()', ' Clears all programmed FMC entries.\r\n \r\n (Clears 0-99)\r\n', 
		'api_fmc.cpp#L51'],
		['fmc.getCount', 'fmc.getCount()', ' Returns: Number of steps programmed into the FMC.\r\n', 
		'api_fmc.cpp#L85'],
		['fmc.getDestination', 'fmc.getDestination()', ' Returns: fmc_index_id telling us which leg of the FMC flight plan the pilot has currently selected as the destination.\r\n', 
		'api_fmc.cpp#L95'],
		['fmc.getDisplayed', 'fmc.getDisplayed()', ' Returns: fmc_index_id telling us which item the user is currently displaying on the FMC.\r\n', 
		'api_fmc.cpp#L108'],
		['fmc.getGpsNavAid', 'fmc.getGpsNavAid()', ' Returns: The current navaid_id that the GPS is programmed for.\r\n', 
		'api_fmc.cpp#L132'],
		['fmc.getGpsNavAidType', 'fmc.getGpsNavAidType()', ' Returns: navaid_type value, see nav.api for more.\r\n', 
		'api_fmc.cpp#L121'],
		['fmc.getInfo', 'fmc.getInfo( fmc_index_id )', ' Returns: navaid_type, lat, lon, alt, "ICAO_ID", navaid_id\r\n Eg:\r\n local fmc_info = { fmc.getInfo( 1 ) }\r\n \r\n API: >= 11.9\r\n \r\n', 
		'api_fmc.cpp#L144'],
		['fmc.setDestination', 'fmc.setDestination( fmc_index_id )', ' Controls which leg of the flight plan the FMC will fly towards.\r\n', 
		'api_fmc.cpp#L197'],
		['fmc.setDisplayed', 'fmc.setDisplayed( fmc_index_id )', ' Controls which leg of the flight plan is display on the FMC/FMS.\r\n', 
		'api_fmc.cpp#L215'],
		['fmc.setInfo', 'fmc.setInfo( fmc_index_id, navaid_id, altitude )', ' Changes an entry in the FMS. The destination coordinates will be updated to those of the navaid_id passed in and the altitude specified.\r\n Eg:\r\n Use this only for airports, fixes, and radio-beacon navaids. \r\n Currently the X-Plane FMC/FMS can only support VORs and NDBs. Use the api functions to fly to a lat/lon.\r\n', 
		'api_fmc.cpp#L233'],
		['fmc.setLatLon', 'fmc.setLatLon( fmc_index_id, Latitude, Longitude, altitude )', ' Changes an entry in the FMS. The destination coordinates will be updated to those of the latitude, longitude and altitude specified.\r\n', 
		'api_fmc.cpp#L257']
		],
	'font' : [
		['font.drawString', 'font.drawString( font_id, string_to_draw, OPT_x,OPT_y )', '\r\nReturns: nothing\r\n\r\n<code>\r\nlocal f = font.getFont( xp.getFolder() .. "Courier New.ttf", 36 )\r\n\r\nfunction OnDraw_Windows()\r\n\tfont.drawString( f, "Lorem ipsum delorem.", 200, 500 )\r\nend\r\n</code>\r\n\r\nAPI: >= 11.12.13\r\n', 
		'api_font.cpp#L124'],
		['font.getFolder', 'font.getFolder()', 'Returns: string\n\nReturns Gizmo64 default font folder with "out of the box" font files inside.\n\nAPI: >= 14.11.26\n', 
		'font_api.lua#L12'],
		['font.getFont', 'font.getFont( full_path_to_font_file, font_size )', '\nReturns: font_id\n\n<code>\nlocal f = font.getFont( xp.getFolder() .. "Courier New.ttf", 36 )\n</code>\n\nAPI >= 11.12.13\n', 
		'font_api.lua#L31'],
		['font.getFontEx', 'font.getFontEx( full_path_to_font_file, font_size )', '\r\nReturns: font_id\r\n\r\n<code>\r\nlocal f = font.getFontEx( xp.getFolder() .. "Courier New.ttf", 36 )\r\n</code>\r\n\r\nAPI >= 14.12.26\r\n', 
		'api_font.cpp#L37'],
		['font.getStringWidth', 'font.getStringWidth( font_id, string )', '\r\nReturns: horizontal length of string in decimal pixels\r\n\r\n', 
		'api_font.cpp#L238'],
		['font.measureString', 'font.measureString( font_id, string )', '\r\nReturns: horizontal length of string in decimal pixels\r\n\r\n', 
		'api_font.cpp#L232']
		],
	'geo' : [
		['geo.drawLatLon', 'geo.drawLatLon()', '\nDraw Lat/Lon markers on the planet surface.\n\nAPI: >= 14.12.31.0009\n', 
		'geo_api.lua#L277'],
		['geo.drawTargets', 'geo.drawTargets( targets_tbl )', ' \n \nAPI: >= 14.12.31.0009\n', 
		'geo_api.lua#L352'],
		['geo.drawWorldGLAxisMarker', 'geo.drawWorldGLAxisMarker()', '\nDraw Red,Green,Blue XYZ axis markers on planetary scale.\n\nAPI: >= 14.12.31.0009\n', 
		'geo_api.lua#L193'],
		['geo.getEarthRadius', 'geo.getEarthRadius()', '\nReturns: float value for earth radius according to X-Plane.\n\nAPI: >= 14.12.31.0009\n', 
		'geo_api.lua#L263'],
		['geo.getReferenceFix', 'geo.getReferenceFix()', '\nReturns: lat,lon\n\nValues are read from:\nsim/flightmodel/position/lat_ref\nsim/flightmodel/position/lon_ref\n\nValues refer to origin of OpenGL space. Can be used to synch with DSF data, etc.\n\nAPI: >= 14.12.31.0009\n', 
		'geo_api.lua#L239'],
		['geo.jumpToFix', 'geo.jumpToFix( lat,lon )', '\nRotates the GL matrix so that we\'re at the specific lat,lon with regards to the planet.\nUse with geo.jumpToSurface()\n\nAPI: >= 14.12.31.0009\n', 
		'geo_api.lua#L91'],
		['geo.jumpToSurface', 'geo.jumpToSurface()', '\nUse with geo.prepare()\nTranslates OpenGL cursor to surface of planet.\n\nAPI: >= 14.12.31.0009\n', 
		'geo_api.lua#L126'],
		['geo.prepare', 'geo.prepare()', '\nPrepares the OpenGL matrix for drawing on the planetary scale.\n\nCalls gl.PushMatrix()\n\nIMPORTANT: Use geo.unprepare() when you\'re done.\n\nAPI: >= 14.12.31.0009\n', 
		'geo_api.lua#L37'],
		['geo.readme', 'geo.readme()', '\nThis is an experimental API and is subject to change without notice or support.\n\nAPI: >= 14.12.31.0009\n', 
		'geo_api.lua#L25'],
		['geo.unprepare', 'geo.unprepare()', '\nUse with geo.prepare()\n\nAPI: >= 14.12.31.0009\n', 
		'geo_api.lua#L148'],
		['geo.viewPlanet', 'geo.viewPlanet()', '\nJumps to orbit and aims the camera at the earth.\n\nCalls camera.getControl()\n\nAPI: >= 14.12.31.0009\n', 
		'geo_api.lua#L166']
		],
	'gfx' : [
		['gfx.clearFBO', 'gfx.clearFBO()', ' \r\n Issues OpenGL commands to clear the current FBO drawing buffers.\r\n \r\n See gfx.useFBO(..)\r\n \r\n API >= 12.1.2\r\n \r\n', 
		'api_gfx.cpp#L824'],
		['gfx.clearMaskingTape', 'gfx.clearMaskingTape()', '\r\n This function is useful for drawing gauges.\r\n See gfx.setMaskingTape(..) for more info.\r\n', 
		'api_gfx.cpp#L847'],
		['gfx.clearTexture', 'gfx.clearTexture( texture_id, widht, height, bpp )', ' \r\n This function will erase an OpenGL texture slot.\r\n \r\n width and height should be power of 2 numbers for maximum compatability.\r\n \r\n bpp may be either 32 or 24.\r\n\t32 will upload a black texture with a clear alpha channel to the texture.\r\n\t24 will upload a black texture with no alpha channel data to the texture.\r\n \r\n', 
		'api_gfx.cpp#L1136'],
		['gfx.copyPixels', 'gfx.copyPixels( texture_id, left,bottom, width,height )', '\r\nReturns: bool\r\n\r\nHigh powered version of LuaGL gl.ReadPixels idiom.\r\n\r\nCopies a segment of the active frame buffer into a texture_id.\r\n\r\n<code>\r\nlocal new_tex = gfx.newTexture()\r\n\r\ngfx.copyPixels( new_tex, 0,0, 320,240 );\r\n</code>\r\n \r\nAPI: >= 14.05.06\r\n', 
		'api_gfx.cpp#L1917'],
		['gfx.disableReflectionDrawingCalls', 'gfx.disableReflectionDrawingCalls()', ' Unregister your scripts from X-Planes reflection-drawing calls.\r\n', 
		'api_gfx.cpp#L1765'],
		['gfx.drawArc', 'gfx.drawArc( radius, segments, begin_degrees, end_degrees )', ' \r\n Draws an arc line, use gl.api to setup line styling parameters.\r\n \r\n radius in pixels\r\n segments controls the subdivision level for the arc drawing, higher = smoother.\r\n begin and end_degrees start at 12\'oclock and wind clockwise.\r\n \r\n', 
		'api_gfx.cpp#L2009'],
		['gfx.drawBox', 'gfx.drawBox( left,bottom,width,height )', '\r\n Draws a box on the screen, does not fill it.\r\n Use gl.api to modify line styling params.\r\n \r\n', 
		'api_gfx.cpp#L2119'],
		['gfx.drawCircle', 'gfx.drawCircle( radius,segments )', ' \r\n Draws a circular line, use gl.api to setup line styling parameters.\r\n \r\n radius in pixels\r\n segments controls the subdivision level for the arc drawing, higher = smoother.\r\n \r\n', 
		'api_gfx.cpp#L2195'],
		['gfx.drawFilledArc', 'gfx.drawFilledArc( radius, segments, begin_degrees, end_degrees )', ' \r\n Draws an arc line, use gl.api to setup line styling parameters.\r\n \r\n radius in pixels\r\n segments controls the subdivision level for the arc drawing, higher = smoother.\r\n begin and end_degrees start at 12\'oclock and wind clockwise.\r\n \r\n', 
		'api_gfx.cpp#L2051'],
		['gfx.drawFilledBox', 'gfx.drawFilledBox( left,bottom,width,height )', '\r\n Draws a box using raw OpenGL functions.\r\n Use gfx.setColor( r,g,b, a ) to control color.\r\n User gfx.texOff() to turn texturing on or off.\r\n\r\n', 
		'api_gfx.cpp#L2359'],
		['gfx.drawFilledCircle', 'gfx.drawFilledCircle( radius,segments )', '\r\n Draws a filled circle, use gl.api to setup styling parameters.\r\n \r\n radius in pixels\r\n segments controls the subdivision level for the arc drawing, higher = smoother.\r\n \r\n', 
		'api_gfx.cpp#L2233'],
		['gfx.drawLine', 'gfx.drawLine( a,b, x,y )', ' \r\n Draws a line, use gl.api to setup line styling parameters.\r\n \r\n\t--Draw a line from the bottom left corner of the screen/texture\r\n\t--To approx mid-point. Assuming screen/texture is 1024^2\r\n \r\n\tgfx.drawLine( 0,0, 512,512 );\r\n\r\n', 
		'api_gfx.cpp#L2282'],
		['gfx.drawObject', 'gfx.drawObject( object_id, lat,lon,alt, p,r,h )', ' Draw an object in World Coordinates. Lat/Lon/Alt.\r\n', 
		'api_gfx.cpp#L2705'],
		['gfx.drawObjectEx', 'gfx.drawObjectEx( object_handle, x,y,z, p,r,h )', ' Draws using X-Planes OBJ8 calls _immediately_, does not force you through Gizmos Queue.\r\n', 
		'api_gfx.cpp#L2803'],
		['gfx.drawObjectGL', 'gfx.drawObjectGL( object_handle, x,y,z, p,r,h )', ' Draws using OpenGL coords.\r\n', 
		'api_gfx.cpp#L2753'],
		['gfx.drawRGBWidget', 'gfx.drawRGBWidget( length, width )', '\nReturns: nothing\n\nDraws an RGB 3D View Widget. Commonly used to indicate axial orientation.\n\nAPI: >= 15.03.16\n', 
		'gfx_api.lua#L11'],
		['gfx.drawRadial', 'gfx.drawRadial( heading, radius, length )', '\r\n Draws a radial line, as used on gauge faces for tick marks, properly rotated to radiate from center.\r\n', 
		'api_gfx.cpp#L2441'],
		['gfx.drawString', 'gfx.drawString( string, OPT_x,OPT_y )', '\r\nReturns: nothing\r\n\r\nDraws a string using the default X-Plane font.\r\nNo other font is available for this function.\r\n\r\nx,y parameters are optional, 0,0 is the default if not specified.\r\nBOTH must be supplied, or none.\r\n\r\n<code>\r\ngfx.drawString( "Hello World!", 512,384 )\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_gfx.cpp#L1699'],
		['gfx.drawTranslucentDarkBox', 'gfx.drawTranslucentDarkBox( left,bottom,width,height )', ' \r\n Draws a transparent dark box using the built in Plugin SDK function: XPLMDrawTranslucentDarkBox(...)\r\n \r\n', 
		'api_gfx.cpp#L2163'],
		['gfx.drawTriMesh', 'gfx.drawTriMesh( trimesh_id )', '\r\nReturns: nothing\r\n\r\nDraws a trimesh.\r\n\r\n\r\nAPI: >= 14.05\r\n', 
		'api_gfx.cpp#L2484'],
		['gfx.drawVBO', 'gfx.drawVBO( vbo_id, offset, count, OPT_draw_mode )', '\r\nReturns: nothing\r\n\r\nDraws a VBO.\r\n\r\nAPI: >= 14.05\r\n', 
		'api_gfx.cpp#L2555'],
		['gfx.enableReflectionDrawingCalls', 'gfx.enableReflectionDrawingCalls()', ' Register your scripts with X-Planes reflection-drawing calls.\r\n This results in your drawing callbacks being called many times.\r\n', 
		'api_gfx.cpp#L1777'],
		['gfx.generateTexture_Checkerboard', 'gfx.generateTexture_Checkerboard()', '\nReturns: texture_id\n\nGenerates a 64x64 texture filled with a classic checkerboard pattern.\n\nAPI: >= 12.01\n', 
		'gfx_api.lua#L72'],
		['gfx.getAircraftPositionGL', 'gfx.getAircraftPositionGL()', '\r\nReturns: x,y,z,p,r,h\r\n\r\nx,y,z,p,r,h = gfx.getAircraftPositionGL()\r\n\r\n', 
		'api_gfx.cpp#L132'],
		['gfx.getDrawDebugPath', 'gfx.getDrawDebugPath()', 'Returns: true or nil\r\nCan be used to determine whether to draw additional debug data around the aircraft.\r\n', 
		'api_gfx.cpp#L165'],
		['gfx.getFPS', 'gfx.getFPS()', ' Returns: Frames-per-second value, eg: 50.1\r\n', 
		'api_gfx.cpp#L213'],
		['gfx.getFrameSpeed', 'gfx.getFrameSpeed( target_speed_per_second )', 'Returns: Distance to move this-frame in OpenGL-space to achieve desired speed per second given.\r\n', 
		'api_gfx.cpp#L187'],
		['gfx.getIsViewInsideCockpit', 'gfx.getIsViewInsideCockpit()', ' Returns: boolean\r\n\r\n\tBUG FIX: gfx.isViewInsideCockpit() -> gfx.getIsViewInsideCockpit()\r\n\r\n \r\n API: >= 13.06.24\r\n \r\n', 
		'api_gfx.cpp#L472'],
		['gfx.getM', 'gfx.getM()', ' gfx.getFRP()\r\n Returns: Special multiplier variable^. \r\n object_speed_for_this_frame = speed_in_meters * gfx.getM() \r\n \r\n\r\nData comes from internal Gizmo64 timer variable that accounts for time spent processing Lua scripts using OS High Performance Timer tracking.\r\n\r\nDEPRECATED: ^ Data comes from: ( sim/operation/misc/frame_rate_period )\r\n', 
		'api_gfx.cpp#L223'],
		['gfx.getScreenSize', 'gfx.getScreenSize()', ' Returns: width,height\r\n local sw,sh = gfx.getScreenSize()\r\n', 
		'api_gfx.cpp#L244'],
		['gfx.getStringWidth', 'gfx.getStringWidth( string )', '\r\nReturns: horizontal width of string in pixels as float value.\r\n\r\n<code>\r\nlocal width = gfx.measureString( "foo" )\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_gfx.cpp#L1871'],
		['gfx.getTexture_CELogo', 'gfx.getTexture_CELogo()', ' Returns: Gizmo Community Edition Texture\r\n', 
		'api_gfx.cpp#L342'],
		['gfx.getTexture_GizmoLogo', 'gfx.getTexture_GizmoLogo()', ' Returns: texture_id for Gizmo logo texture.\r\n', 
		'api_gfx.cpp#L332'],
		['gfx.getTexture_LiteMap', 'gfx.getTexture_LiteMap()', ' Returns: texture_id for LiteMap texture, not much use with OBJ8 detailed aircraft.\r\n', 
		'api_gfx.cpp#L301'],
		['gfx.getTexture_LuaLogo', 'gfx.getTexture_LuaLogo()', ' Returns: texture_id for Lua logo texture.\r\n', 
		'api_gfx.cpp#L362'],
		['gfx.getTexture_Paint', 'gfx.getTexture_Paint()', ' Returns: texture_id for Paint texture, not much use with OBJ8 detailed aircraft.\r\n', 
		'api_gfx.cpp#L311'],
		['gfx.getTexture_UI', 'gfx.getTexture_UI()', ' Returns: texture_id for X-Plane GUI UI texture. \r\n Useful to restore state or draw custom widgets.\r\n', 
		'api_gfx.cpp#L321'],
		['gfx.getTexture_XALogo', 'gfx.getTexture_XALogo()', ' Returns: texture_id for X-Aviation logo texture.\r\n', 
		'api_gfx.cpp#L352'],
		['gfx.loadObject', 'gfx.loadObject( OPT_object_id, filename )', '\nReturns: object_id or nil if object could not be loaded by X-Plane.\n\n<code>\nlocal obj_id = gfx.loadObject( "Aircraft/General Aviation/Cirrus Jet/objects/cockpit.obj" )\n</code>\n\nAPI: >= 13.4.5\n', 
		'gfx_api.lua#L194'],
		['gfx.loadObjectEx', 'gfx.loadObjectEx( OPT_object_id, filename )', '\r\nReturns: object_id or nil if object could not be loaded by X-Plane.\r\n\r\n<code>\r\nlocal obj_id = gfx.loadObject( "Aircraft/General Aviation/Cirrus Jet/objects/cockpit.obj" )\r\n</code>\r\n\r\nAPI: >= 14.12.26\r\n', 
		'api_gfx.cpp#L567'],
		['gfx.loadPng', 'gfx.loadPng( OPT_texture_id, filename )', '\nReturns: texture_id or -1 if PNG load fails.\n\nLoad a PNG file into the specified texture slot.\n\n<code>\nlocal tex_id = gfx.loadPng( acf.getFolder() .. "texture.png" )\n</code>\n\nAPI: >= 12.01\n', 
		'gfx_api.lua#L223'],
		['gfx.loadPngEx', 'gfx.loadPngEx( OPT_texture_id, filename )', '\r\nReturns: texture_id or -1 if PNG load fails.\r\n\r\nLoad a PNG file into the specified texture slot.\r\n\r\n<code>\r\nlocal tex_id = gfx.loadPng( acf.getFolder() .. "texture.png" )\r\n</code>\r\n\r\nAPI: >= 14.12.26\r\n', 
		'api_gfx.cpp#L1336'],
		['gfx.loadTga', 'gfx.loadTga( OPT_texture_id, filename )', '\r\nReturns: texture_id or -1 if texture load fails.\r\n\r\nLoad a TGA file into the specified texture slot. Acceptable formats: 24 or 32 bit. Do not use RLE encoding.\r\n\r\n<code>\r\nlocal tex_id = gfx.loadTga( acf.getFolder() .. "texture.tga" )\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_gfx.cpp#L1586'],
		['gfx.loadTgaBlob', 'gfx.loadTgaBlob( texture_id, blob, blob_size )', '\r\nReturns: 0\r\n\r\nThis API is old and rarely used.\r\n\r\nLoad a TGA blob into the specified texture slot. Acceptable formats: 24 or 32 bit. Do not use RLE encoding.\r\n\r\nThis can be used to download a texture off the disk or bake one in RAM, etc.\r\n\r\n<code>\r\nlocal tga_blob = "bla bla bla binary"\r\nlocal tex_id = gfx.newTexture()\r\ngfx.loadTgbBlob( tex_id, tga_blob )\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_gfx.cpp#L1656'],
		['gfx.localToWorld', 'gfx.localToWorld( x,y,z )', ' Returns: lat,lon,alt\r\n Eg:\r\n lat,lon,alt = gfx.localToWorld( x,y,z )\r\n', 
		'api_gfx.cpp#L444'],
		['gfx.matchAircraftOrientation', 'gfx.matchAircraftOrientation()', ' Performs a GL translate and rotate so that your drawing matches the aircraft exactly. \r\n From here you can easily translate to the nose or a wing tip.\r\n Note: You MUST wrap this function in calls to gl.PushMatrix() before you call and gl.PopMatrix() after you call. \r\n If you do not you will corrupt the drawing stack and the result is undefined. Probably junk on screen.\r\n', 
		'api_gfx.cpp#L1829'],
		['gfx.measureString', 'gfx.measureString( string )', '\r\nReturns: horizontal width of string in pixels as float value.\r\n\r\n<code>\r\nlocal width = gfx.measureString( "foo" )\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_gfx.cpp#L1860'],
		['gfx.newFBO', 'gfx.newFBO( texture_id, width, height )', ' Returns: fbo_id\r\n Creates a new Frame-Buffer-Object that can be used to "render to texture".\r\n See also gfx.useFBO(..) and gfx.releaseFBO(..)\r\n', 
		'api_gfx.cpp#L1792'],
		['gfx.newTexture', 'gfx.newTexture()', ' Returns: texture_id\r\n Creates a blank texture slot that can be used to load a texture into or create an FBO with.\r\n', 
		'api_gfx.cpp#L286'],
		['gfx.plot', 'gfx.plot( data_set, stride, scale )', '\nReturns: nothing\n\nPerforms a line plot of your data set.\n\nMoves "stride" pixels +X for every step of data.\n\nScales data by scale param.\n\n<code>\nsample_points = map.getTerrainProfile( {1000,0,1000}, {0,0,0}, 200 )\n\nfunction OnDraw_Windows()\n\tgfx.plot( sample_points, 2, 128 )\nend\n</code>\n\n', 
		'gfx_api.lua#L308'],
		['gfx.rebindFBO', 'gfx.rebindFBO( fbo_id..... )', '\r\n\r\n\r\n', 
		'api_gfx.cpp#L1180'],
		['gfx.releaseFBO', 'gfx.releaseFBO( fbo_id )', ' \r\n Release active FBO and return all drawing targets to normal.\r\n \r\n Tweaked to no longer require any FBO argument: 12.12.28\r\n \r\n Retweaked to require an FBO argument so we can do mipmap gen.\r\n \r\n', 
		'api_gfx.cpp#L1204'],
		['gfx.savePng', 'gfx.savePng( texture_id, filename )', '\nReturns: true or nil,error pair.\n\nSaves to disk as an RGBA file.\n\n<code>\nlocal ret,msg = gfx.savePng( 5, "/foo.png" )\n\nif( ret )then\n--it worked\nelse\n\tconsole.log( msg )\nend\n</code>\n\nAPI: >= 15.10\n', 
		'gfx_api.lua#L253'],
		['gfx.savePngEx', 'gfx.savePngEx( texture_id, filename, mipmap_level )', '\r\nReturns: ...\r\n\r\nSave a texture to disk.\r\n\r\n<code>\r\ngfx.loadPng( tex_id, acf.getFolder() .. "texture.png" )\r\n</code>\r\n\r\nAPI: >= 15.10.04\r\n', 
		'api_gfx.cpp#L1529'],
		['gfx.screenToGL', 'gfx.screenToGL( win_x, win_y )', ' Returns: x,y,z in OpenGL space.\r\n \r\n The results you get from this will depend on the callback mode X-Plane is in when you call it.\r\n \r\n OnDraw_Windows and OnDraw_Airplanes will return different values because the OpenGL depth buffer contents is different.\r\n\r\n * * * EXPERIMENTAL * * *\r\n \r\n API: >= 13.10.09.0243\r\n\r\n', 
		'api_gfx.cpp#L377'],
		['gfx.setColor', 'gfx.setColor( r,g,b, a )', ' \r\n All arguments are 0-1\r\n Set the color to red, 75% opacity.\r\n gfx.setColor( 1,0,0, 0.75 )\r\n \r\n API >= 12.1\r\n gfx.setColor( {colors} )\r\n \r\n Eg:\r\n local red = {1,0,0, 1}\r\n gfx.setColor( red )\r\n \r\n', 
		'api_gfx.cpp#L869'],
		['gfx.setMaskingTape', 'gfx.setMaskingTape( x,y, w,h )', ' \r\nThis function is useful for drawing gauges.\r\nIt will setup a masked region for you to draw inside of.\r\nAll drawing outside of the masked region will be ignored.\r\n\r\n(Requests an OpenGL clipping box using glScissor(..))\r\n\r\nMany thanks to x-alberto@x-pilot for the code submission.\r\nhttp://forums.x-pilot.com/index.php?topic=1502.msg15474#msg15474\r\n\r\n\r\nAPI: >= 11.5.6 \r\n', 
		'api_gfx.cpp#L739'],
		['gfx.setState', 'gfx.setState( fog, numTexUnits, lighting, alphaTest, alphaBlend, depthTest, depthWrite )', '\r\nReturns: nothing\r\n\r\nSet graphics state using XPLMSetGraphicsState(..) Most flags are 0 or 1.\r\nnumTexUnits accepts > 1\r\n\r\n<code>\r\ngfx.setState( \r\n\t0, --fog\r\n\t1, --numTexUnits,\r\n\t0, --lighting,\r\n\t1, --alphaTest,\r\n\t1, --alphaBlend,\r\n\t0, --depthTest,\r\n\t0 --depthWrite\r\n\t)\r\n</code>\r\n\r\nAPI: >= 12.0\r\n', 
		'api_gfx.cpp#L985'],
		['gfx.setupViewportProjection_Perspective', 'gfx.setupViewportProjection_Perspective( width,height,near,far )', '\nReturns: nothing\n\nConfigures OpenGL for perspective mode rendering. Use with an FBO or gui.newCustomWidget for best results.\n\nAPI: >= 14.05\n', 
		'gfx_api.lua#L159'],
		['gfx.texOff', 'gfx.texOff()', ' Turn OpenGL texturing off.\r\n', 
		'api_gfx.cpp#L1048'],
		['gfx.texOn', 'gfx.texOn()', ' Turn OpenGL texturing on.\r\n', 
		'api_gfx.cpp#L1076'],
		['gfx.useFBO', 'gfx.useFBO( fbo_id )', ' Makes an FBO object active and redirects all OpenGL drawing into that FBO. \r\n All drawing will be saved into the texture nominated during gfx.newFBO(..) \r\n You MUST call gfx.releaseFBO() when you are finished drawing.\r\n', 
		'api_gfx.cpp#L1104'],
		['gfx.useTexture', 'gfx.useTexture( texture_id, OPT_texture_unit )', '\r\nSets your nominated texture as "active" for OpenGL drawing operations.\r\n\r\ntexture_unit is an optional parameter. Default is 0.\r\n\r\ntexture_unit is an OpenGL specific value, 0 based. Maximum value is 3.\r\n\r\n<code>\r\ngfx.useTexture( tex_Interface, 0 )\r\n</code>\r\n\r\n\r\n', 
		'api_gfx.cpp#L1246'],
		['gfx.worldToLocal', 'gfx.worldToLocal( lat,lon,alt )', ' Convert world-space coordinates, from a real map, into OpenGL drawing coordinates, for use in a Game Engine.\r\n This function makes no attempt to check if your request makes sense, if you ask for coordinates on the other side of the planet the result is undefined. Good luck.\r\n x,y,z = gfx.worldToLocal( lat,lon,alt )\r\n', 
		'api_gfx.cpp#L2871']
		],
	'gizmo' : [
		['gizmo.dofile', 'gizmo.dofile( filename )', '\r\nReturns: nothing\r\n\r\nBasically the same as the built in Lua dofile() except we work with encrypted files.\r\n\r\n<code>\r\ngizmo.dofile("secured.lua.aes")\r\n</code>\r\n\r\nAPI >= 11.11.03\r\n', 
		'api_gizmo.cpp#L98'],
		['gizmo.dofirmware', 'gizmo.dofirmware( filename )', '\r\nReturns: nothing\r\n\r\nBasically the same as the built in Lua dofile() except we work with encrypted files inside the firmware folder.\r\n\r\n<code>\r\ngizmo.dofirmware( "firmware_ext.lua.aes" )\r\n</code>\r\n\r\nAPI >= 12.01.29\r\n', 
		'api_gizmo.cpp#L52'],
		['gizmo.getBuildDate', 'gizmo.getBuildDate()', ' Returns: String containing date that the .xpl file was compiled.\r\n Eg:\r\n date_built = gizmo.getBuildDate()\r\n', 
		'api_gizmo.cpp#L278'],
		['gizmo.getDisabledEventNames', 'gizmo.getDisabledEventNames()', ' Returns: Table of strings containing all disabled event names.\r\n Eg:\r\n disabled_events = { gizmo.getDisabledEventNames() }\r\n', 
		'api_event.cpp#L186'],
		['gizmo.getFolder', 'gizmo.getFolder()', '\nReturns: string\n\nGet the folder for Gizmo64 and all its resources.\n\nAPI: >= 14.04\n', 
		'gizmo_api.lua#L10'],
		['gizmo.getPossibleEventNames', 'gizmo.getPossibleEventNames()', ' Returns: Table of strings containing all possible event names.\r\n Eg:\r\n possible_events = { gizmo.getPossibleEventNames() }\r\n', 
		'api_event.cpp#L210'],
		['gizmo.getStats', 'gizmo.getStats( key_name )', 'Returns: variable data set depending on key_name\r\n\r\n *: Not available yet.\r\n\r\nAcceptable keys:\r\n- lua_stack_size*\r\n- lua_ram_use*\r\n\r\n- sound_sources\r\n- sound_buffers\r\n- sound_ram_use*\r\n\r\n- shader_count\r\n- texture_count\r\n- texture_ram_use*\r\n- trimesh_count\r\n- vbo_count\r\n\r\n API: >= 16.7\r\n', 
		'api_gizmo.cpp#L168'],
		['gizmo.getVersion', 'gizmo.getVersion()', ' Returns: "Human" friendly version string.\r\n', 
		'api_gizmo.cpp#L360'],
		['gizmo.getVersionFull', 'gizmo.getVersionFull()', ' Returns: Machine friendly version number as Integer.\r\n Eg: 201103141234 - 2011-03-14-1234\r\n', 
		'api_gizmo.cpp#L372'],
		['gizmo.reboot', 'gizmo.reboot()', ' Reboot the Gizmo script engine, same effect as the menu item.\r\n', 
		'api_gizmo.cpp#L385'],
		['gizmo.resetEventMap', 'gizmo.resetEventMap()', ' Reset the table of disabled events. Causes all events to be allowed another try.\r\n', 
		'api_event.cpp#L170'],
		['gizmo.sleep', 'gizmo.sleep( duration_in_milliseconds, OPT_power_saver )', '\r\nReturns: nothing\r\n\r\nCauses the main X-Plane thread to sleep for N ms.\r\n\r\nPassing a second argument sets the Gizmo "Global Power Saver" sleep value.\r\nThis value is NOT reset automatically when Gizmo reboots the script engine.\r\nThis option is intended for developers and those wanting greater control over X-Planes CPU priority.\r\n\r\n<code>\r\n--Make x-plane sleepy, low power consumption, better OS response.\r\n--This will make x-plane sleep for 20ms every flight loop.\r\ngizmo.sleep( 20, 1 )\r\n\r\n--remove sleep delay\r\ngizmo.sleep( 0, 0 )\r\n\r\n--Sleep for 10ms, once only.\r\ngizmo.sleep( 10 )\r\n</code>\r\n\r\nAPI: >= 11.11 for gizmo.sleep(duration, power_saver)\r\n', 
		'api_gizmo.cpp#L300']
		],
	'gl' : [
		['gl.read_me', 'gl.read_me()', '\n Gizmo provides access to LuaGL, a Lua binding for OpenGL.\n This provides access to any GL commands you want to execute.\n \n You are not constrained by only what\'s in the gfx.api.\n \n http://luagl.sourceforge.net/#ref\n \n', 
		'api_third_party_docs.cpp#L50']
		],
	'glu' : [
		['glu.read_me', 'glu.read_me()', ' \n Gizmo provides access to LuaGL, a Lua binding for OpenGL.\n This provides access to any GL commands you want to execute.\n \n You are not constrained by only what\'s in the gfx.api.\n \n http://luagl.sourceforge.net/#ref\n \n API: >= 11.5.25\n \n', 
		'api_third_party_docs.cpp#L63']
		],
	'gui' : [
		['gui.blur', 'gui.blur( gui_widget_id )', ' \r\n Removes keyboard focus.\r\n \r\n API: >= 11.8.2\r\n', 
		'api_gui.cpp#L82'],
		['gui.getCustomWidgetMouseXY', 'gui.getCustomWidgetMouseXY( )', ' Returns: x,y for mouse corrected for use in Custom Widget graphics.\r\n \r\n API: > 11.5.15\r\n', 
		'api_gui.cpp#L220'],
		['gui.getWidgetSize', 'gui.getWidgetSize( gui_widget_id )', ' \r\n Returns: left,top,width,height\r\n \r\n API: >= 11.5.29\r\n', 
		'api_gui.cpp#L297'],
		['gui.getWidgetValue', 'gui.getWidgetValue( gui_widget_id )', ' Returns: value of gui_widget_id\r\n \r\n Basic functionality available since 11.1\r\n \r\n Enhanced in >= 11.9\r\n \r\n Returns: boolean for checkbox or radio-button widgets, text value for others.\r\n', 
		'api_gui.cpp#L240'],
		['gui.getWidgetVisible', 'gui.getWidgetVisible( gui_widget_id )', '\r\nReturns: boolean\r\n\r\n\r\n\r\nAPI: >= 14.06\r\n', 
		'api_gui.cpp#L400'],
		['gui.getWindowList', 'gui.getWindowList()', ' Returns: table of strings containing the names of all GUI Windows Gizmo is managing.\r\n window_list = { gui.getWindowList() }\r\n', 
		'api_gui.cpp#L565'],
		['gui.getWindowSize', 'gui.getWindowSize( gui_window_id )', ' \r\n Returns: left,top,width,height\r\n \r\n API: >= 11.5.29\r\n', 
		'api_gui.cpp#L331'],
		['gui.getWindowVisible', 'gui.getWindowVisible( gui_window_id )', '\r\nReturns: boolean\r\n\r\n\r\n\r\nAPI: >= 14.06\r\n', 
		'api_gui.cpp#L437'],
		['gui.hideWidget', 'gui.hideWidget( gui_widget_id )', '\r\nReturns: nothing\r\n\r\nHides a GUI Widget.\r\n\r\n<code>\r\ngui.hideWidget( widget_txtBox )\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_gui.cpp#L582'],
		['gui.hideWindow', 'gui.hideWindow( gui_window_id )', '\r\nReturns: nothing\r\n\r\nHides a GUI Window.\r\n\r\n<code>\r\ngui.hideWindow( window_foo )\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_gui.cpp#L610'],
		['gui.newButton', 'gui.newButton( gui_window_id, click_handler_function_name_string, button_caption, left, top, width )', '\r\nReturns: gui_widget_id\r\n\r\nWhen clicked the function MyClickHandlerFunction_OnClick() will be called.\r\n\r\n<code>\r\nlocal widget = gui.newButton( window, "MyClicker", "GO!", 10, 10, 100 )\r\n\r\nfunction MyClicker_OnClick()\r\n\tsound.say("button was clicked")\r\nend\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_gui.cpp#L928'],
		['gui.newCheckbox', 'gui.newCheckbox( gui_window_id, click_handler_function_string, button_caption, left, top, width )', '\r\nReturns: gui_widget_id\r\n\r\nWhen clicked the function MyClickHandlerFunction_OnClick() will be called.\r\n\r\nWhen using a checkbox the caption will display poorly.\r\nIt\'s recommended that you use a seperate text-label widget.\r\n\r\n<code>\r\nlocal widget = gui.newCheckbox( window, "MyClicker", "GO!", 10, 10, 100 )\r\n\r\nfunction MyClicker_OnClick()\r\n\tsound.say("button was clicked")\r\nend\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_gui.cpp#L1011'],
		['gui.newCustomWidget', 'gui.newCustomWidget( gui_window_id, event_handler_function, left, top, width, height )', '\r\nReturns: gui_widget_id\r\n\r\n<code>\r\nlocal widget_id = gui.newCustomWidget( gui_window_id, "EventHandlerFunction", left, top, width, height )\r\n\r\nfunction EventHandlerFunction_OnDraw()\r\n\t--Do stuff.\r\n\t--You MUST draw here.\r\nend\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_gui.cpp#L1098'],
		['gui.newLabel', 'gui.newLabel( gui_window_id, event_handler_function, button_caption, left, top, width )', '\r\nReturns: gui_widget_id\r\n\r\n<code>\r\nlocal label = gui.newLabel( gui_window_id, "EventHandlerFunction", "Button Caption", left, top, width )\r\n\r\nfunction EventHandlerFunction_OnClick()\r\n\t--Label was clicked.\r\nend\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_gui.cpp#L1221'],
		['gui.newListView', 'gui.newListView( gui_window_id, event_handler_function, button_caption, left, top, width )', '\r\nReturns: gui_widget_id\r\n\r\n<code>\r\nlocal label = gui.newListView( gui_window_id, "EventHandlerFunction", "Button Caption", left, top, width )\r\n\r\nfunction EventHandlerFunction_OnClick()\r\n\t--Label was clicked.\r\nend\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_gui.cpp#L1303'],
		['gui.newPasswordBox', 'gui.newPasswordBox( gui_window_id, event_handler_function, button_caption, left, top, width )', '\r\nReturns: gui_widget_id\r\n\r\n<code>\r\nlocal label = gui.newPasswordBox( gui_window_id, "EventHandlerFunction", "Button Caption", left, top, width )\r\n\r\nfunction EventHandlerFunction_OnClick()\r\n\t--Label was clicked.\r\nend\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_gui.cpp#L1688'],
		['gui.newScreen', 'gui.newScreen( gui_window_id, event_handler_function, button_caption, left, top, width )', '\r\nReturns: gui_widget_id\r\n\r\nFIXME: I think this is for some kind of SDK-named sub-window. The naming sucks. Totally ambiguous/confusing.\r\n\r\n<code>\r\nlocal label = gui.newScreen( gui_window_id, "EventHandlerFunction", "Button Caption", left, top, width )\r\n\r\nfunction EventHandlerFunction_OnClick()\r\n\t--Label was clicked.\r\nend\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_gui.cpp#L1534'],
		['gui.newSubWindow', 'gui.newSubWindow( gui_window_id, event_handler_function, button_caption, left, top, width )', '\r\nReturns: gui_widget_id\r\n\r\n<code>\r\nlocal label = gui.newSubWindow( gui_window_id, "EventHandlerFunction", "Button Caption", left, top, width )\r\n\r\nfunction EventHandlerFunction_OnClick()\r\n\t--Label was clicked.\r\nend\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_gui.cpp#L1457'],
		['gui.newTextBox', 'gui.newTextBox( gui_window_id, event_handler_function, button_caption, left, top, width )', '\r\nReturns: gui_widget_id\r\n\r\n<code>\r\nlocal label = gui.newTextBox( gui_window_id, "EventHandlerFunction", "Button Caption", left, top, width )\r\n\r\nfunction EventHandlerFunction_OnClick()\r\n\t--Label was clicked.\r\nend\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_gui.cpp#L1613'],
		['gui.newWindow', 'gui.newWindow( window_name )', '\r\nReturns: gui_window_id\r\n\r\nGizmo will look for and automatically call WindowIdentifier_OnCreate() to allow defered and somewhat neater code\r\nfor creating the actual window layout.\r\n\r\n<code>\r\nlocal window = gui.newWindow( "MyWindow" )\r\n\r\nfunction MyWindow_OnCreate()\r\n\tlocal txtBox = gui.newTextBox( window, ... ) --see docs for gui.newTextBox\r\nend\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_gui.cpp#L1773'],
		['gui.setCustomWidgetClipping', 'gui.setCustomWidgetClipping( gui_widget_id, integer_bool_flag )', '\r\nReturns: nothing\r\n\r\nSets GL clipping on/off for custom widget bounds.\r\n\r\n<code>\r\n--clipping off\r\ngui.setCustomWidgetClipping( widget_id, 0 )\r\n\r\n--clipping on\r\ngui.setCustomWidgetClipping( widget_id, 1 )\r\n</code>\r\n\r\nAPI: >= 11.11\r\n', 
		'api_gui.cpp#L110'],
		['gui.setFocus', 'gui.setFocus( gui_widget_id )', '\r\n Set keyboard focus.\r\n \r\n API: >= 11.8.2\r\n', 
		'api_gui.cpp#L147'],
		['gui.setPasswordMode', 'gui.setPasswordMode( gui_widget_id, int_flag )', ' Control the password-hiding mode of a text field.\r\n', 
		'api_gui.cpp#L480'],
		['gui.setWidgetSelection', 'gui.setWidgetSelection( gui_widget_id, selection_start, selection_end )', ' Returns: nil\r\n \r\n Used to control the selection range of things like text boxes.\r\n \r\n If used during an _OnKeyDown handler you will need to use a deferred execution in some circumstances.\r\n \r\n \r\n API: >= 14.03.13\r\n', 
		'api_gui.cpp#L680'],
		['gui.setWidgetSize', 'gui.setWidgetSize( gui_widget_id, left, top, width, height )', ' \r\n API: >= 11.5.29\r\n', 
		'api_gui.cpp#L755'],
		['gui.setWidgetValue', 'gui.setWidgetValue( gui_widget_id, new_value )', '\r\nReturns: nothing\r\n\r\nSets the value of the target widget to the value you pass in.\r\nValues can be strings or numbers, other data will probably fail.\r\n\r\nBasic functionality available since 11.1\r\n\r\nEnhanced in >= 11.9\r\n\r\nNow accepts 0/1 for checkbox or radio-button widgets to modify their state.\r\n\r\n<code>\r\ngui.setWidgetValue( widget_txtUsername, "br@x-plugins.com" )\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_gui.cpp#L507'],
		['gui.setWindowCaption', 'gui.setWindowCaption( gui_window_id, window_caption )', '\r\nReturns: nothing\r\n\r\n<code>\r\ngui.setWindowCaption( window_h, "Window Title Bar Caption" )\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_gui.cpp#L637'],
		['gui.setWindowSize', 'gui.setWindowSize( gui_window_id, left, top, width, height )', '\r\nReturns: nothing\r\n\r\nSet the window size for a GUI Window.\r\n\r\n<code>\r\ngui.setWindowSize( window_foo, 10,10, 640,480)\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_gui.cpp#L834'],
		['gui.showWidget', 'gui.showWidget( gui_widget_id )', '\r\nShow target Widget.\r\n\r\n', 
		'api_gui.cpp#L889'],
		['gui.showWindow', 'gui.showWindow( gui_window_id )', '\r\nShow target Window.\r\n\r\n', 
		'api_gui.cpp#L909']
		],
	'gui2' : [
		['gui2.getWindowSize', 'gui2.getWindowSize( window_id )', '\r\nReturns: l,t,r,b\r\n\r\nAPI: >= 19.03\r\n', 
		'api_gui2.cpp#L464'],
		['gui2.getWindowVisible', 'gui2.getWindowVisible( window_id )', '\r\nReturns: 1 | 0\r\n\r\nAPI: >= 19.03\r\n', 
		'api_gui2.cpp#L427'],
		['gui2.hideWindow', 'gui2.hideWindow( window_id )', '\r\nReturns: nothing\r\n\r\nAPI: >= 19.03\r\n', 
		'api_gui2.cpp#L392'],
		['gui2.newWindow', 'gui2.newWindow( window_name, visible, layer_id, decoration, l,t,r,b, refcon )', '\r\nReturns: gui2_window_id\r\n\r\nAPI: >= 19.03\r\n', 
		'api_gui2.cpp#L82'],
		['gui2.setWindowCaption', 'gui2.setWindowCaption( window_id, "new caption" )', '\r\nReturns: nothing\r\n\r\n\r\n\r\nAPI: >= 19.03\r\n', 
		'api_gui2.cpp#L318'],
		['gui2.setWindowGravity', 'gui2.setWindowGravity( window_id, a,b,c,d )', '\r\nReturns: nothing\r\n\r\n\r\n\r\nAPI: >= 19.03\r\n', 
		'api_gui2.cpp#L237'],
		['gui2.setWindowPositioningMode', 'gui2.setWindowPositioningMode( window_id, window_mode )', '\r\nReturns: nothing\r\n\r\n\r\n\r\nAPI: >= 19.03\r\n', 
		'api_gui2.cpp#L186'],
		['gui2.setWindowResizingLimits', 'gui2.setWindowResizingLimits( window_id, a,b,c,d )', '\r\nReturns: nothing\r\n\r\n\r\n\r\nAPI: >= 19.03\r\n', 
		'api_gui2.cpp#L274'],
		['gui2.setWindowSize', 'gui2.setWindowSize( window_id, l,t,r,b )', '\r\nReturns: nothing\r\n\r\nAPI: >= 19.03\r\n', 
		'api_gui2.cpp#L506'],
		['gui2.showWindow', 'gui2.showWindow( window_id )', '\r\nReturns: nothing\r\n\r\nAPI: >= 19.03\r\n', 
		'api_gui2.cpp#L359']
		],
	'gxt' : [
		['gxt.autoload', 'gxt.autoload()', '\nReturns: nothing\n\nInternal function.\n\nLoads all extensions that are setup for auto loading.\n\nAPI: >= 14.04\n', 
		'gxt_api.lua#L537'],
		['gxt.getListIdByName', 'gxt.getListIdByName( extensionName )', '\nReturns: gxt.list index\n\nUsed to query the GXT data.\n\nAPI: >= 14.04\n', 
		'gxt_api.lua#L182'],
		['gxt.getLoaded', 'gxt.getLoaded( extensionName )', '\nReturns: boolean\n\nTrue if GXT has already been loaded.\n\nAPI: >= 14.04\n', 
		'gxt_api.lua#L212'],
		['gxt.load', 'gxt.load( extension_name )', '\nReturns: nothing.\n\nAttempts to load the named Gizmo64 Firmware Extension.\n\nThe GXT API module will look for the folder:\nX-Plane/Resources/plugins/Gizmo64.plugin/firmware/extensions/extension_name\nand attempt to load any valid extension content that it finds.\n\n<code>gxt.load("Notepad")</code>\n\nAPI: >= 14.04\n', 
		'gxt_api.lua#L316'],
		['gxt.refresh', 'gxt.refresh()', '\nReturns: nothing\n\nRebuilds the list of gxt modules found in Gizmo64.plugin/firmware/extensions/\n\n<code>\ngxt.refresh()\n</code>\n\nAPI: >= 14.04\n', 
		'gxt_api.lua#L36'],
		['gxt.sendMessage', 'gxt.sendMessage( extensionName, message, param )', '\nReturns: nothing\n\nAllows for mediation between modules.\n\nWill allow you to send a message to an extension that hasn\'t been loaded yet.\n\nWill autoload an extension if required.\n\n<code>\ngxt.sendMessage( "TextureExplorer", "Load", "foo.png" )\n</code>\n\nAPI: >= 14.04\n', 
		'gxt_api.lua#L470'],
		['gxt.setLoaded', 'gxt.setLoaded( extensionName, bool_loaded )', '\nReturns: nothing\n\nInternal function, sets loaded state for a GXT by name.\n\nAPI: >= 14.04\n', 
		'gxt_api.lua#L236'],
		['gxt.show', 'gxt.show( extensionName )', '\nReturns: nothing\n\nUsed to show a GXT GUI.\n\nCalls GXT _OnShow() function.\n\nWill automatically load a GXT using gxt.load(...) if required.\n\n<code>\ngxt.show( "Notepad" )\n</code>\n\nAPI: >= 14.04\n', 
		'gxt_api.lua#L256'],
		['gxt.unload', 'gxt.unload( extension_name )', '\nReturns: nothing.\n\nAttempts to unload the named Gizmo64 Firmware Extension.\n\nThe GXT API will call function: extension_name_OnBeforeUnload() to give the target an opportunity to unload cleanly.\n\n<code>gxt.unload("Notepad")</code>\n\nAPI: >= 14.04\n', 
		'gxt_api.lua#L389']
		],
	'hash' : [
		['hash.md5File', 'hash.md5File( filename )', '\r\nReturns: string containing md5 hash of file.\r\n\r\nAPI: >= 12.01\r\n', 
		'api_hash.cpp#L32'],
		['hash.md5String', 'hash.md5String( input_string_blob )', '\r\nReturns: string containing md5 hash of input string blob.\r\n\r\nAPI: >= 12.01\r\n', 
		'api_hash.cpp#L79']
		],
	'http' : [
		['http.get', 'http.get( url, callback_function_name )', '\r\n<code>\r\nfunction cb_http_get_complete( data, url, size )\r\n\tsound.say(\'dl complete: \' .. url)\r\nend\r\n\r\nlocal url = \'http://example.com/foo.htm\'\r\nsound.say( \'fetch: \' .. url )\r\nhttp.get( url, \'cb_http_get_complete\' )\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_http.cpp#L32'],
		['http.post', 'http.post( url, callback_function_name, post_payload )', '\r\n<code>\r\nlocal payload = string.format( "status=%s", http.urlEncode("this is a status update") )\r\n</code>\r\n\r\nSee http.get docs also.\r\n\r\nSee HTTP POST format details for more info. \r\nIt\'s like a query string but the content isn\'t auto encoded by a browser.\r\n\r\nAPI: >= 12.01\r\n', 
		'api_http.cpp#L81'],
		['http.resetProxy', 'http.resetProxy()', '\r\nReturns: nothing\r\n\r\nResets internal proxy variables. cURL library will default to using ENV variables if any or no proxy at all.\r\n\r\n<code>\r\n--Clear the proxy:\r\nhttp.resetProxy()\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_http.cpp#L199'],
		['http.setProxy', 'http.setProxy( proxy_url )', '\r\nReturns: nothing\r\n\r\nUse http.resetProxy() to reset to default.\r\n\r\n<code>\r\n--Set the proxy:\r\nhttp.setProxy( "http://user:pass@proxy.host.com:8001/" )\r\n</code>\r\n\r\n<code>\r\n--Clear the proxy:\r\nhttp.resetProxy()\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_http.cpp#L224'],
		['http.urlDecode', 'http.urlDecode( data, data_length )', '\r\nReturns: url-decoded string\r\n\r\n<code>\r\nlocal packet = "asdfg"\r\nlocal decoded = http.urlDecode( packet, #packet )\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_http.cpp#L169'],
		['http.urlEncode', 'http.urlEncode( data, data_length )', '\r\nReturns: url-encoded string\r\n\r\n<code>\r\nlocal url = "http://host.com/foo"\r\nlocal s = "raw string data to send."\r\nlocal e = http.urlEncode( s, #s )\r\n\r\nhttp.post(url, cb_function, "data=" .. e)\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_http.cpp#L136']
		],
	'icons' : [
		['icons.get', 'icons.get( icon_name, OPT_no_cache )', '\nReturns: texture_id\n\nLoad an icon from Gizmo64.plugin/firmware/icons/\n\nActs as a common gateway to shared icon resources, provides caching so that we load a minimal set of texture copies.\n\nSet no_cache to True if you require a unique copy of the icon texture.\n\n<code>\nlocal icon_save = icons.get("save.png")\n</code>\n\nAPI: >= 14.04\n', 
		'icons_api.lua#L18']
		],
	'imgui' : [
		['imgui.AddFont', 'imgui.AddFont( ttf_filename, float_size )', ' Returns: imgui_font_id\r\n\r\n Return value can be used with imgui.PushFont( imgui_font_id )\r\n\r\n', 
		'api_imgui.cpp#L98'],
		['imgui.AlignTextFrameToPadding', 'imgui.AlignTextFrameToPadding( )', ' Returns: nothing\r\n\r\n', 
		'api_imgui.cpp#L126'],
		['imgui.ArrowButton', 'imgui.ArrowButton( "label", direction )', ' Returns: nothing\r\n\r\n Valid direction values can be found here:\r\n https://github.com/ocornut/imgui/blob/3c15dffc944419eb4bb17984548468270ca90486/imgui.h#L899\r\n\r\n', 
		'api_imgui.cpp#L137'],
		['imgui.BeginCombo', 'imgui.BeginCombo( label, preview, options )', ' Returns: boolean success\r\n\r\n', 
		'api_imgui.cpp#L181'],
		['imgui.BeginMenu', 'imgui.BeginMenu( "menu label" )', ' Returns: boolean success\r\n\r\n', 
		'api_imgui.cpp#L268'],
		['imgui.BeginMenuBar', 'imgui.BeginMenuBar()', ' Returns: bool success\r\n', 
		'api_imgui.cpp#L251'],
		['imgui.BeginToolTip', 'imgui.BeginToolTip()', ' Returns: nothing\r\n', 
		'api_imgui.cpp#L288'],
		['imgui.BulletText', 'imgui.BulletText( "label" )', ' Returns: nothing\r\n', 
		'api_imgui.cpp#L338'],
		['imgui.Button', 'imgui.Button( "label" )', ' Returns: bool_clicked\r\n', 
		'api_imgui.cpp#L310'],
		['imgui.Checkbox', 'imgui.Checkbox( label, checkvalue )', '\r\n Returns: boolean state flag.\r\n\r\n', 
		'api_imgui.cpp#L365'],
		['imgui.CollapsingHeader', 'imgui.CollapsingHeader( "id_string" )', ' Returns: bool\r\n', 
		'api_imgui.cpp#L396'],
		['imgui.ColorEdit3', 'imgui.ColorEdit3( label, tbl_color_rgb,   hdr, dnd, alpha_half_preview, alpha_preview, options_menu )', ' Returns: r,g,b\r\n\r\n', 
		'api_imgui.cpp#L427'],
		['imgui.Combo', 'imgui.Combo( label, options, selected )', '\r\n Returns: Selected item number.\r\n\r\n', 
		'api_imgui.cpp#L574'],
		['imgui.DragFloat', 'imgui.DragFloat( label, user_value, default_value, min, max )', '\r\n Returns: float\r\n\r\n', 
		'api_imgui.cpp#L607'],
		['imgui.DragInt', 'imgui.DragInt( "label", user_value, speed )', ' Returns: user_value\r\n', 
		'api_imgui.cpp#L644'],
		['imgui.Dummy', 'imgui.Dummy( width, height )', ' Returns: nothing\r\n', 
		'api_imgui.cpp#L675'],
		['imgui.EndCombo', 'imgui.EndCombo()', ' Returns: nothing\r\n', 
		'api_imgui.cpp#L695'],
		['imgui.EndMenu', 'imgui.EndMenu()', ' Returns: nothing\r\n', 
		'api_imgui.cpp#L715'],
		['imgui.EndMenuBar', 'imgui.EndMenuBar()', ' Returns: nothing\r\n', 
		'api_imgui.cpp#L705'],
		['imgui.EndToolTip', 'imgui.EndToolTip()', ' Returns: nothing\r\n', 
		'api_imgui.cpp#L726'],
		['imgui.GetWindowSize', 'imgui.GetWindowSize( window_id )', ' returns: l,t,w,h\r\n\r\n', 
		'api_imgui.cpp#L736'],
		['imgui.Image', 'imgui.Image( texture_id, width, height, [ {u,v,w,x}, tint:{r,g,b,a}, border:{r,g,b,a} ] )', ' Returns: nothing\r\n', 
		'api_imgui.cpp#L774'],
		['imgui.InputFloat', 'imgui.InputFloat("label", value, default_value)', ' Returns: value\r\n', 
		'api_imgui.cpp#L877'],
		['imgui.InputText', 'imgui.InputText("label", "value")', ' Returns: value\r\n', 
		'api_imgui.cpp#L909'],
		['imgui.IsItemClicked', 'imgui.IsItemClicked()', 'Returns: bool_clicked\r\n', 
		'api_imgui.cpp#L941'],
		['imgui.IsItemHovered', 'imgui.IsItemHovered( )', 'Returns: bool_hovered\r\n', 
		'api_imgui.cpp#L970'],
		['imgui.IsMouseDoubleClicked', 'imgui.IsMouseDoubleClicked( int_button )', 'Returns: bool_clicked\r\n', 
		'api_imgui.cpp#L1008'],
		['imgui.ListBox', 'imgui.ListBox( label, selected_item, items, listbox_size )', ' Returns: selected_index\r\n\r\n', 
		'api_imgui.cpp#L1046'],
		['imgui.MenuItem', 'imgui.MenuItem( "menu label", shortcut, selected, enabled )', ' Returns: boolean clicked\r\n\r\n', 
		'api_imgui.cpp#L1110'],
		['imgui.NewLine', 'imgui.NewLine()', 'Returns: nothing\r\n', 
		'api_imgui.cpp#L1147'],
		['imgui.NewWindow', 'imgui.NewWindow( "Window Title", left, top, width, height, callback_f, refcon )', 'Returns: imgui Window ID.\r\n\r\ncallback_f is NOT passed a string value, pass a function directly.\r\n\r\nrefcon value can be any valid Lua variable, recommend using a table to store various state values as member vars.\r\n\r\n<code>\r\nfunction window_cb( refcon )\r\n -- call your imgui functions here.\r\nend\r\n\r\nimgui_window_id = imgui.NewWindow( "Test Window", 50, 800, 640, 480, window_cb, { a=1, b=2, c=3 } )\r\n</code>\r\n\r\n API: > 19.04\r\n', 
		'api_imgui.cpp#L1162'],
		['imgui.PlotLines', 'imgui.PlotLines( label, values_table )', ' Returns: nothing\r\n\r\n\r\n', 
		'api_imgui.cpp#L1309'],
		['imgui.PopButtonRepeat', 'imgui.PopButtonRepeat()', 'Returns: nothing\r\n', 
		'api_imgui.cpp#L1360'],
		['imgui.PopFont', 'imgui.PopFont()', 'Returns: nothing\r\n\r\n', 
		'api_imgui.cpp#L1411'],
		['imgui.PopItemWidth', 'imgui.PopItemWidth()', 'Returns: nothing\r\n\r\n', 
		'api_imgui.cpp#L1498'],
		['imgui.PopStyleColor', 'imgui.PopStyleColor( pop_count )', '', 
		'api_imgui.cpp#L1590'],
		['imgui.ProgressBar', 'imgui.ProgressBar( progress_val, width, height, label )', 'Returns: nothing\r\n\r\n', 
		'api_imgui.cpp#L1425'],
		['imgui.PushButtonRepeat', 'imgui.PushButtonRepeat( bool_repeat )', 'Returns: nothing\r\n', 
		'api_imgui.cpp#L1453'],
		['imgui.PushFont', 'imgui.PushFont( imgui_font_id )', '\r\n Load fonts with imgui.AddFont(...)\r\n\r\nReturns: nothing\r\n\r\n', 
		'api_imgui.cpp#L1384'],
		['imgui.PushItemWidth', 'imgui.PushItemWidth( item_width_float )', 'Returns: nothing\r\n\r\n', 
		'api_imgui.cpp#L1479'],
		['imgui.PushStyleColor', 'imgui.PushStyleColor( val_target, r,g,b )', '\r\nreturns: Nothing\r\n\r\n val_target is one of the following:\r\n https://github.com/ocornut/imgui/blob/3c15dffc944419eb4bb17984548468270ca90486/imgui.h#L995\r\n\r\n Value list contains no numbers but is a 0 based list of items.\r\n ImGuiCol_Text = 0\r\n ImGuiCol_TextDisabled = 1\r\n ...\r\n ImGuiCol_Border = 5\r\n etc\r\n\r\n\r\n', 
		'api_imgui.cpp#L1525'],
		['imgui.SameLine', 'imgui.SameLine()', ' Returns: nothing\r\n\r\n Tells ImGui not to auto move to the next line when the next widget is created.\r\n Coming with PushItemWidth and PopItemWidth\r\n\r\n', 
		'api_imgui.cpp#L1603'],
		['imgui.Selectable', 'imgui.Selectable( label, bool_selected )', ' Returns: bool_selected\r\n\r\n', 
		'api_imgui.cpp#L1621'],
		['imgui.Separator', 'imgui.Separator( )', ' returns: nothing\r\n\r\n', 
		'api_imgui.cpp#L1675'],
		['imgui.SetItemDefaultFocus', 'imgui.SetItemDefaultFocus( )', ' returns: nothing\r\n\r\n', 
		'api_imgui.cpp#L1689'],
		['imgui.SetWindowHasMenu', 'imgui.SetWindowHasMenu( id, bool_has_menu )', ' Returns: nothing\r\n', 
		'api_imgui.cpp#L1244'],
		['imgui.SetWindowTitle', 'imgui.SetWindowTitle( id, window_title )', ' Returns: nothing\r\n', 
		'api_imgui.cpp#L1287'],
		['imgui.SetWindowVisible', 'imgui.SetWindowVisible( id, bool_visible )', ' Returns: nothing\r\n', 
		'api_imgui.cpp#L1266'],
		['imgui.SliderAngle', 'imgui.SliderAngle( label, user_value, min, max, format )', 'Returns: user_value\r\n', 
		'api_imgui.cpp#L1703'],
		['imgui.SliderFloat', 'imgui.SliderFloat( text_label, user_val, min_val, max_val )', ' returns: user_val\r\n\r\n', 
		'api_imgui.cpp#L1763'],
		['imgui.SliderInt', 'imgui.SliderInt( text_label, user_val, min_val, max_val )', ' returns: user_val\r\n\r\n', 
		'api_imgui.cpp#L1731'],
		['imgui.Spacing', 'imgui.Spacing()', ' returns: Nothing\r\n\r\n Untested. No idea what this does.\r\n\r\n', 
		'api_imgui.cpp#L1795'],
		['imgui.Text', 'imgui.Text( text_val )', ' returns: Nothing\r\n\r\n', 
		'api_imgui.cpp#L1812'],
		['imgui.TextWrapped', 'imgui.TextWrapped( text_val )', ' returns: Nothing\r\n\r\n', 
		'api_imgui.cpp#L1839'],
		['imgui.TreeNode', 'imgui.TreeNode()', ' returns: Nothing\r\n\r\n', 
		'api_imgui.cpp#L1890'],
		['imgui.TreePop', 'imgui.TreePop()', ' returns: Nothing\r\n\r\n', 
		'api_imgui.cpp#L1913'],
		['imgui.TreePush', 'imgui.TreePush( input_string )', ' returns: Nothing\r\n\r\n I think the input_string is to ensure that the tree items have a unique imgui ID value.\r\n Not sure. See ImGui code for clarity. :(\r\n\r\n', 
		'api_imgui.cpp#L1865'],
		['imgui.VSliderFloat', 'imgui.VSliderFloat( label, user_val, width, height, min, max, format, power )', ' Returns: user_val\r\n', 
		'api_imgui.cpp#L1930']
		],
	'io' : [
		['io.read_me', 'io.read_me()', '\nGizmo exposes a sandboxed set of Lua Stadnard "io" library functions.\nSee the Lua programming references available via Google for more information.\n\nIO Operations are "Sandboxed" inside the X-Plane folder.\nYou may access any file _inside_ the X-Plane folder.\n\nThe sandbox applies to the following functions:\nio.open, os.remove, os.rename\n\nAll other functions behave as documented in Lua manuals.\n\nhttp://www.lua.org/manual/5.2/manual.html#6.8\n\n', 
		'api_third_party_docs.cpp#L86']
		],
	'logging' : [
		['logging.clear', 'logging.clear()', '\r\nReturns: nothing\r\n\r\nClear the log records.\r\n\r\nAPI: >= 12.01\r\n', 
		'api_logging.cpp#L31'],
		['logging.debug', 'logging.debug( message )', '\r\nReturns: nothing\r\n\r\nThis function writes a message to the X-Plane Log.txt file.\r\n\r\nAPI: >= 12.2.1\r\n', 
		'api_logging.cpp#L48'],
		['logging.error', 'logging.error( message )', '\r\nReturns: nothing\r\n\r\nThis function writes a message to the X-Plane Log.txt file.\r\n\r\nAPI: >= 12.2.1\r\n', 
		'api_logging.cpp#L74'],
		['logging.getErrorMessageIDs', 'logging.getErrorMessageIDs()', '\r\nReturns: all error message ID numbers.\r\n\r\nAPI: >= 14.12\r\n', 
		'api_logging.cpp#L219'],
		['logging.getMessageCount', 'logging.getMessageCount()', '\r\nReturns: Number of messages in log buffer.\r\n\r\nAPI: >= 14.09.12\r\n', 
		'api_logging.cpp#L195'],
		['logging.getMessages', 'logging.getMessages( OPT_offset, OPT_count )', '\r\nReturns: all logged messages.\r\n\r\nIf offset is specified count is required.\r\n\r\nAPI: >= 12.2.1\r\n \r\nRange supported API: >= 14.09.12\r\n', 
		'api_logging.cpp#L127'],
		['logging.warning', 'logging.warning( message )', '\r\nReturns: nothing\r\n\r\nThis function writes a message to the X-Plane Log.txt file.\r\n\r\nAPI: >= 12.2.1\r\n', 
		'api_logging.cpp#L101']
		],
	'map' : [
		['map.bakeHeightMap', 'map.bakeHeightMap( terrainmesh_id, texture_id, OPT_minAlt, OPT_maxAlt )', '\r\nReturns: nothing\r\n\r\nBakes a GL normal map from terrain normals data.\r\n\r\nInternal math uses the following constants:\r\nLowest point on earth: -1400 ft\r\nHeight point on earth: 30000 ft\r\n\r\nThese values are derived from the Dead Sea and Mt Everest. ( Originally: -1371, 29035 )\r\nSlight margin has been added to account for minor DSF probe errors that may occur.\r\n\r\nColor table step size is 122.65625 ft or 37.385625 meters.\r\n\r\n\r\nAPI: >= 14.05\r\n', 
		'api_map.cpp#L451'],
		['map.bakeHeightMap_32bit', 'map.bakeHeightMap_32bit( terrainmesh_id, texture_id )', '\r\nReturns: nothing\r\n\r\nBakes a GL normal map from terrain normals data.\r\n\r\n\r\nLowest point on earth: -1400 ft\r\nHeight point on earth: 30500 ft\r\n\r\nThese values are derived from the Dead Sea and Mt Everest. ( Originally: -1371, 29035 )\r\nSlight margin has been added to account for minor DSF probe errors that may occur.\r\n\r\nColor table step size is 124.6 ft or 37.98 meters.\r\n\r\n\r\nAPI: >= 14.05\r\n', 
		'api_map.cpp#L636'],
		['map.bakeNormalMap', 'map.bakeNormalMap( terrainmesh_id, texture_id )', '\r\nReturns: nothing\r\n\r\nBakes a GL normal map from terrain normals data.\r\n\r\n\r\n//Normal Map Color coding for flat: 127,127,255\r\n//Axis mapping is: RGBA -> nx,nz,ny,wet\r\n\r\n\r\nAPI: >= 14.05\r\n', 
		'api_map.cpp#L315'],
		['map.delQueryPoints', 'map.delQueryPoints( qpid )', '\r\nReturns: nothing\r\n\r\nAPI: >= 14.08.20\r\n', 
		'api_map.cpp#L181'],
		['map.getTerrainProfile', 'map.getTerrainProfile( start_position_gl, end_position_gl, resolution )', '\nReturns: table: { data={ heights... }, minAlt=123, maxAlt=9999 }\n\n<code>\n\tlocal samples = map.getTerrainProfile = function( start_position_gl, end_position_gl, resolution )\n</code>\n\nAPI: >= 14.05\n', 
		'map_api.lua#L13'],
		['map.getTriMeshOrigin', 'map.getTriMeshOrigin( trimesh_id )', '\r\nAPI: >= 14.05\r\n', 
		'api_map.cpp#L50'],
		['map.newQueryPoints', 'map.newQueryPoints( x,y,z, range, resolution )', '\r\nReturns: querypoints_id\r\n\r\nUse this function to generate a set of targets to use for probing the terrain with map.newTerrainMesh(...)\r\n\r\n\r\nAPI: >= 14.05\r\n', 
		'api_map.cpp#L117'],
		['map.newTerrainMesh', 'map.newTerrainMesh( map_query_points_id )', '\r\nReturns: map_terrain_mesh_id\r\n\r\nSee map.newQueryPoints(...) for how to generate a valid map_query_points_id value.\r\n\r\nBuilds an array of vertex locations by probing sim terrain. TerrainMesh = { {x,y,z, nx,ny,nz, ax,ay,az, wet}, ... }\r\n\r\nx,y,z = OpenGL location of probe result.\r\nnx,ny,nz = OpenGL Normal of probe result.\r\nax,ay,az = Acceleration values for probe result. (Pitching carrier deck?)\r\nwet = Probe result is wet.\r\n\r\n\r\nAPI: >= 14.05\r\n', 
		'api_map.cpp#L214'],
		['map.newTriMesh', 'map.newTriMesh( terrain_mesh_id )', '\r\nReturns: tri_mesh_id\r\n\r\nBuild a trimesh object that can be used to pass geometry around to various APIs.\r\n\r\ntri_mesh_id can be used with gfx.drawTriMesh and trimesh.buildVBO\r\n\r\n<code>\r\n</code>\r\n\r\n\r\nAPI: >= 14.05\r\n', 
		'api_map.cpp#L257']
		],
	'math' : [
		['math.abs', 'math.abs(x)', '\nReturns: the absolute value of x.\n', 
		'api_third_party_docs.cpp#L114'],
		['math.acos', 'math.acos(x)', '\nReturns: the arc cosine of x (in radians).\n', 
		'api_third_party_docs.cpp#L120'],
		['math.asin', 'math.asin(x)', '\nReturns the arc sine of x (in radians).\n', 
		'api_third_party_docs.cpp#L126'],
		['math.atan', 'math.atan(x)', '\nReturns the arc tangent of x (in radians).\n', 
		'api_third_party_docs.cpp#L132'],
		['math.atan2', 'math.atan2(y, x)', '\nReturns the arc tangent of y/x (in radians), but uses the signs of both parameters to find the quadrant of the result. (It also handles correctly the case of x being zero.)\n', 
		'api_third_party_docs.cpp#L138'],
		['math.ceil', 'math.ceil(x)', '\nReturns the smallest integer larger than or equal to x.\n', 
		'api_third_party_docs.cpp#L144'],
		['math.cos', 'math.cos(x)', '\nReturns the cosine of x (assumed to be in radians).\n', 
		'api_third_party_docs.cpp#L150'],
		['math.cosh', 'math.cosh(x)', '\nReturns the hyperbolic cosine of x.\n', 
		'api_third_party_docs.cpp#L156'],
		['math.deg', 'math.deg(x)', '\nReturns the angle x (given in radians) in degrees.\n', 
		'api_third_party_docs.cpp#L162'],
		['math.exp', 'math.exp(x)', '\nReturns the value ex.\n', 
		'api_third_party_docs.cpp#L168'],
		['math.floor', 'math.floor(x)', '\nReturns the largest integer smaller than or equal to x.\n', 
		'api_third_party_docs.cpp#L174'],
		['math.fmod', 'math.fmod(x, y)', '\nReturns the remainder of the division of x by y that rounds the quotient towards zero.\n', 
		'api_third_party_docs.cpp#L180'],
		['math.frexp', 'math.frexp(x)', '\nReturns m and e such that x = m2e, e is an integer and the absolute value of m is in the range [0.5, 1) (or zero when x is zero).\n', 
		'api_third_party_docs.cpp#L186'],
		['math.huge', 'math.huge', '\nThe value HUGE_VAL, a value larger than or equal to any other numerical value.\n', 
		'api_third_party_docs.cpp#L192'],
		['math.ldexp', 'math.ldexp(m, e)', '\nReturns m2e (e should be an integer).\n', 
		'api_third_party_docs.cpp#L198'],
		['math.log', 'math.log(x)', '\nReturns the natural logarithm of x.\n', 
		'api_third_party_docs.cpp#L204'],
		['math.log10', 'math.log10(x)', '\nReturns the base-10 logarithm of x.\n', 
		'api_third_party_docs.cpp#L210'],
		['math.max', 'math.max(x, ...)', '\nReturns the maximum value among its arguments.\n', 
		'api_third_party_docs.cpp#L216'],
		['math.min', 'math.min(x, ...)', '\nReturns the minimum value among its arguments.\n', 
		'api_third_party_docs.cpp#L222'],
		['math.modf', 'math.modf(x)', '\nReturns two numbers, the integral part of x and the fractional part of x.\n', 
		'api_third_party_docs.cpp#L228'],
		['math.pi', 'math.pi', '\nThe value of pi.\n', 
		'api_third_party_docs.cpp#L234'],
		['math.pow', 'math.pow(x, y)', '\nReturns xy. (You can also use the expression x^y to compute this value.)\n', 
		'api_third_party_docs.cpp#L240'],
		['math.rad', 'math.rad(x)', '\nReturns the angle x (given in degrees) in radians.\n', 
		'api_third_party_docs.cpp#L246'],
		['math.random', 'math.random(OPT_m, OPT_n)', '\nReturns: random float\n\nThis function is an interface to the simple pseudo-random generator function rand provided by ANSI C. \n(No guarantees can be given for its statistical properties.)\n\nWhen called without arguments, returns a uniform pseudo-random real number in the range [0,1). \nWhen called with an integer number m, math.random returns a uniform pseudo-random integer in the range [1, m]. \nWhen called with two integer numbers m and n, math.random returns a uniform pseudo-random integer in the range [m, n].\n\nAPI: >= 12.01\n', 
		'api_third_party_docs.cpp#L252'],
		['math.randomseed', 'math.randomseed(x)', '\nSets x as the "seed" for the pseudo-random generator: equal seeds produce equal sequences of numbers.\n', 
		'api_third_party_docs.cpp#L267'],
		['math.sin', 'math.sin(x)', '\nReturns the sine of x (assumed to be in radians).\n', 
		'api_third_party_docs.cpp#L273'],
		['math.sinh', 'math.sinh(x)', '\nReturns the hyperbolic sine of x.\n', 
		'api_third_party_docs.cpp#L279'],
		['math.sqrt', 'math.sqrt(x)', '\nReturns the square root of x. (You can also use the expression x^0.5 to compute this value.)\n', 
		'api_third_party_docs.cpp#L285'],
		['math.tan', 'math.tan(x)', '\nReturns the tangent of x (assumed to be in radians).\n', 
		'api_third_party_docs.cpp#L291'],
		['math.tanh', 'math.tanh(x)', '\nReturns the hyperbolic tangent of x.\n', 
		'api_third_party_docs.cpp#L297']
		],
	'matrix' : [
		['matrix.angleToVector', 'matrix.angleToVector( angle )', '\nReturns: table[3]\n\nConverts an angle into a vector.\n\n<code>\nlocal vec = matrix.angleToVector( 45 )\n</code>\n\nAPI: >= 14.04\n', 
		'matrix_api.lua#L13'],
		['matrix.transform3D', 'matrix.transform3D( x,y,z,  tx,ty,tz,  tp,tr,th )', ' Returns: transformed_x, transformed_y, transformed_z\r\n \r\n This function can be used to apply a 3D transformation to a position vector.\r\n\r\n Submitted by x-alberto?\r\n \r\n\r\n API: >= 11.4\r\n \r\n', 
		'api_matrix.cpp#L28']
		],
	'memcache' : [
		['memcache.get', 'memcache.get( key_name )', '\r\nReturns: String containing value stored in key, or nil.\r\n\r\nAPI: >= 10.11.22\r\n', 
		'api_memcache.cpp#L44'],
		['memcache.set', 'memcache.set( key_name, string_blob )', '\r\nReturns: nothing\r\n\r\nOverwrites the value at "key name" with string_blob.\r\n\r\nAPI: >= 10.11.22\r\n', 
		'api_memcache.cpp#L78']
		],
	'menu' : [
		['menu.newItem', 'menu.newItem( menu_label, menu_event_name )', '\r\nReturns: true or nothing\r\n\r\nMenu will be created at: Plugins > Gizmo > Scripts > "Menu Label"\r\nWhen clicked Gizmo will call the function: MenuEventName_OnClick()\r\n\r\n<code>\r\nmenu.newItem("My Menu Item", "MyMenuEvent")\r\n\r\nfunction MyMenuEvent_OnClick()\r\n\t--menu was clicked\r\nend\r\n</code>\r\n\r\nAPI: >= 10.11.22\r\n', 
		'api_menu.cpp#L30']
		],
	'mouse' : [
		['mouse.getCursor', 'mouse.getCursor( )', '\r\nReturns: string; cursor_drawing_function_name\r\n<code>\r\n--set cursor to custom GL function\r\nmouse.setCursor( "drawCustomCursor" )\r\n\r\nlocal cursor_name = mouse.getCursor()\r\n -- cusor_name is now "drawCustomCursor"\r\n </code>\r\n\r\nAPI: >= 17.12\r\n', 
		'api_mouse.cpp#L34'],
		['mouse.getXY', 'mouse.getXY()', ' Returns: Mouse X,Y location on the screen. \r\n\t\r\n Eg: \r\n\tm.x,m.y = mouse.getXY()\r\n \r\n', 
		'api_mouse.cpp#L106'],
		['mouse.getXYZ', 'mouse.getXYZ()', ' Returns: x,y,z in OpenGL space.\r\n \r\n The results you get from this will depend on the callback mode X-Plane is in when you call it.\r\n \r\n OnDraw_Windows and OnDraw_Airplanes will return different values because the OpenGL depth buffer contents is different.\r\n\r\n * * * EXPERIMENTAL * * *\r\n \r\n API: >= 13.10.08.2340\r\n\r\n', 
		'api_mouse.cpp#L132'],
		['mouse.setCursor', 'mouse.setCursor( cursor_drawing_function_name )', '\r\nReturns: nothing\r\n<code>\r\n--set cursor to custom GL function\r\nmouse.setCursor( "drawCustomCursor" )\r\n\r\nfunction drawCustomCursor()\r\n\t--mouse.x and mouse.y are automatically updated by Gizmo64.plugin\r\n\tgfx.drawString("mouse cursor", mouse.x, mouse.y)\r\nend\r\n</code>\r\n\r\n<code>\r\n--reset the mouse cursor to default\r\nmouse.setCursor("")\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_mouse.cpp#L58']
		],
	'nav' : [
		['nav.findNavAid', 'nav.findNavAid( name, id, lat, lon, frequency )', '\r\nReturns: navaid_id\r\n\r\nCombine with nav.setSearchGroups(...)\r\nThis function can be used to search the nav database.\r\n\r\nBy setting "name" or "id" to "*" you can create a wild-card search.\r\nBy setting "name" or "id" to nil you can create a wild-card search.\r\n\r\nAPI: >= 12.01\r\n', 
		'api_nav.cpp#L69'],
		['nav.getFirstNavAid', 'nav.getFirstNavAid()', ' Returns: First navaid_id in the database.\r\n', 
		'api_nav.cpp#L317'],
		['nav.getFirstNavAidOfType', 'nav.getFirstNavAidOfType( navaid_type )', ' Returns: First navaid_id available that matches the specified type.\r\n', 
		'api_nav.cpp#L327'],
		['nav.getLastNavAidOfType', 'nav.getLastNavAidOfType( navaid_type )', ' Returns: Last navaid_id available that matches the specified type.\r\n', 
		'api_nav.cpp#L342'],
		['nav.getNavAidInfo', 'nav.getNavAidInfo( navaid_id )', ' Returns: navaid_type, lat, lon, alt, "ICAO_ID", "Name", reg, freq, heading\r\n \r\n Here is some little known info about "getNavAidInfo"...\r\n Returning frequency for a type of xplm_Nav_Airport is not supported.\r\n It is also not supported for a type of xplm_Nav_Fix.\r\n \r\n Using all other types will return the frequency.\r\n This is because this info is in the nav database and not the apt or fix databases\r\n \r\n API: >= 11.9 Changes the order of the returned parameters.\r\n Old: navaid_type, lat, lon, alt, freq, heading, "ICAO_ID", "Name", reg\r\n New: navaid_type, lat, lon, alt, "ICAO_ID", "Name", reg, freq, heading\r\n', 
		'api_nav.cpp#L358'],
		['nav.getNextNavAid', 'nav.getNextNavAid( nav_ref )', ' Returns: Next navaid_id available that matches the specified type.\r\n', 
		'api_nav.cpp#L440'],
		['nav.getTypeName', 'nav.getTypeName( navaid_type )', 'Returns: String representation of nav-aid type, see predefined var list at start of this API chapter for basic info.\r\n\r\n<code>\r\nlocal x = nav.airport\r\nlocal name = nav.getTypeName( x )\r\nprint(name)\r\n-- name is now == "airport"\r\n</code>\r\n\r\n\r\nnavaid_types:\r\nThe following variables are automatically defined by Gizmo.\r\n\r\nnav.unknown\r\nnav.airport\r\nnav.ndb\r\nnav.vor\r\nnav.ils\r\nnav.localizer\r\nnav.glideslope\r\nnav.outermarker\r\nnav.middlemarker\r\nnav.innermarker\r\nnav.fix\r\nnav.dme\r\nnav.latlon\r\n\r\nAPI: >= 11.1(?)\r\n\r\n\r\nnav.not_found -- added as mapping for XPLM_NAV_NOT_FOUND from C SDK.\r\nSee: http://www.xsquawkbox.net/xpsdk/mediawiki/XPLMNavRef\r\n\r\nAPI: >= 11.9.8\r\n', 
		'api_nav.cpp#L204'],
		['nav.setSearchGroups', 'nav.setSearchGroups( airports, ndbs, vors, ils, localizers, glideslopes, outermarkers, middle_markers, innermarkers, fixes, dmes, latlons )', ' \r\n Pass a 0 or 1 in for each option value.\r\n Combine this with nav.findNavAid()\r\n \r\n nav.setSearchGroups( 1,1,1,1, 0,0,0,0, 1,1,1,1 )\r\n', 
		'api_nav.cpp#L456'],
		['nav.types', 'nav.types', '\r\nThe following variables are automatically defined by Gizmo.\r\n\r\n<code>\r\nnav.unknown\r\nnav.airport\r\nnav.ndb\r\nnav.vor\r\nnav.ils\r\nnav.localizer\r\nnav.glideslope\r\nnav.outermarker\r\nnav.middlemarker\r\nnav.innermarker\r\nnav.fix\r\nnav.dme\r\nnav.latlon\r\n\r\nnav.not_found\r\n</code>\r\n\r\n\r\nnav.not_found -- added as mapping for XPLM_NAV_NOT_FOUND from C SDK.\r\nSee: http://www.xsquawkbox.net/xpsdk/mediawiki/XPLMNavRef\r\n\r\nAPI: >= 11.9.8\r\n', 
		'api_nav.cpp#L38']
		],
	'os' : [
		['os.read_me', 'os.read_me()', '\nThe following functions are disabled in Gizmo64:\nos.execute, os.tmpname, os.exit, io.popen\n \nThis is to prevent malicious scripts from causing annoyance on the users computer.\n\nAll other os functions are available as documented in Lua manuals.\n\nhttp://www.lua.org/manual/5.2/manual.html#6.9\n\n', 
		'api_third_party_docs.cpp#L313']
		],
	'package' : [
		['package.read_me', 'package.read_me()', '\nGizmo64 provides the full Lua package.api\n \nhttp://www.lua.org/manual/5.2/manual.html#6.3\n \n', 
		'api_third_party_docs.cpp#L335']
		],
	'particles' : [
		['particles.newParticles', 'particles.newParticles()', ' Returns: particles_id - handle for particle engine, useful in other particles.api functions.\r\n', 
		'api_particles.cpp#L78'],
		['particles.setBirthRate', 'particles.setBirthRate( particle_emitter_id, particles_per_second )', '', 
		'api_particles.cpp#L102'],
		['particles.setBounce', 'particles.setBounce( particle_emitter_id, int_flag )', ' TODO: Not sure exactly what, if any, effect particles.setBounce() has.\r\n', 
		'api_particles.cpp#L116'],
		['particles.setColor', 'particles.setColor( particle_emitter_id, r,g,b, a )', ' Controls the color that the next, and all subsequent, particles will be - until this is called again.\r\n', 
		'api_particles.cpp#L143'],
		['particles.setCount', 'particles.setCount( particle_emitter_id, max_particle_count )', '', 
		'api_particles.cpp#L130'],
		['particles.setDisabled', 'particles.setDisabled( particle_emitter_id )', '', 
		'api_particles.cpp#L172'],
		['particles.setDrag', 'particles.setDrag( particle_emitter_id, particle_drag )', ' Alter the physics parameters.\r\n', 
		'api_particles.cpp#L157'],
		['particles.setEnabled', 'particles.setEnabled( particle_emitter_id )', '', 
		'api_particles.cpp#L184'],
		['particles.setEnergyMax', 'particles.setEnergyMax( particle_emitter_id, emax )', '', 
		'api_particles.cpp#L197'],
		['particles.setEnergyMin', 'particles.setEnergyMin( particle_emitter_id, energy_min_value )', ' Controls the minimum possible value for new particles energy values.\r\n Energy values are randomized to give the illusion of life.\r\n', 
		'api_particles.cpp#L210'],
		['particles.setGravity', 'particles.setGravity( particle_emitter_id, float_value )', ' Control the strength of gravity. -9.8 would be standard earth gravity.\r\n Force is applied in GL Y axis. TODO: Align particles gravity to planet.\r\n', 
		'api_particles.cpp#L225'],
		['particles.setHardDeck', 'particles.setHardDeck( particle_emitter_id, deck_altitude )', '', 
		'api_particles.cpp#L241'],
		['particles.setLife', 'particles.setLife( particle_emitter_id, life_span_in_seconds )', ' Controls how long each particle will live for.\r\n It is possible to "run out" of particles.\r\n You have a finite number and you MUST balance birth-rate:life:count variables.\r\n', 
		'api_particles.cpp#L255'],
		['particles.setOrigin', 'particles.setOrigin( particle_emitter_id, x,y,z )', '', 
		'api_particles.cpp#L272'],
		['particles.setOriginOffset', 'particles.setOriginOffset( particle_emitter_id, off_x,off_y,off_z )', '', 
		'api_particles.cpp#L308'],
		['particles.setScaleRate', 'particles.setScaleRate( particle_emitter_id, rate_value )', ' Create a new particle emitter that has a birth-size of 1.0\r\n Set the scale-rate to 2.0 using this function.\r\n When the particle engine runs, the particles will start with a size of 1.0 and when one-second has passed, they will have grown to a total size of 3.0\r\n', 
		'api_particles.cpp#L323'],
		['particles.setSize', 'particles.setSize( particle_emitter_id, size )', ' Control how big new particles are when they spawn.\r\n', 
		'api_particles.cpp#L340'],
		['particles.setStreamHeading', 'particles.setStreamHeading( particle_emitter_id, value )', '', 
		'api_particles.cpp#L423'],
		['particles.setStreamNoise', 'particles.setStreamNoise( particle_emitter_id, value )', '', 
		'api_particles.cpp#L436'],
		['particles.setStreamPitch', 'particles.setStreamPitch( particle_emitter_id, value )', '', 
		'api_particles.cpp#L410'],
		['particles.setStuckToAcf', 'particles.setStuckToAcf( particle_emitter_id, sticky )', '', 
		'api_particles.cpp#L358'],
		['particles.setTexture', 'particles.setTexture( particle_emitter_id, texture_id )', '', 
		'api_particles.cpp#L450'],
		['particles.setTextureSpriteCount', 'particles.setTextureSpriteCount( particle_emitter_id, nx,ny )', ' Set number of sprites in the texture, eg: 3x3 = 9. texture will be sub divided into grid regions.\r\n FIXME: gitbug:65 particles.setTextureSpriteCount() Doesnt actually effect the output result yet.\r\n', 
		'api_particles.cpp#L463'],
		['particles.setType_Cubic', 'particles.setType_Cubic( particle_emitter_id )', '', 
		'api_particles.cpp#L372'],
		['particles.setType_Spherical', 'particles.setType_Spherical( particle_emitter_id )', '', 
		'api_particles.cpp#L384'],
		['particles.setType_Stream', 'particles.setType_Stream( particle_emitter_id )', '', 
		'api_particles.cpp#L396'],
		['particles.start', 'particles.start( particle_emitter_id )', ' ........ redundant, we already have disable flag.\r\n', 
		'api_particles.cpp#L481']
		],
	'physics' : [
		['physics.applyForce', 'physics.applyForce( object_id, x,y,z )', ' \r\n Apply a force to the center of the object, force is specified as a vector.\r\n', 
		'api_physics.cpp#L107'],
		['physics.applyImpulse', 'physics.applyImpulse( object_id, x,y,z )', ' \r\n Apply an impulse to the center of the object, impulse is specified as a vector.\r\n', 
		'api_physics.cpp#L145'],
		['physics.applyOffsetImpulse', 'physics.applyOffsetImpulse( object_id, x,y,z )', ' \r\n FIXME: empty hook\r\n Apply a  to the center of the object,  is specified as a vector.\r\n', 
		'api_physics.cpp#L221'],
		['physics.applyTorque', 'physics.applyTorque( object_id, x,y,z )', ' \r\n Apply torque the center of the object, torque is specified as a vector.\r\n', 
		'api_physics.cpp#L245'],
		['physics.applyTorqueImpulse', 'physics.applyTorqueImpulse( object_id, x,y,z )', ' \r\n FIXME: empty hook\r\n Apply a  to the center of the object,  is specified as a vector.\r\n', 
		'api_physics.cpp#L233'],
		['physics.clearForces', 'physics.clearForces( object_id )', ' Clears any force parameters for the object.\r\n', 
		'api_physics.cpp#L282'],
		['physics.getAngularVelocity', 'physics.getAngularVelocity( object_id )', ' \r\n Returns: x,y,z\r\n \r\n API: >= 11.5.25\r\n', 
		'api_physics.cpp#L313'],
		['physics.getLinearVelocity', 'physics.getLinearVelocity( object_id )', ' \r\n Returns: x,y,z\r\n \r\n API: >= 11.5.25\r\n', 
		'api_physics.cpp#L347'],
		['physics.getOrientationQ', 'physics.getOrientationQ( object_id )', ' \r\n Returns: x,y,z,angle\r\n \r\n These values represent the attitude Quarternion for the specified object_id.\r\n \r\n API: >= 11.5.25\r\n', 
		'api_physics.cpp#L380'],
		['physics.loadCollada', 'physics.loadCollada( filename )', '\r\nBROKEN BROKEN BROKEN!\r\n\r\nNON functional.\r\n', 
		'api_physics.cpp#L1050'],
		['physics.newBox', 'physics.newBox( edge_size )', ' \r\n Creates a new rigid body element in the physics engine.\r\n \r\n', 
		'api_physics.cpp#L910'],
		['physics.newCapsule', 'physics.newCapsule( radius, height )', ' \r\n Creates a new rigid body element in the physics engine.\r\n A capsule is a cylinder with domed ends.\r\n \r\n', 
		'api_physics.cpp#L975'],
		['physics.newCone', 'physics.newCone( radius, height )', ' \r\n Creates a new rigid body element in the physics engine.\r\n', 
		'api_physics.cpp#L1009'],
		['physics.newCylinder', 'physics.newCylinder( radius, height, z )', ' \r\n  Creates a new rigid body element in the physics engine.\r\n \r\n', 
		'api_physics.cpp#L939'],
		['physics.newMultiSphere', 'physics.newMultiSphere( ........fubar )', ' \r\n Creates a new rigid body element in the physics engine.\r\n', 
		'api_physics.cpp#L1039'],
		['physics.newSphere', 'physics.newSphere( radius )', ' \r\n Create a new sphere rigid body in the physics engine.\r\n', 
		'api_physics.cpp#L885'],
		['physics.restart', 'physics.restart()', ' \r\n Reset the physics engine.\r\n', 
		'api_physics.cpp#L526'],
		['physics.setAngularVelocity', 'physics.setAngularVelocity( id, x, y, z )', ' \r\n Apply force to rigid body instance.\r\n \r\n', 
		'api_physics.cpp#L452'],
		['physics.setBrush', 'physics.setBrush( object_id )', ' \r\n Set default brush for newly created objects.\r\n The brush_id controls what the physics object will look like when drawn on screen.\r\n It does NOT control the physics calculations for collisions.\r\n', 
		'api_physics.cpp#L757'],
		['physics.setBrushByID', 'physics.setBrushByID( physics_id, object_id )', ' \r\n Change the brush-id of a physics object.\r\n', 
		'api_physics.cpp#L783'],
		['physics.setCursor', 'physics.setCursor( x,y,z )', ' \r\n Move the physics spawn point in space.\r\n', 
		'api_physics.cpp#L813'],
		['physics.setDebugMode', 'physics.setDebugMode( debug_mode_flag )', ' \r\n Possible values:\r\n enum  \tDebugDrawModes { \r\n DBG_NoDebug = 0, \r\n DBG_DrawWireframe = 1, \r\n DBG_DrawAabb = 2, \r\n DBG_DrawFeaturesText = 4, \r\n DBG_DrawContactPoints = 8, \r\n DBG_NoDeactivation = 16, \r\n DBG_NoHelpText = 32, \r\n DBG_DrawText = 64, \r\n DBG_ProfileTimings = 128, \r\n DBG_EnableSatComparison = 256, \r\n DBG_DisableBulletLCP = 512, \r\n DBG_EnableCCD = 1024, \r\n DBG_DrawConstraints = (1 << 11), \r\n DBG_DrawConstraintLimits = (1 << 12), \r\n DBG_FastWireframe = (1<<13), \r\n DBG_MAX_DEBUG_DRAW_MODE \r\n }\r\n', 
		'api_physics.cpp#L840'],
		['physics.setEnabled', 'physics.setEnabled( int_flag )', ' \r\n Enable the physics engine.\r\n', 
		'api_physics.cpp#L594'],
		['physics.setGravityVector', 'physics.setGravityVector( x,y,z )', ' \r\n Set default graivty vector.\r\n Normal gravity is ( 0, -9.8, 0 )\r\n', 
		'api_physics.cpp#L684'],
		['physics.setInertia', 'physics.setInertia( vx,vy,vz )', ' \r\n Set default inertia value for newly created objects.\r\n', 
		'api_physics.cpp#L733'],
		['physics.setLinearVelocity', 'physics.setLinearVelocity( object_id, vx, vy, vz )', ' \r\n API: >= 11.5.25\r\n', 
		'api_physics.cpp#L418'],
		['physics.setMass', 'physics.setMass( new_default_mass )', ' \r\n Set the default mass value for new objects, ratio.\r\n', 
		'api_physics.cpp#L545'],
		['physics.setOrigin', 'physics.setOrigin( x,y,z )', ' \r\n Controls where in X-Planes OpenGL world the Bullet-Origin is.\r\n Bullets physics math works best with a 10x10x10 kilometer cube.\r\n Move it around.\r\n', 
		'api_physics.cpp#L707'],
		['physics.setPaused', 'physics.setPaused( int_flag )', ' \r\n Pause the physics engine.\r\n', 
		'api_physics.cpp#L624'],
		['physics.setPhysicsDrawingHack', 'physics.setPhysicsDrawingHack( int_flag )', ' \r\n Turns a physics drawing hack on and off, you MUST load an OBJ8 file (anyone will do) before turning this on.\r\n It\'s a _hack_.\r\n', 
		'api_physics.cpp#L565'],
		['physics.stepOnce', 'physics.stepOnce()', ' \r\n When paused, step the physics engine frame by frame.\r\n', 
		'api_physics.cpp#L655'],
		['physics.translate', 'physics.translate( id, x,y,z )', ' \r\n Translate a rigid body inside the physics world.\r\n \r\n API: >= 11.5.25\r\n', 
		'api_physics.cpp#L489']
		],
	'pid' : [
		['pid.getInstv', 'pid.getInstv( pid_id )', ' returns: instv value for pid target.\r\n\r\nAPI: >= 19.5\r\n', 
		'api_pid.cpp#L93'],
		['pid.getPosition', 'pid.getPosition( pid_id )', ' returns: position value for pid target.\r\n\r\nAPI: >= 19.5\r\n', 
		'api_pid.cpp#L61'],
		['pid.getTarget', 'pid.getTarget( pid_id )', 'returns: target value\r\n\r\nAPI: >= 19.5\r\n', 
		'api_pid.cpp#L207'],
		['pid.newPID', 'pid.newPID( Kp, Ki, Kd )', 'returns: pid_id\r\n\r\n Creates new vector-unit-enhanced PID instance.\r\n Ported from X-Scenery core tools.\r\n\r\n Core update math runs on the CPU\'s vector unit to utilize more the silicon than Lua can.\r\n\r\nAPI: >= 19.5\r\n', 
		'api_pid.cpp#L28'],
		['pid.setParams', 'pid.setParams( pid_id, Kp, Ki, Kd )', 'returns: nothing\r\n\r\n Kp, Ki, and Kd can be nil to allow for selective targeting of param updates.\r\n\r\n Used to tune your pid contants.\r\n\r\nAPI: >= 19.5\r\n', 
		'api_pid.cpp#L124'],
		['pid.setTarget', 'pid.setTarget( pid_id, target )', 'returns: nothing\r\n\r\n Used to update pid target value.\r\n\r\nAPI: >= 19.5\r\n', 
		'api_pid.cpp#L174']
		],
	'plugins' : [
		['plugins.disable', 'plugins.disable( signature )', '\r\nReturns: nothing.\r\n\r\nDisable a plugin.\r\n\r\n\r\n API: >= 16.8\r\n', 
		'api_plugins.cpp#L283'],
		['plugins.enable', 'plugins.enable( signature )', '\r\nReturns: nothing.\r\n\r\nEnable a plugin.\r\n\r\n API: >= 16.8\r\n', 
		'api_plugins.cpp#L322'],
		['plugins.findPlugin', 'plugins.findPlugin( signature )', '\r\nReturns: boolean\r\n \r\n<code>\r\nif( plugins.findPlugin( "custom_systems.xpl" ) )then\r\n\t--we could find the plugin and are capable of sending messages to it in a useful manner.\r\nend\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_plugins.cpp#L52'],
		['plugins.getFolder', 'plugins.getFolder()', '\r\nReturns: String containing path to plugins folder. Includes trailing slash. All slashes are set to /\r\n\r\nEg: "/home/br/Desktop/X-Plane 10/Resources/plugins/"\r\n\r\n<code>--get plugins folder\r\nlocal plugins_folder_path = plugins.getFolder()\r\n\r\n</code>\r\n \r\nAPI: >= 11.5.25\r\n', 
		'api_plugins.cpp#L100'],
		['plugins.getPluginsList', 'plugins.getPluginsList()', ' returns: { {name=,signature=,filepath=,description=,enabled=,},... }\r\n\r\n API: >= 16.9\r\n', 
		'api_plugins.cpp#L403'],
		['plugins.isEnabled', 'plugins.isEnabled( signature )', '\r\nReturns: boolean.\r\nassert() compatbile.\r\nIf plugin is not found returns: nil, "Plugin not found."\r\n\r\nQuery for enable/disable state of a plugin.\r\n\r\n API: >= 16.8\r\n', 
		'api_plugins.cpp#L360'],
		['plugins.sendBlob', 'plugins.sendBlob( signature, code, message )', '\r\nReturns: true if signature was found and message sent, nil otherwise.\r\n\r\n<code>\r\nplugins.sendMessage( "xplanesdk.examples.DataRefEditor", 0x01000000, "myproject/custom/dataref_name" )\r\n--this would try to register a fake dataref with DRE.\r\n</code>\r\n\r\nAs of 2013.07.01 this function will auto detect the type of data you are sending as "message".\r\n\r\nIf you are sending a string value it will be passed over IPC as a C-String pointer.\r\n\r\nIf you are sending a numeric value (may include strings that can be cleanly converted to numeric!) then it will be sent as an unsigned  long int.\r\n\r\nData packet will be auto packaged with a 4 byte header to indicate the size of the payload.\r\nThis allows one shot binary packet xfer over the ixplc channel.\r\n\r\nAPI: >= 13.07\r\n', 
		'api_plugins.cpp#L211'],
		['plugins.sendMessage', 'plugins.sendMessage( signature, code, message )', '\r\nReturns: true if signature was found and message sent, nil otherwise.\r\n\r\n<code>\r\nplugins.sendMessage( "xplanesdk.examples.DataRefEditor", 0x01000000, "myproject/custom/dataref_name" )\r\n--this would try to register a fake dataref with DRE.\r\n</code>\r\n\r\nAs of 2013.07.01 this function will auto detect the type of data you are sending as "message".\r\n\r\nIf you are sending a string value it will be passed over IPC as a C-String pointer.\r\n\r\nIf you are sending a numeric value (may include strings that can be cleanly converted to numeric!) then it will be sent as an unsigned  long int.\r\n\r\nAPI: >= 13.07\r\n', 
		'api_plugins.cpp#L129'],
		['plugins.whoAmI', 'plugins.whoAmI()', ' returns: {name,sig,filepath,desc,enabled}\r\n\r\n This function is like a focused version of plugins.getPluginsList()\r\n It ONLY returns data about who Gizmo64.xpl is running as.\r\n (The user may have renamed or moved us for some reason.)\r\n\r\n API: >=16.9\r\n', 
		'api_plugins.cpp#L486']
		],
	'prefs' : [
		['prefs.get', 'prefs.get( key_name, default_value )', '\nReturns: Value of prefs key or default_value if prefs key_name was not found.\n\nGet a prefs value.\n\n<code>\nlocal var = prefs.get( "foo_bar", 1.234 )\n</code>\n\nAPI: >= 14.04\n', 
		'prefs_api.lua#L178'],
		['prefs.load', 'prefs.load()', '\nReturns: nothing\n\nLoad prefs from disk.\n\n<code>\nprefs.load()\n</code>\n\nAPI: >= 14.04\n', 
		'prefs_api.lua#L19'],
		['prefs.save', 'prefs.save()', '\nReturns: nothing\n\nSave prefs to disk.\n\n<code>\nprefs.save()\n</code>\n\nAPI: >= 14.04\n', 
		'prefs_api.lua#L85'],
		['prefs.set', 'prefs.set( key_name, value_var )', '\nReturns: nothing\n\nSet a prefs value.\n\nDoes not save to disk.\n\n<code>\nprefs.set( "foo_bar", 1.234 )\n</code>\n\nAPI: >= 14.04\n', 
		'prefs_api.lua#L128']
		],
	'shaders' : [
		['shaders.compile', 'shaders.compile( shader_id, vertex_shader_string_blob, fragment_shader_string_blob )', ' Returns: boolean for success\r\n', 
		'api_shaders.cpp#L63'],
		['shaders.loadShader', 'shaders.loadShader( vtx_filename, frag_filename, config_lua_f )', '\nReturns: shader_h (or nil on failure?)\n\nShortcut version to handle loading and setup of all the "stuff"\n\nAPI: 14.11?\n', 
		'shaders_api.lua#L19'],
		['shaders.newShader', 'shaders.newShader( OPT_vtx_blob, OPT_frag_blob, OPT_config_lua_f )', '\nReturns: shader_h (or nil on failure?)\n\nShortcut version to handle compiling and setup of a new shader. Does not load from disk.\n\nAPI: 14.11?\n', 
		'shaders_api.lua#L68'],
		['shaders.release', 'shaders.release()', '\r\nReturns: nothing\r\n\r\nReturn GL to XP default drawing shaders.\r\n\r\nAPI: >= 12.01\r\n', 
		'api_shaders.cpp#L152'],
		['shaders.setIntParam', 'shaders.setIntParam( shader_id, param_name, value )', '\r\nReturns: nothing\r\n\r\nAllows passing of dynamic parameters into the shader.\r\nparam_name is a string, value is an integer.\r\n\r\n<code>\r\nshaders.use( shader_x )\r\nshaders.setParam( shader_x, "tex_0", 1 )\r\nshaders.release( shader_x )\r\n</code>\r\n\r\nAPI: >= 14.05\r\n', 
		'api_shaders.cpp#L278'],
		['shaders.setIntParam_Vec2', 'shaders.setIntParam_Vec2( shader_id, param_name, value, value )', '\r\nReturns: nothing\r\n\r\nAllows passing of dynamic parameters into the shader.\r\nparam_name is a string, value is an integer.\r\n\r\n\r\n<code>\r\nshaders.use( shader_x )\r\nshaders.setParam_Vec2( shader_x, "tex_0", 1, 2 )\r\nshaders.release( shader_x )\r\n</code>\r\n\r\nAPI: >= 15.01\r\n', 
		'api_shaders.cpp#L311'],
		['shaders.setIntParam_Vec3', 'shaders.setIntParam_Vec3( shader_id, param_name, value, value, value )', '\r\nReturns: nothing\r\n\r\nAllows passing of dynamic parameters into the shader.\r\nparam_name is a string, value is an integer.\r\n\r\n<code>\r\nshaders.use( shader_x )\r\nshaders.setParam_Vec3( shader_x, "tex_0", 1, 2, 3 )\r\nshaders.release( shader_x )\r\n</code>\r\n\r\nAPI: >= 15.01\r\n', 
		'api_shaders.cpp#L347'],
		['shaders.setParam', 'shaders.setParam( shader_id, param_name, value )', '\r\nReturns: nothing\r\n\r\nAllows passing of dynamic parameters into the shader.\r\nparam_name is a string, value is a floating point number\r\n\r\n<code>\r\nshaders.use( shader_x )\r\nshaders.setParam( shader_x, "light_level", 2.0 )\r\nshaders.release( shader_x )\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_shaders.cpp#L172'],
		['shaders.setParam_Vec2', 'shaders.setParam_Vec2( shader_id, param_name, value, value )', '\r\nReturns: nothing\r\n\r\nAllows passing of dynamic parameters into the shader.\r\nparam_name is a string, value is a floating point number\r\n\r\n<code>\r\nshaders.use( shader_x )\r\nshaders.setParam_Vec2( shader_x, "light_level", 2.0, 3.0 )\r\nshaders.release( shader_x )\r\n</code>\r\n\r\nAPI: >= 15.01\r\n', 
		'api_shaders.cpp#L206'],
		['shaders.setParam_Vec3', 'shaders.setParam_Vec3( shader_id, param_name, value, value, value )', '\r\nReturns: nothing\r\n\r\nAllows passing of dynamic parameters into the shader.\r\nparam_name is a string, value is a floating point number\r\n\r\n<code>\r\nshaders.use( shader_x )\r\nshaders.setParam( shader_x, "light_level", 2.0, 3.0, 4.0 )\r\nshaders.release( shader_x )\r\n</code>\r\n\r\nAPI: >= 15.01\r\n', 
		'api_shaders.cpp#L241'],
		['shaders.use', 'shaders.use( shader_id )', ' Activate the specified valid shader_id.\r\n', 
		'api_shaders.cpp#L100']
		],
	'sound' : [
		['sound.bind', 'sound.bind( source_id, buffer_id )', '\nreturns: Nothing.\n\nBind the specified buffer to the specified source.\n\n', 
		'sound_api.lua#L21'],
		['sound.getControl', 'sound.getControl()', '\r\nReturns: nothing\r\n\r\nAquires control of the shared X-Plane OpenAL context.\r\n\r\nYou MUST use this before any other LuaAL functions will work.\r\n\r\nThis function is automatically handled by all the general purpose sound control functions defined by the sound API.\r\nYou will only need to use this function call if you are using the al API directly for advanced sound control.\r\n\r\nSee the "sound_api.lua" in the Gizmo-Firmware project for more information.\r\nhttps://github.com/benrussell/Gizmo-Firmware/blob/master/firmware/core/sound_api.lua\r\n\r\n<code>\r\n--Example code taken directly from firmware/core/sound_api.lua\r\n--See URL above for more.\r\nsound.play = function( source_id )\r\n\tsound.getControl()\r\n\t\tal.SourcePlay( source_id )\r\n\tsound.releaseControl()\r\nend\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_sound.cpp#L249'],
		['sound.getSourceCount', 'sound.getSourceCount()', '    \n    returns: Nothing.\n    \n    Bind the specified buffer to the specified source.\n    \n    API: >= 16.05\n', 
		'sound_api.lua#L441'],
		['sound.load', 'sound.load( OPT_sound_buffer_id, sound_filename )', '\nReturns: sound_buffer_id\n\nOptional Parameter: sound_buffer_id\n\nIf called with no sound_buffer_id argument a new sound buffer will be created for you.\n\nYou must use sound.bind( sound_source_id, sound_buffer_id ) and sound.play( sound_source_id ) to make use of your loaded sound data.\n\nFile Formats Supported:\n-----------------------\n* WAV Files:\n\tSample Rate:\t22 or 44kz\n\tBit Depth:\t\t8 or 16 bit\n\tChannels:\t\tMono or Stereo\n\nNote: \n\tThe OpenAL programmers guide recommend that Stereo WAV files will \n\tNOT render correctly on a 3D sound stage.\n\t\n\tUse Mono samples only if you expect to be manipulating sound positions.\n\n<code>\n--Create a new sound source, analagous to a Loud Speaker in real life.\nlocal sndsrc_Alert = sound.newSource()\n\n--Load our sound sample data and save the new sound_buffer_id that\'s returned.\nlocal snd_Alert = sound.load( acf.getFolder() .. "sounds/alert.wav" )\n\n--Bind our newly loaded sound to our newly created sound source.\nsound.bind( sndsrc_Alert, snd_Alert )\n\n--Play the sound.\nsound.play( sndsrc_Alert )\n</code>\n\nAPI: >= 12.01\n', 
		'sound_api.lua#L71'],
		['sound.loadEx', 'sound.loadEx( OPT_sound_buffer_id, sound_filename )', '\r\nReturns: sound_buffer_id\r\n\r\nOptional Parameter: sound_buffer_id\r\n\r\nIf called with no sound_buffer_id argument a new sound buffer will be created for you.\r\n\r\nYou must use sound.bind( sound_source_id, sound_buffer_id ) and sound.play( sound_source_id ) to make use of your loaded sound data.\r\n\r\nFile Formats Supported:\r\n-----------------------\r\n* WAV Files:\r\n\tSample Rate:\t22 or 44kz\r\n\tBit Depth:\t\t8 or 16 bit\r\n\tChannels:\t\tMono or Stereo\r\n\r\nNote: \r\n\tThe OpenAL programmers guide recommend that Stereo WAV files will \r\n\tNOT render correctly on a 3D sound stage.\r\n\t\r\n\tUse Mono samples only if you expect to be manipulating sound positions.\r\n\r\n<code>\r\n--Create a new sound source, analagous to a Loud Speaker in real life.\r\nlocal sndsrc_Alert = sound.newSource()\r\n\r\n--Load our sound sample data and save the new sound_buffer_id that\'s returned.\r\nlocal snd_Alert = sound.load( acf.getFolder() .. "sounds/alert.wav" )\r\n\r\n--Bind our newly loaded sound to our newly created sound source.\r\nsound.bind( sndsrc_Alert, snd_Alert )\r\n\r\n--Play the sound.\r\nsound.play( sndsrc_Alert )\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_sound.cpp#L128'],
		['sound.newBuffer', 'sound.newBuffer()', '\r\nReturns: sound_buffer_id\r\n\r\nAllocates a new sound buffer and returns its ID.\r\n\r\n<code>\r\nlocal sndbuff_Alert = sound.newBuffer()\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_sound.cpp#L80'],
		['sound.newSource', 'sound.newSource()', '\r\nReturns: sound_source_id\r\n\r\nAllocates a new sound source and returns its ID.\r\n\r\n<code>\r\nlocal sndsrc_Alert = sound.newSource()\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_sound.cpp#L104'],
		['sound.pause', 'sound.pause( sound_source_id )', '\nPause the playback of the specified sound.\n', 
		'sound_api.lua#L134'],
		['sound.play', 'sound.play( sound_source_id )', '\nPlay the specified sound. Resumes from paused state if sound was paused.\nSee sound.rewind(...)\n', 
		'sound_api.lua#L146'],
		['sound.releaseControl', 'sound.releaseControl()', '\r\nReturns: nothing\r\n\r\nReleases control of the shared X-Plane OpenAL context.\r\n\r\nYou MUST use this after calling: sound.getControl()\r\n\r\nThis function is automatically handled by all the general purpose sound control functions defined by the sound API.\r\nYou will only need to use this function call if you are using the al API directly for advanced sound control.\r\n\r\nSee the "sound_api.lua" in the Gizmo-Firmware project for more information.\r\nhttps://github.com/benrussell/Gizmo-Firmware/blob/master/firmware/core/sound_api.lua\r\n\r\n<code>\r\n--Example code taken directly from firmware/core/sound_api.lua\r\n--See URL above for more.\r\nsound.play = function( source_id )\r\n\tsound.getControl()\r\n\t\tal.SourcePlay( source_id )\r\n\tsound.releaseControl()\r\nend\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_sound.cpp#L287'],
		['sound.rewind', 'sound.rewind( sound_source_id )', '\nMove the playhead for a given sample back to the start of a sample.\n', 
		'sound_api.lua#L159'],
		['sound.say', 'sound.say( string_to_vocalize )', '\r\nReturns: nothing\r\n\r\nX-Plane will speak your text using the text-to-speech processor.\r\n\r\nResults should be the same as the built in ATC system.\r\n\r\n<code>\r\nsound.say("Hello World!")\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_sound.cpp#L36'],
		['sound.setDirection', 'sound.setDirection( sound_source_id, nx,ny,nz )', '\nControls the direction vector that the sound is travelling in.\n', 
		'sound_api.lua#L183'],
		['sound.setGain', 'sound.setGain( sound_source_id, gain_ratio )', '\nControls the gain, or volume, of a sound sample, argument is a ratio.\n', 
		'sound_api.lua#L223'],
		['sound.setLoop', 'sound.setLoop( sound_source_id, loop_flag )', '\nSet loop_flag to 1 and the sound will play forever until stopped or paused.\nSet loop_flag to 0 and the sound will stop playing when the end of the sample is reached.\n', 
		'sound_api.lua#L235'],
		['sound.setPitch', 'sound.setPitch( sound_source_id, pitch_ratio )', '\nAlter the pitch ratio of a given sound.\n0.5 will play at half pitch.\n2.0 will play at twice-normal pitch.\n1.0 will play normally.\n', 
		'sound_api.lua#L248'],
		['sound.setPosition', 'sound.setPosition( sound_source_id, x,y,z )', '\nSet the sounds position in 3D space.\n\nMono files only for 3D sound-stage use.\n', 
		'sound_api.lua#L263'],
		['sound.setVelocity', 'sound.setVelocity( sound_source_id, vx,vy,vz )', '\nControls the velocity of the sound in 3D space.\nCombine this with sound.setDirection(...)\n\n', 
		'sound_api.lua#L304'],
		['sound.stop', 'sound.stop( sound_source_id )', '\nStops playback for a given sound, moves playhead back to start of sample.\n', 
		'sound_api.lua#L171'],
		['sound.unbind', 'sound.unbind( source_id )', '\nreturns: Nothing.\n\nClears all sound buffer bindings for the specified source.\n\n', 
		'sound_api.lua#L37']
		],
	'string' : [
		['string.read_me', 'string.read_me()', ' \nGizmo64 provides the full Lua string API.\n\nhttp://www.lua.org/manual/5.2/manual.html#6.4\n\n', 
		'api_third_party_docs.cpp#L351']
		],
	'table' : [
		['table.read_me', 'table.read_me()', '\nGizmo64 provides the full Lua table API.\n\nhttp://www.lua.org/manual/5.2/manual.html#6.5\n\n', 
		'api_third_party_docs.cpp#L367']
		],
	'timer' : [
		['timer.destroy', 'timer.destroy( timer_id )', '\r\nReturns: nothing\r\n\r\nStop and destroys a timer.\r\n\r\n<code>\r\n--Stop and destroy a timer.\r\ntimer.destroy( tmr_TickTock )\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_timer.cpp#L261'],
		['timer.getHPT', 'timer.getHPT()', '\r\nReturns: Integer. Number of microseconds that have elapsed since Gizmo64 started.\r\n\r\n<code>\r\n--Basic timing measurement for a theoretical drawing call function.\r\n--Allows measurement of runtime and therefore optimization of drawing callsin\r\n\r\n--Grab a reference time stamp.\r\nlocal start_time = timer.getHPT()\r\n\r\n\t--Call the drawing code that we want to measure.\r\n\tcall_drawing_function()\r\n\r\n--Take a second time stamp.\r\nlocal stop_time = timer.getHPT()\r\n\r\n--Calculate the difference between the start and the end time stamps.\r\nlocal delta = stop_time - start_time\r\n\r\nsound.say("draw call took: " .. delta .. " microseconds.")\r\n</code>\r\n\r\nAPI >= 12.11.08\r\n', 
		'api_timer.cpp#L371'],
		['timer.getInterval', 'timer.getInterval( timer_id )', '\r\nReturns: Float. Timer interval value.\r\n\r\nUse this function to examine how often a timer executes.\r\n\r\nUse the function <i>timer.setInterval( timer_id, new_interval )</i> to adjust the interval.\r\n\r\n<code>\r\nlocal timer_interval = timer.getInterval( tmr_TickTock )\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_timer.cpp#L448'],
		['timer.getValue', 'timer.getValue( timer_id )', '\r\nReturns: Float. The current value of a timer. Can be used to calculate current progress %.\r\n\r\n<code>\r\nlocal max_time = 10\r\n\r\nlocal curr_value = timer.getValue( tmr_TickTock )\r\n\r\nlocal progress_pct = (curr_value / max_time)\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_timer.cpp#L410'],
		['timer.newOneShot', 'timer.newOneShot( timer_function_name, interval_seconds )', '\nReturns: timer_id\n\nCreate a timer that will fire once and die.\n\n<code>\n--Create a function that defines what the timer will do..\nfunction oneshot_action()\n\tsound.say("Hello One Shot World!")\nend\n\n--create a new one-shot timer that will execute our oneshot_action() function in 5 seconds.\nlocal tmr_oneshot = timer.newOneShot( "oneshot_action", 5.0 )\n</code>\n\nAPI: >= 12.01\n', 
		'timer_api.lua#L82'],
		['timer.newOneShotEx', 'timer.newOneShotEx( timer_function_name, interval_seconds )', '\r\nReturns: timer_id\r\n\r\nCreate a timer that will fire once and die.\r\n\r\n<code>\r\n--Create a function that defines what the timer will do..\r\nfunction oneshot_action()\r\n\tsound.say("Hello One Shot World!")\r\nend\r\n\r\n--create a new one-shot timer that will execute our oneshot_action() function in 5 seconds.\r\nlocal tmr_oneshot = timer.newOneShot( "oneshot_action", 5.0 )\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_timer.cpp#L60'],
		['timer.newTimer', 'timer.newTimer( timer_function_name, interval )', '\nReturns: timer_id\n\nCreate a timer that will fire repeatedly forever until stopped.\n\n<code>\n--Create a function that defines what the timer will do..\nfunction repeating_action()\n\tsound.say("Hello Repeating World!")\nend\n\n--create a new repeating timer that will execute our repeating_action() function every 5 seconds until stopped.\nlocal tmr_repeating = timer.newTimer( "repeating_action", 5.0 )\n</code>\n\nAPI: >= 12.01\n', 
		'timer_api.lua#L12'],
		['timer.newTimerEx', 'timer.newTimerEx( timer_function_name, interval )', '\r\nReturns: timer_id\r\n\r\nCreate a timer that will fire repeatedly forever until stopped.\r\n\r\n<code>\r\n--Create a function that defines what the timer will do..\r\nfunction repeating_action()\r\n\tsound.say("Hello Repeating World!")\r\nend\r\n\r\n--create a new repeating timer that will execute our repeating_action() function every 5 seconds until stopped.\r\nlocal tmr_repeating = timer.newTimer( "repeating_action", 5.0 )\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_timer.cpp#L90'],
		['timer.reset', 'timer.reset( timer_id )', '\r\nReturns: nothing\r\n\r\nResets the internal value of a timer and restarts it.\r\n\r\nThis function will restart a timer_id that has been stopped using: timer.stop()\r\n\r\n<code>\r\n--stop our timer.\r\ntimer.stop( tmr_repeating_task )\r\n</code>\r\n\r\n<code>\r\n--create a function that can be called by a one-shot timer.\r\nfunction restart_timer_after_delay()\r\n\t--restart our stopped timer.\r\n\ttimer.reset( tmr_repeating_task )\r\nend\r\n\r\n--create a one shot timer to restart our stopped timer after 1.5 seconds.\r\ntimer.newOneShot( "restart_timer_after_delay", 1.5 )\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_timer.cpp#L314'],
		['timer.setInterval', 'timer.setInterval( timer_id, interval )', '\r\nReturns: nothing\r\n\r\nUse this function to modify how often a timer executes.\r\n\r\nUse the function <i>timer.getInterval( timer_id )</i> to adjust the interval.\r\n\r\n<code>\r\nlocal timer_interval = 120\r\ntimer.setInterval( tmr_TickTock, timer_interval )\r\n</code>\r\n\r\nAPI: >= 12.01\r\n\r\n', 
		'api_timer.cpp#L484'],
		['timer.stop', 'timer.stop( timer_id )', '\r\nReturns: nothing\r\n\r\nStops a timer. The function for timer_id will not be called again.\r\n\r\nUse timer.reset( timer_id ) to restart a timer that has been stopped.\r\n\r\n<code>\r\n--stop our timer.\r\ntimer.stop( tmr_repeating_task )\r\n</code>\r\n\r\n<code>\r\n--create a function that can be called by a one-shot timer.\r\nfunction restart_timer_after_delay()\r\n\t--restart our stopped timer.\r\n\ttimer.reset( tmr_repeating_task )\r\nend\r\n\r\n--create a one shot timer to restart our stopped timer after 1.5 seconds.\r\ntimer.newOneShot( "restart_timer_after_delay", 1.5 )\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_timer.cpp#L202']
		],
	'toast' : [
		['toast.newError', 'toast.newError( caption, message )', '\nReturns: nothing\n\nDisplay an error message on screen.\n\n<code>\ntoast.newError( "toast", "message data" )\n</code>\n\nAPI: >= 14.04\n', 
		'toast_api.lua#L179'],
		['toast.newHelp', 'toast.newHelp( caption, message )', '\nReturns: nothing\n\nDisplay an help message on screen.\n\n<code>\ntoast.newHelp( "toast", "message data" )\n</code>\n\nAPI: >= 14.04\n', 
		'toast_api.lua#L242'],
		['toast.newInfo', 'toast.newInfo( caption, message )', '\nReturns: nothing\n\nDisplay an info message on screen.\n\n<code>\ntoast.newInfo( "toast", "message data" )\n</code>\n\nAPI: >= 14.04\n', 
		'toast_api.lua#L221'],
		['toast.newWarning', 'toast.newWarning( caption, message )', '\nReturns: nothing\n\nDisplay an warning message on screen.\n\n<code>\ntoast.newWarning( "toast", "message data" )\n</code>\n\nAPI: >= 14.04\n', 
		'toast_api.lua#L200']
		],
	'trig' : [
		['trig.courseToLocation', 'trig.courseToLocation( x,y )', '\r\nReturns: Float. Heading in degrees.\r\n\r\n<code>--compute course to target\r\nlocal target_h = trig.courseToLocation( x,y )\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_trig.cpp#L35'],
		['trig.courseToLocation3D', 'trig.courseToLocation3D( x,y,z )', '\r\nReturns: Floats. pitch and heading in degrees\r\n\r\n<code>--Get pitch and heading in degrees to track our target position in x,y,z space.\r\nlocal p,h = trig.courseToLocation3D( x,y,z )\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_trig.cpp#L64'],
		['trig.distanceBetweenPoints', 'trig.distanceBetweenPoints( a,b, x,y )', '\r\nReturns: Float. Distance.\r\n\r\nUses flat plane geometry.\r\n\r\n<code>--Get distance between points..\r\nlocal target_dist = trig.distanceBetweenPoints( a,b, x,y )\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_trig.cpp#L97'],
		['trig.distanceBetweenWorldPoints', 'trig.distanceBetweenWorldPoints( lat_a,lon_a, lat_b,lon_b )', '\r\nReturns: Float. Distance in "degrees of latitude".\r\n\r\nUses decent spherical geometry translated from web source: ...... (SDK website has it??)\r\n\r\nMultiply return value by 60 to convert to nautical miles.\r\n\r\n<code>\r\nlocal target_lat, target_lon = 30, 140 --Randomly selected target data.\r\n\r\nlocal acf_lat, acf_lot, acf_alt = acf.getPosition()\r\n\r\nlocal target_distance = trig.distanceBetweenWorldPoints( acf_lat, acf_lon,  target_lat, target_lon )\r\n\r\nlocal target_distance_nm = target_distance * 60.0\r\n\r\nsound.say("distance to target: " .. string.format("%0.1f nautical miles", target_distance_nm) )\r\n</code>\r\n\r\n\r\nCore Math - Not example code!:\r\n<code>\r\nreturn ( 2 *\r\n\t\tasin(\r\n\t\t\tsqrt(\r\n\t\t\t\tsqr( (sin((lat1-lat2)/2)) ) +\r\n\t\t\t\tcos(lat1) *\r\n\t\t\t\tcos(lat2) *\r\n\t\t\t\tsqr( (sin((lon1-lon2)/2)) )\r\n\t\t\t)\r\n\t\t)\r\n\t);\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_trig.cpp#L132'],
		['trig.interpolator', 'trig.interpolator( r,s,t, x,y,z, steps )', '\r\nReturns: Stream of x,y,z positions as stream-table.\r\n\r\nr,s,t: Start position in XYZ space.\r\nx,y,z: Finish position in XYZ space.\r\n\r\nReturn data example: { x,y,z, x,y,z, x,y,z, x,y,z, ... }\r\nEach x,y,z set is a new 3D fix.\r\n\r\n<code>\r\n--Start position XYZ\r\nlocal r,s,t = 0,0,0\r\n\r\n--Finish position XYZ\r\nlocal x,y,z = 10,2,4\r\n\r\n--How many moves are we allowed?\r\nlocal steps = 50\r\n\r\n--Gather data stream...\r\nlocal xyz_stream = { trig.interpolator( r,s,t, x,y,z, steps ) }\r\n\r\n--We should now have steps * 3 elements in the table xyz_stream\r\n</code>\r\n\r\n<code>\r\n--Do something with our data stream from the interp..\r\nlocal max_segments = #xyz_stream / 3\r\n\r\n--Move through the stream in jumps of 3 items.\r\nfor seg_x=1, max_segments, 3 do\r\n\r\n\t--Extract a set of xyz data out of the stream..\r\n\tlocal sx = xyz_stream[seg_x]\r\n\tlocal sy = xyz_stream[seg_x+1]\r\n\tlocal sz = xyz_stream[seg_x+2]\r\n\t\r\n\t--draw something?\r\n\t--gfx.draw...( sx,sy,sz )\r\n\t\r\nend\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_trig.cpp#L266'],
		['trig.newPositionOffset', 'trig.newPositionOffset( heading, speed )', '\r\nReturns: x,y as floating point values.\r\n\r\nGiven a spead and heading, calculate a new grid position.\r\n\r\n<code>\r\n--New target location:\r\nlocal new_xy = { trig.newPositionOffset( 270, 1000 ) }\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_trig.cpp#L193'],
		['trig.newPositionOffset3D', 'trig.newPositionOffset3D( heading, pitch, speed )', '\r\nReturns: x,y,z as floating point values.\r\n\r\nGiven heading, pitch and speed, return x,y,z data for result.\r\n\r\n<code>\r\n--New 3D target location:\r\nlocal new_xyz = { trig.newPositionOffset3D( 270, 1000 ) }\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_trig.cpp#L229']
		],
	'trimesh' : [
		['trimesh.clear', 'trimesh.clear( trimesh_id )', '\r\nReturns: nothing\r\n\r\nAPI: >= 14.05\r\n', 
		'api_trimesh.cpp#L352'],
		['trimesh.clearIdx', 'trimesh.clearIdx( trimesh_id )', '\r\nAPI: >= 14.05\r\n', 
		'api_trimesh.cpp#L320'],
		['trimesh.clearNml', 'trimesh.clearNml( trimesh_id )', '\r\nAPI: >= 14.05\r\n', 
		'api_trimesh.cpp#L288'],
		['trimesh.clearTex', 'trimesh.clearTex( trimesh_id )', '\r\nAPI: >= 14.05\r\n', 
		'api_trimesh.cpp#L256'],
		['trimesh.clearVtx', 'trimesh.clearVtx( trimesh_id )', '\r\nReturns: nothing\r\n\r\nAPI: >= 14.05\r\n', 
		'api_trimesh.cpp#L223'],
		['trimesh.newTriMesh', 'trimesh.newTriMesh( )', '\r\nReturns: trimesh_id\r\n\r\nAPI: >= 14.05\r\n', 
		'api_trimesh.cpp#L44'],
		['trimesh.newVBO', 'trimesh.newVBO( trimesh_id )', '\r\nReturns: vbo_id\r\n\r\nTranslate a TriMesh object into an OpenGL VBO id that we can use for high performance drawing.\r\n\r\nAPI: >= 14.05\r\n', 
		'api_trimesh.cpp#L394'],
		['trimesh.pushIdx', 'trimesh.pushIdx( trimesh_id, indice_value )', '\r\nReturns: nothing\r\n\r\nAPI: >= 14.05\r\n', 
		'api_trimesh.cpp#L183'],
		['trimesh.pushNml', 'trimesh.pushNml( trimesh_id, nx,ny,nz )', '\r\nAPI: >= 14.05\r\n', 
		'api_trimesh.cpp#L145'],
		['trimesh.pushTex', 'trimesh.pushTex( trimesh_id, u,v )', '\r\nAPI: >= 14.05\r\n', 
		'api_trimesh.cpp#L109'],
		['trimesh.pushVtx', 'trimesh.pushVtx( trimesh_id, x,y,z )', '\r\nReturns: nothing\r\n\r\nAPI: >= 14.05\r\n', 
		'api_trimesh.cpp#L70']
		],
	'utils' : [
		['utils.expScale', 'utils.expScale( input, scale_factor )', '\r\nReturns: exponentially scaled value.\r\n\r\n<code>--Use for gain manipulations.\r\nlocal raw_input = joystick.getPitch()\r\nlocal new_value = utils.expScale( raw_input, 0.75 )\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_utils.cpp#L49'],
		['utils.getBlobFromCPointer', 'utils.getBlobFromCPointer( pointer_address )', '\r\nReturns: String value at pointer address.\r\n\r\nThis function auto decodes a blob of the format:\r\n<i>{ size[4], bytes[...] }</i>\r\n\r\nThe size header will be automatically parsed and stripped away leaving you with blob data.\r\n\r\nUseful when combined with: <i>plugins.sendBlob( target, msg, blob, blob_length )</i> which is capable of autopackaging into the correct format.\r\n\r\nWARNING: Experts only, will crash X-Plane to desktop if not used correctly.\r\n\r\n<code>--DANGER: Abuse of this code can and will crash your simulator.\r\nlocal new_message = utils.getBlobFromCPointer( message_address )\r\n</code>\r\n\r\nAPI: >= 11.4\r\n', 
		'api_utils.cpp#L245'],
		['utils.getFileInfo', 'utils.getFileInfo( file_path )', '\nReturns: node_type, size_in_bytes, date_changed\n\nThis function is capable of returing information about many types of file system resources.\n\nBe sure to inspect the node_type return value when performing IO operations.\n\nThe most commonly used values are "folder" and "file". \n\n\nOther values are retained for advanced use as required.\nValid "node_type" values:\n\t"block_dev"\n\t"char_dev"\n\t"folder"\n\t"fifo"\n\t"symlink"\n\t"file"\n\t"socket"\n\t"unknown"\n\n<code>--Inspect the date_changed for the users aircraft file.\nlocal file_info = { utils.getFileInfo(acf.getFolder() .. acf.getFilename()) }\n\nsound.say("aircraft last changed: " .. file_info[3])\n</code>\n\nAPI: 11.14+\n', 
		'utils_api.lua#L44'],
		['utils.getFileInfoEx', 'utils.getFileInfoEx( file_path )', '\r\nReturns: node_type, size_in_bytes, date_changed\r\n\r\nThis function is capable of returing information about many types of file system resources.\r\n\r\nBe sure to inspect the node_type return value when performing IO operations.\r\n\r\nThe most commonly used values are "folder" and "file". \r\n\r\n\r\nOther values are retained for advanced use as required.\r\nValid "node_type" values:\r\n\t"block_dev"\r\n\t"char_dev"\r\n\t"folder"\r\n\t"fifo"\r\n\t"symlink"\r\n\t"file"\r\n\t"socket"\r\n\t"unknown"\r\n\r\n<code>--Inspect the date_changed for the users aircraft file.\r\nlocal file_info = { utils.getFileInfo(acf.getFolder() .. acf.getFilename()) }\r\n\r\nsound.say("aircraft last changed: " .. file_info[3])\r\n</code>\r\n\r\nAPI: 11.14+\r\n', 
		'api_utils.cpp#L181'],
		['utils.getFolderContents', 'utils.getFolderContents( folder_path )', '\nReturns: Multiple strings containing the names of the items found in the folder specified.\n\nNOTE: Due to a limit in Mac OS "Classic" the max recommended length for a filename is 31 chars.\nUse of filenames longer than this may result in cross-plaform issues.\n\n<code>--Collect a list of filenames for a specified folder into a new Lua table called file_list\nlocal file_list = { utils.getFolderContents(acf.getFolder()) }\n</code>\n\nAPI: >= 11.11\n', 
		'utils_api.lua#L12'],
		['utils.getFolderContentsEx', 'utils.getFolderContentsEx( folder_path )', '\r\nReturns: Multiple strings containing the names of the items found in the folder specified.\r\n\r\nNOTE: Due to a limit in Mac OS "Classic" the max recommended length for a filename is 31 chars.\r\nUse of file names longer than this may result in cross-platform issues.\r\n\r\n<code>--Collect a list of file names for a specified folder into a new Lua table called file_list\r\nlocal file_list = { utils.getFolderContents(acf.getFolder()) }\r\n</code>\r\n\r\nAPI: >= 11.11\r\n', 
		'api_utils.cpp#L74'],
		['utils.getHostName', 'utils.getHostName()', '\r\nreturns: host_name, ip4_address\r\n\r\n<code>\r\nlocal host = { utils.getHostName() }\r\nprint( "http://" .. host[2] )\r\n</code>\r\n\r\nAPI: >= 14.12\r\n', 
		'api_utils.cpp#L423'],
		['utils.getStringFromCPointer', 'utils.getStringFromCPointer( pointer_address, OPT_length )', '\r\nReturns: String value at pointer address.\r\n\r\nWARNING: Experts only, will crash X-Plane to desktop if not used correctly.\r\n\r\nThe length parameter is optional.\r\nIf omitted Gizmo64 will attempt to return the C-String(null terminated array) value at the ram address specified.\r\nThis may crash the Simulator to Desktop.\r\n\r\nThis function DOES NOT use a custom blob format during data interchange.\r\nIt provides direct access to system ram addresses with no decode layer.\r\n\r\nUse utils.getBlobFromCPointer(...) if you require framed data interchange.\r\n\r\n<code>--get me a chunk of that raw ram stuff.\r\nlocal danger_danger = utils.getStringFromCPointer( pointer_address, 256 )\r\n</code>\r\n\r\nAPI >= 11.4+\r\n', 
		'api_utils.cpp#L293'],
		['utils.newFolder', 'utils.newFolder( folder_path )', '\r\nReturns: nothing\r\n\r\nAttempts to create a new folder.\r\n\r\nNOTE: Due to a limit in Mac OS "Classic" the max recommended length for a filename is 31 chars.\r\nUse of filenames longer than this may result in cross-plaform issues.\r\n\r\n<code>--Create a new folder in the X-Plane folder.\r\nutils.newFolder( xp.getFolder() .. "new_folder" )\r\n</code>\r\n\r\nAPI: >= 12.01.28\r\n', 
		'api_utils.cpp#L139'],
		['utils.popWebBrowser', 'utils.popWebBrowser( url )', '\r\nReturns: nothing\r\n\r\nOpens the system default web browser and sends user to specified URL.\r\n\r\n<code>--Open a URL in a web browser..\r\nutils.popWebBrowser("http://benrussell.github.io/");\r\n</code>\r\n\r\nAPI: >= 11.5.6\r\n', 
		'api_utils.cpp#L368'],
		['utils.secondsToDHMS', 'utils.secondsToDHMS( seconds )', '\nreturns: d,h,m,s as integers.\n\nDays, Hours, Minutes, Seconds.\n\nAPI: >= 14.12.31.003\n', 
		'utils_api.lua#L115'],
		['utils.setClipboardText', 'utils.setClipboardText( string_data )', '\r\nReturns: nothing\r\n\r\nCopy string_data to the system clipboard.\r\n\r\nThe value of the clipboard cannot be read by Gizmo64 scripts for privacy protection.\r\n\r\n<code>--Set the users clipboard value.\r\nutils.setClipboardText("Gizmo64 rocks!")\r\n</code>\r\n\r\nMac/Win only.\r\n\r\nAPI: >= 13.02.24\r\n', 
		'api_utils.cpp#L492']
		],
	'xp' : [
		['xp.clearReplay', 'xp.clearReplay()', '\r\nReturns: nothing.\r\n\r\nClears the X-Plane replay buffer.\r\n\r\n<code>xp.clearReplay()\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_xp.cpp#L62'],
		['xp.commandBeginByName', 'xp.commandBeginByName( command_name )', '\nReturns: nothing\n\nDEPRECATED >= 14.09: Please use the new cmd API.\n\nAPI: >= 12.01\n', 
		'xp_api.lua#L16'],
		['xp.commandEndByName', 'xp.commandEndByName( command_name )', '\nReturns: nothing\n\nDEPRECATED >= 14.09: Please use the new cmd API.\n\nAPI: >= 12.01\n', 
		'xp_api.lua#L31'],
		['xp.commandOnceByName', 'xp.commandOnceByName( command_name )', '\nReturns: nothing\n\nDEPRECATED >= 14.09: Please use the new cmd API.\n\nAPI: >= 12.01\n', 
		'xp_api.lua#L46'],
		['xp.getCycleNumber', 'xp.getCycleNumber()', '\r\nReturns: number of frames rendered since sim started as an integer value.\r\n\r\n<code>local sim_total_frame_count = xp.getCycleNumber()\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_xp.cpp#L86'],
		['xp.getElapsedTime', 'xp.getElapsedTime()', '\r\nReturns: Number of seconds since sim started as floating point value.\r\n\r\n<code>local sim_total_run_time = xp.getElapsedTime()\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_xp.cpp#L105'],
		['xp.getFolder', 'xp.getFolder()', '\r\nReturns: String containing path to X-Plane folder, includes trailing slash. All slashes are set to /\r\n\r\n<code>local xp_folder_path = xp.getFolder()\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_xp.cpp#L149'],
		['xp.getLanguage', 'xp.getLanguage()', '\r\nReturns: Language as Top Level Domain Code in a string.\r\n\r\nPossible return values:\r\n"??" - Unknown\r\n"us" - English\r\n"fr" - French\r\n"de" - German\r\n"it" - Italian\r\n"es" - Spanish\r\n"kr" - Korean\r\n"ru" - Russian\r\n"gr" - Greek\r\n"jp" - Japanese\r\n"cn" - Chinese\r\n"?!" - Unexpected return from XPLMGetLanuage() function. SNAFU. Note the !\r\n\r\n<code>--Detect and react to language settings\r\n\r\nlocal language_table = {}\r\n\r\nlocal user_language = xp.getLanguage()\r\n\r\nif( user_language == "en" )then\r\n\tlanguage_table = { label="Action" }\r\nelse if( user_language == "de" )then\r\n\tlanguage_table = { label="Achtung" }\r\nend\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_xp.cpp#L168'],
		['xp.getOS', 'xp.getOS()', '\r\nReturns: String value. "WIN", "LIN" or "MAC".\r\n\r\n<code>--if windows, do something different..\r\nif( xp.getOS() == "WIN" )then\r\n\tsound.say("Windows detected!")\r\nend\r\n</code>\r\n\r\n FIXED in 16.09.\r\n\r\nAPI: >= 16.09\r\n', 
		'api_xp.cpp#L237'],
		['xp.getPaused', 'xp.getPaused()', '\r\nReturns: boolean\r\n\r\n<code>--Detection of sim paused state, useful for systems update toggles.\r\nif( not xp.getPaused() )then\r\n\t--sim is NOT paused, do stuff\r\nelse\r\n\t--sim is paused, pause custom systems\r\nend\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_xp.cpp#L123'],
		['xp.getSDKVersion', 'xp.getSDKVersion()', '\r\nReturns: X-Plane Plugin SDK version as decimal number eg: 2.00\r\n\r\n<code>--Detect SDK version as some code may depend on availability in future.\r\nlocal sdk_version = xp.getSDKVersion()\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_xp.cpp#L301'],
		['xp.getTerrainData', 'xp.getTerrainData( x,y,z )', '\r\nReturns: x,y,z, nx,ny,nz, vx,vy,vz, wet\r\n\r\nWhere:\r\nx,y,z\t\t: Position in OpenGL space where terrain probe hit terrain polygon. Y value contains terrain height.\r\nnx,ny,nz\t: Normal of polygon that terrain probe hit. Contains slope data for hitting the side of a mountain.\r\nvx,vy,vz\t: Velocity data in meters per second(?) for polygon that terrain probe hit. Allows for pitching ship deck.\r\nwet\t    \t: The terrain polygon that we hit was wet. This is a river, lake, stream or ocean.\r\n\r\nAll position related data is in OpenGL space.\r\nUse gfx.worldToLocal(...) and gfx.localToWorld(...) to translate between a geo-fix and X-Plane GL space.\r\n\r\nThe value for wet is either 0 or 1. 0 is dry. 1 is wet.\r\n\r\n<code>--Get terrain info for terrain directly below aircraft.\r\n\r\n--Fetch position data for aircraft in GL space.\r\nlocal acfx,acfy,acfz = acf.getPositionGL()\r\n\r\n--Query terrain data under our aircraft.\r\nlocal x,y,z, nx,ny,nz, vx,vy,vz, wet = xp.getTerrainData( acfx,acfy,acfz )\r\n\r\nif( wet == 1 )then\r\n\t--we are over water\r\nelse\r\n\t--we are over land\r\nend\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_xp.cpp#L332'],
		['xp.getVersion', 'xp.getVersion()', '\r\nReturns: Floating point number containing X-Plane version.\r\n\r\nEg: 10.20\r\n\r\n<code>--detect sim version number and test for compatability.\r\nif( xp.getVersion() < 10.3 )then\r\n\t--Our mod is not compatible with old versions of X-Plane.\r\n\tsound.say("Please upgrade X-Plane to at least 10.30 to run this code.")\r\nelse\r\n\t--continue loading...\r\nend\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_xp.cpp#L268'],
		['xp.loadReplay', 'xp.loadReplay( filename )', '\r\nReturns: nothing\r\n\r\nLoads a replay movie.\r\n\r\nNOTE: This will probably hang/block the sim while the replay file loads.\r\nThis can take a while, it is recommended you display a message to the user -before- calling this function.\r\n\r\n<code>\r\n--Load a replay file from disk.\r\nxp.loadReplay( "Output/replays/replay.mov" )\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_xp.cpp#L457'],
		['xp.loadSituation', 'xp.loadSituation( filename )', '\r\nReturns: nothing\r\n\r\nLoads a pre-saved situation file.\r\n\r\nNOTE: This will probably hang/block the sim while the replay file loads.\r\nThis can take a while, it is recommended you display a message to the user -before- calling this function.\r\n\r\n<code>\r\n--Load a pre-saved situation file.\r\nxp.loadSituation( "Output/situations/filename.sit" )\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_xp.cpp#L498'],
		['xp.newCommand', 'xp.newCommand( command_name, description, script_function_name )', '\nReturns: cmd_id\n\nDEPRECATED >= 14.09: Please use the new cmd API.\n\nAPI: >= 12.01\n', 
		'xp_api.lua#L62'],
		['xp.reloadScenery', 'xp.reloadScenery()', '\r\nReturns: nothing\r\n\r\nCalls for scenery system reload. Thrown in for completeness.\r\n\r\nNOTE: This will probably hang the sim visuals momentarily. Untested.\r\n\r\n<code>--Reload scenery data:\r\nxp.reloadScenery()\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_xp.cpp#L535'],
		['xp.saveReplay', 'xp.saveReplay( replay_filename )', '\r\nReturns: nothing\r\n\r\nSave a replave movie to disk.\r\nThis is NOT a quicktime movie.\r\n\r\n<code>--Save a replay movie to disk..\r\nxp.saveReplay( "Output/replays/replay.mov" )\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_xp.cpp#L564'],
		['xp.saveSituation', 'xp.saveSituation( sit_filename )', '\r\nReturns: nothing\r\n\r\nSave a situation file to disk.\r\n\r\n<code>--Save a situation file to disk..\r\nxp.saveSituation( "Output/situations/filename.sit" )\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_xp.cpp#L599'],
		['xp.setPaused', 'xp.setPaused( integer_flag )', '\r\nReturns: nothing\r\n\r\nPause or Unpause the simulation.\r\n\r\n<code>\r\nxp.setPaused( 1 ) --pause\r\n</code>\r\n\r\n<code>\r\nxp.setPaused( 0 ) --unpause\r\n</code>\r\n\r\nAPI: >= 12.01\r\n', 
		'api_xp.cpp#L420']
		]
};