var gizmo_dox_data = {
	'EVENTS' : [
		['events.foo', 'events.foo()', 'events example supplement']
		],


	'acf' : [
		['acf.getAStabHeading', 'acf.getAStabHeading()', ' Returns: Aritifial stability input: heading(rudder): range: -1 to 1\n'],
		['acf.getAStabPitch', 'acf.getAStabPitch()', ' Returns: Aritifial stability input: pitch: range: -1 to 1\n'],
		['acf.getAStabRoll', 'acf.getAStabRoll()', ' Returns: Aritifial stability input: roll: range: -1 to 1\n'],
		['acf.getAlpha', 'acf.getAlpha()', ' Returns: Aircraft attitude: alpha in degrees.\n'],
		['acf.getAltAgl', 'acf.getAltAgl()', ' Returns: Aircraft altitude above ground level in meters.\n'],
		['acf.getAltMsl', 'acf.getAltMsl()', ' Returns: Aircraft altitude above mean-sea-level in meters.\n'],
		['acf.getAuthor', 'acf.getAuthor()', ' Returns: Aircraft Author from .acf file as string value.\n'],
		['acf.getBeta', 'acf.getBeta()', ' Returns: Aircraft attitude: beta in degrees.\n'],
		['acf.getDescription', 'acf.getDescription()', ' Returns: Description string from ACF file, as set in PlaneMaker.\n'],
		['acf.getEncryptedScripts', 'acf.getEncryptedScripts()', ' Returns: boolean. true if booted from init.lua.aes\n \n API: 11.11+\n'],
		['acf.getFCHeading', 'acf.getFCHeading()', ' Returns: Value of flight control pitch.\n'],
		['acf.getFCPitch', 'acf.getFCPitch()', ' Returns: Value of flight control pitch.\n'],
		['acf.getFCRoll', 'acf.getFCRoll()', ' Returns: Value of flight control pitch.\n'],
		['acf.getFilename', 'acf.getFilename()', ' Returns: Aircraft filename, no folder info.\n Eg: "c4.acf"\n'],
		['acf.getFolder', 'acf.getFolder()', ' Returns: Full path to aircraft folder as string.\n Eg: "/Applications/X-Plane 9 Demo/Aircraft/General Aviation/Cirrus Jet/"\n'],
		['acf.getGS', 'acf.getGS()', ' Returns: Aircraft ground speed in meters per second.\n'],
		['acf.getGearDeployState', 'acf.getGearDeployState()', ' Returns: Aircraft landing gear: actual state. Lua table of values as ratios.\n\n\tEg: gear_state = { acf.getGearDeployState() }\n\tgear_state is now somthing like [ 1, 0.5, 0.75,  1,1,1,  1,1,1, 1 ]\n'],
		['acf.getGearHandleState', 'acf.getGearHandleState()', ' Returns: Aircraft landing gear handle selection request value. 0 = gear up, 1 = gear down.\n'],
		['acf.getHeading', 'acf.getHeading()', ' Returns: Aircraft attitude: magnetic heading in degrees.\n'],
		['acf.getHeadingTrue', 'acf.getHeadingTrue()', ' Returns: Aircraft attitude: true heading in degrees.\n'],
		['acf.getIAS', 'acf.getIAS()', ' Returns: Indicated Air Speed in Meters/Second.\n'],
		['acf.getKIAS', 'acf.getKIAS()', ' Returns: Indicated Air Speed in Knots.\n'],
		['acf.getLat', 'acf.getLat()', ' Returns: latitude of aircraft as decimal number.\n'],
		['acf.getLiveryFolder', 'acf.getLiveryFolder()', ' Returns: Path of Livery folder relative to X-Plane app.\n Eg: "Aircraft/General Aviation/Cirrus Jet/liveries/red"\n \n API >= 11.9.1\n'],
		['acf.getLiveryName', 'acf.getLiveryName()', ' Returns: Name of livery in use.\n Eg: "red"\n \n API >= 11.9.1\n'],
		['acf.getLon', 'acf.getLon()', ' Returns: longitude of aircraft as decimal number.\n'],
		['acf.getP', 'acf.getP()', ''],
		['acf.getP_dot', 'acf.getP_dot()', ''],
		['acf.getPitch', 'acf.getPitch()', ' Returns: pitch of aircraft as decimal number.\n'],
		['acf.getPosition', 'acf.getPosition()', ' Returns: lat,lon,alt_msl\n \n API: >= 11.5.18\n'],
		['acf.getPositionGL', 'acf.getPositionGL()', ' See: gfx.getAircraftPositionGL()\n \n API: >= 11.5.18\n'],
		['acf.getQ', 'acf.getQ()', ''],
		['acf.getQ_dot', 'acf.getQ_dot()', ''],
		['acf.getR', 'acf.getR()', ''],
		['acf.getR_dot', 'acf.getR_dot()', ''],
		['acf.getRelativeFolder', 'acf.getRelativeFolder()', ' Returns: String containing relative path to X-Plane folder, includes trailing slash. All slashes are set to /\n Eg: "Aircraft/General Aviation/Cirrus Jet/"\n'],
		['acf.getRoll', 'acf.getRoll()', ' Returns: latitude of aircraft as decimal number.\n'],
		['acf.getSessionTime', 'acf.getSessionTime()', ' Returns: Number of decimal seconds that the airframe has been flown for this sim-session.\n \n API: 11.4+\n'],
		['acf.getTAS', 'acf.getTAS()', ' Returns: Aircraft true airspeed in meters per second.\n'],
		['acf.getTrack', 'acf.getTrack()', ' Returns: Aircraft track-heading across ground in degrees.\n'],
		['acf.getVS', 'acf.getVS()', ' Returns: Aircraft vertical speed in meters per second.\n'],
		['acf.getYokeHeading', 'acf.getYokeHeading()', ' Returns: pilot heading input as decimal number.\n'],
		['acf.getYokePitch', 'acf.getYokePitch()', ' Returns: pilot pitch input as decimal number.\n'],
		['acf.getYokeRoll', 'acf.getYokeRoll()', ' Returns: pilot roll input as decimal number.\n'],
		['acf.load', 'acf.load( xp_relative_fiilename )', '\neg:  acf.load("Aircraft/Heavy Metal/B747-400 United/United-Air.acf")\n\n \n Load the specified ACF file for the user to fly.\n \n This call will reset the Gizmo engine and can be used to instruct X-Plane to load any valid ACF file inside the X-Plane folder.\n \n API: >= 12.9.14\n \n'],
		['acf.reload', 'acf.reload()', '\n Attempts to reload the users currnetly selected aircraft.\n This can be performed to make certain content changes take effect.\n It also has the effect of rebinding any objects to new datarefs that\n were created between the time that the user first loaded the aircraft\n and invoked the ./scripts/init.lua file and when this function is called.\n']
		],
	'base64' : [
		['base64.decode', 'base64.decode( base64_encoded_string )', ' Returns: plain_text_string\n'],
		['base64.encode', 'base64.encode( plain_text_string )', ' Returns: base64_encoded_string\n']
		],
	'camera' : [
		['camera.getAttitude', 'camera.getAttitude()', ' Returns: pitch,roll,heading\n Eg: p,r,h = camera.getAttitude()\n \n  API: >= 11.11.14\n'],
		['camera.getControl', 'camera.getControl()', ' Ask X-Plane for control of the camera.\n'],
		['camera.getControlGreedy', 'camera.getControlGreedy()', ' Ask X-Plane for control of the camera.\n'],
		['camera.getFOV', 'camera.getFOV()', ' Returns: Current field of view.\n fov = camera.getFOV()\n'],
		['camera.getPosition', 'camera.getPosition()', ' Returns: latitude, longitude, altitude\n latitude, longitude, altitude = camera.getPosition()\n \n API: >= 11.11.14\n'],
		['camera.getPositionGL', 'camera.getPositionGL()', ' Returns: x,y,z\n x,y,z = camera.getPositionGL()\n \n  API: >= 11.11.14\n'],
		['camera.getZoom', 'camera.getZoom()', ' Returns: zoom\n zoom = camera.getZoom()\n'],
		['camera.lookAt', 'camera.lookAt( lat, lot, altitude )', ' Rotate the camera in such a way that it is (hopefully) facing the specified location in the world.\n'],
		['camera.lookAtGL', 'camera.lookAtGL( x,y,z )', ' Rotate the camera in such a way that it is facing the specified location in OpenGL space.\n'],
		['camera.releaseControl', 'camera.releaseControl()', ' Release the Camera back into X-Planes hands.\n'],
		['camera.setAttitude', 'camera.setAttitude( p,r,h )', ' Rotate the camera to face a specified orientation.\n'],
		['camera.setFOV', 'camera.setFOV( fov )', ' Set the field of view for the camera.\n'],
		['camera.setPosition', 'camera.setPosition( lat,lon,alt )', ' Set the camera location in world-coordinates.\n'],
		['camera.setPositionGL', 'camera.setPositionGL( x,y,z )', ' Set the camera position using OpenGL-coordinates.\n'],
		['camera.setZoom', 'camera.setZoom( zoom )', ' Set the zoom value for the camera.\n \n API: 11.4+\n \n']
		],
	'coroutine' : [
		['coroutine.read_me', 'coroutine.read_me()', ' \n']
		],
	'debug' : [
		['debug.read_me', 'debug.read_me()', '']
		],
	'dref' : [
		['dref.getArraySize', 'dref.getArraySize( dref_id )', ' Returns: array_element_count\n \n Number of array elements the dref supports.\n \n API: >= FIXME: dref.getArraySize(..): empty hook\n \n'],
		['dref.getBytes', 'dref.getBytes( dataref_id, start_at, number_to_fetch )', ' Returns: Lua String\n \n Eg: \n foo = dref.getBytes( dr_id, 1, 1024 )\n print( foo )\n \n \n'],
		['dref.getDataref', 'dref.getDataref( string_dataref_name )', ' Returns: dataref_id\n \n Eg: dr_ice_switch = dref.getDataref("sim/cockpit/switches/ice")\n \n \n Does NOT accept part numbers:\n This will NOT work: dref.getDataref( "sim/dataref[99999]" )\n \n \n'],
		['dref.getFloat', 'dref.getFloat( dataref_id )', ' Returns: value of dataref_id decimal number\n See xp.getDataref("sim/foo") and xp.newDataref("custom/dataref") for more info.\n'],
		['dref.getFloatV', 'dref.getFloatV( dataref_id, start_at, number_to_fetch )', ' Returns: multiple values for dataref_id as decimal numbers\n \n See xp.getDataref("sim/foo") and xp.newDataref("custom/dataref") for more info.\n start_at refers to the part number in sim/dataref[99]\n \n In X-Plane, OBJ8 and C, part numbers start at 0.\n In Lua, part numbers start at 1.\n \n For this reason, the start_at parameter also starts at 1.\n \n If you want to get sim/dataref[0] use:\n value = xp.getFloatv( dataref_id, 1, 1 )\n \n We ask Gizmo to get us one value, starting at the first item.\n \n This seems a little bit annoying, but when you start using your tables of values\n with the rest of Luas functions you will understand why there is a little "shift"\n here when we push numbers in and out of X-Planes dataref systems.\t\n \n \n value = {}  -- Table to hold the array\n value    =    { xp.getFloatV(dataref_id, 1, n)}\n \n \n'],
		['dref.getInt', 'dref.getInt( dataref_id )', ' Returns: value of dataref_id Integer number\n See dref.getDataref("sim/foo") and dref.newDataref("custom/dataref") for more info.\n'],
		['dref.getIntV', 'dref.getIntV( dataref_id, start_at, number_to_fetch )', ' Returns: multiple values for dataref_id as numbers\n \n See xp.getDataref("sim/foo") and xp.newDataref("custom/dataref") for more info.\n start_at refers to the part number in sim/dataref[99]\n \n In X-Plane, OBJ8 and C, part numbers start at 0.\n In Lua, part numbers start at 1.\n \n For this reason, the start_at parameter also starts at 1.\n \n If you want to get sim/dataref[0] use:\n value = xp.getFloatv( dataref_id, 1, 1 )\n \n We ask Gizmo to get us one value, starting at the first item.\n \n This seems a little bit annoying, but when you start using your tables of values\n with the rest of Luas functions you will understand why there is a little "shift"\n here when we push numbers in and out of X-Planes dataref systems.\t\n \n \n value = {}  -- Table to hold the array\n value    =    { xp.getFloatV(dataref_id, 1, n)}\n \n \n \n'],
		['dref.getString', 'dref.getString( dataref_id )', ' Returns: Lua String\n \n Eg: \n foo = dref.getString( dr_id )\n print( foo )\n \n Note: Max string length is currently hard-limited to 1024 bytes.\n \n API: >= 11.10\n \n'],
		['dref.newByteArray', 'dref.newByteArray( string_dataref_name )', ' Returns: dref_id\n \n API: >= 11.8\n \n'],
		['dref.newFloat', 'dref.newFloat( dataref_name, OPT_hook_event_name )', ' Returns: dref_id\n \n API: >= 11.8\n \n Creates a new floating-point (decimal number) dataref.\n hook_event_name is optional and can be used to make Gizmo notify your code when your dataref changes, you do not have to \'watch\' or poll it.\n \n function hook_event_name_OnRead()\n return acf.getIAS() * 10\n end\n \n function hook_event_OnWrite( newValue )\n sound.say("dataref changed")\n end \n \n'],
		['dref.newFloatArray', 'dref.newFloatArray( string_dataref_name )', ' Returns: dref_id\n \n API: >= 11.8\n \n'],
		['dref.newInt', 'dref.newInt( dataref_name, OPT_hook_event_name )', ' Returns: dref_id\n \n Creates a new integer (no decimal allowed) dataref.\n \n API: >= 11.8\n \n \n hook_event_name is optional and can be used to make Gizmo notify your\n code when your dataref changes, you do not have to \'watch\' or poll it.\n \n function hook_event_name_OnRead()\n return acf.getIAS() * 10\n end\n \n function hook_event_OnWrite( newValue )\n sound.say("dataref changed")\n end\n'],
		['dref.newIntArray', 'dref.newIntArray( string_dataref_name )', ' Returns: dref_id\n \n API: >= 11.8\n \n'],
		['dref.publish', 'dref.publish( string_dataref_name )', 'Returns: nothing\nInforms DataRefEditor that a dataref with the specified name exists.\n\nThe dataref does not need to exist.\nThe dataref does not need to belong to Gizmo64.\n\nAPI: >= 13.07.05\n\n'],
		['dref.setArraySize', 'dref.setArraySize( dref_id, new_size )', ' Returns: nothing\n \n Only valid when used on a custom-dataref that is owned and managed by Gizmo. Hooked datarefs manage their own size.\n \n API: >= 11.8\n \n'],
		['dref.setAutoPublish', 'dref.setAutoPublish( boolean )', 'Returns: nothing\n\nToggles auto-publish feature of DRE for finer control of large projects.\n\nAPI: >= 13.07.05\n'],
		['dref.setBytes', 'dref.setBytes( dataref_id, start_at, byte_string_var )', '\n Eg: dref.setBytes( dr_id, 1, "This is a new value payload." )\n \n'],
		['dref.setFloat', 'dref.setFloat( dataref_id, value )', ' Push a new value into a dataref. Value is a decimal number.\n vvi = vvi * 2 \n dref.setFloat( dref_VVI, vvi )\n'],
		['dref.setFloatV', 'dref.setFloatV( dataref_id, start_at, value1, value2, value3, ... )', ' OR\n tmp = { value1, value2, value3, ...., value10 }\n dref.setFloatV( dataref_id, start_at, tmp )\n \n Please also read the notes for dref.getFloatV() and dref.getIntV() functions.\n \n dref.setFloatArray(..) does the same things.\n'],
		['dref.setInt', 'dref.setInt( dataref_id, value )', ' Push a new value into a dataref. Value is a decimal number.\n vvi = vvi * 2 \n dref.setFloat( dref_VVI, vvi )\n'],
		['dref.setIntV', 'dref.setIntV( dataref_id, start_at, value1, value2, value3, ... )', ' OR\n tmp = { value1, value2, value3, ...., value10 }\n dref.setIntV( dataref_id, start_at, tmp )\n \n Please also read the notes for dref.getFloatV() and dref.getIntV() functions.\n \n dref.setIntArray(..) does the same things.\n'],
		['dref.setString', 'dref.setString( dataref_id, byte_string_var )', ' \n Eg: dref.setString( dr_id, "This is a new value payload." )\n \n']
		],
	'event' : [
		['event.register', 'event.register( string_event_name, string_callback_function_name )', '\n Register an event function.\n \n \n Eg:\n \n function main2()\n --do stuff\n end\n \n event.register("main", "main2")\n \n \n \n API >= 12.02.01\n'],
		['event.unregister', 'event.unregister( string_event_name, string_callback_function_name )', ' \n Register an event function.\n \n \n Eg:\n \n function main2()\n --do stuff\n end\n \n event.register("main", "main2")\n \n \n \n API >= 12.02.01\n']
		],
	'fmc' : [
		['fmc.clear', 'fmc.clear( index_number )', ' Clears the FMC step identified by index_number, eg: 2.\n'],
		['fmc.clearAll', 'fmc.clearAll()', ' Clears all programmed FMC entries.\n \n (Clears 0-99)\n'],
		['fmc.getCount', 'fmc.getCount()', ' Returns: Number of steps programmed into the FMC.\n'],
		['fmc.getDestination', 'fmc.getDestination()', ' Returns: fmc_index_id telling us which leg of the FMC flight plan the pilot has currently selected as the destination.\n'],
		['fmc.getDisplayed', 'fmc.getDisplayed()', ' Returns: fmc_index_id telling us which item the user is currently displaying on the FMC.\n'],
		['fmc.getGpsNavAid', 'fmc.getGpsNavAid()', ' Returns: The current navaid_id that the GPS is programmed for.\n'],
		['fmc.getGpsNavAidType', 'fmc.getGpsNavAidType()', ' Returns: navaid_type value, see nav.api for more.\n'],
		['fmc.getInfo', 'fmc.getInfo( fmc_index_id )', ' Returns: navaid_type, lat, lon, alt, "ICAO_ID", navaid_id\n Eg:\n local fmc_info = { fmc.getInfo( 1 ) }\n \n API: >= 11.9 Changes the order of the returned parameters.\n Old: navaid_type, "ICAO_ID", navaid_id, lat, lon, alt\n New: navaid_type, lat, lon, alt, "ICAO_ID", navaid_id\n \n'],
		['fmc.setDestination', 'fmc.setDestination( fmc_index_id )', ' Controls which leg of the flight plan the FMC will fly towards.\n'],
		['fmc.setDisplayed', 'fmc.setDisplayed( fmc_index_id )', ' Controls which leg of the flight plan is display on the FMC/FMS.\n'],
		['fmc.setInfo', 'fmc.setInfo( fmc_index_id, navaid_id, altitude )', ' Changes an entry in the FMS. The destination coordinates will be updated to those of the navaid_id passed in and the altitude specified.\n Eg:\n Use this only for airports, fixes, and radio-beacon navaids. \n Currently the X-Plane FMC/FMS can only support VORs and NDBs. Use the api functions to fly to a lat/lon.\n'],
		['fmc.setLatLon', 'fmc.setLatLon( fmc_index_id, Latitude, Longitude, altitude )', ' Changes an entry in the FMS. The destination coordinates will be updated to those of the latitude, longitude and altitude specified.\n']
		],
	'font' : [
		['font.drawString', 'font.drawString( font_id, string_to_draw, OPT_x,OPT_y )', ' Returns: nothing\n \n Usage:\n f = font.getFont( xp.getFolder() .. "Courier New.ttf", 36 )\n \n function OnDraw_Windows()\n\tfont.drawString( f, "Lorem ipsum delorem.", 200, 500 )\n end\n\n \nAPI >= 11.12.13 \n \n'],
		['font.getFont', 'font.getFont( full_path_to_font_file, font_size )', ' Returns: font_id\n \n Usage:\n f = font.getFont( xp.getFolder() .. "Courier New.ttf", 36 )\n\nAPI >= 11.12.13\n'],
		['font.getStringWidth', 'font.getStringWidth( font_id, string )', ' Returns: horizontal length of string in decimal pixels\n'],
		['font.measureString', 'font.measureString( font_id, string )', ' Returns: horizontal length of string in decimal pixels\n']
		],
	'gfx' : [
		['gfx.bakeTerrainMap', 'gfx.bakeTerrainMap( texture_id )', ' Bakes a terrain texture image into the desired texture ID. Drawing is handled by your own code.\n'],
		['gfx.clearFBO', 'gfx.clearFBO()', ' \n Issues OpenGL commands to clear the current FBO drawing buffers.\n \n See gfx.useFBO(..)\n \n API >= 12.1.2\n \n'],
		['gfx.clearMaskingTape', 'gfx.clearMaskingTape()', '\n This function is useful for drawing gauges.\n See gfx.setMaskingTape(..) for more info.\n'],
		['gfx.clearTexture', 'gfx.clearTexture( texture_id, widht, height, bpp )', ' \n This function will erase an OpenGL texture slot.\n \n width and height should be power of 2 numbers for maximum compatability.\n \n bpp may be either 32 or 24.\n\t32 will upload a black texture with a clear alpha channel to the texture.\n\t24 will upload a black texture with no alpha channel data to the texture.\n \n'],
		['gfx.disableReflectionDrawingCalls', 'gfx.disableReflectionDrawingCalls()', ' Unregister your scripts from X-Planes reflection-drawing calls.\n'],
		['gfx.drawArc', 'gfx.drawArc( radius, segments, begin_degrees, end_degrees )', ' \n Draws an arc line, use gl.api to setup line styling parameters.\n \n radius in pixels\n segments controls the subdivision level for the arc drawing, higher = smoother.\n begin and end_degrees start at 12\'oclock and wind clockwise.\n \n'],
		['gfx.drawBox', 'gfx.drawBox( left,bottom,width,height )', '\n Draws a box on the screen, does not fill it.\n Use gl.api to modify line styling params.\n \n'],
		['gfx.drawCircle', 'gfx.drawCircle( radius,segments )', ' \n Draws a circular line, use gl.api to setup line styling parameters.\n \n radius in pixels\n segments controls the subdivision level for the arc drawing, higher = smoother.\n \n'],
		['gfx.drawFilledArc', 'gfx.drawFilledArc( radius, segments, begin_degrees, end_degrees )', ' \n Draws an arc line, use gl.api to setup line styling parameters.\n \n radius in pixels\n segments controls the subdivision level for the arc drawing, higher = smoother.\n begin and end_degrees start at 12\'oclock and wind clockwise.\n \n'],
		['gfx.drawFilledBox', 'gfx.drawFilledBox( left,bottom,width,height )', ' \n Draws a box using raw OpenGL functions.\n Use gfx.setColor( r,g,b, a ) to control color.\n User gfx.texOff() to turn texturing on or off.\n \n'],
		['gfx.drawFilledCircle', 'gfx.drawFilledCircle( radius,segments )', '\n Draws a filled circle, use gl.api to setup styling parameters.\n \n radius in pixels\n segments controls the subdivision level for the arc drawing, higher = smoother.\n \n'],
		['gfx.drawLine', 'gfx.drawLine( a,b, x,y )', ' \n Draws a line, use gl.api to setup line styling parameters.\n \n\t--Draw a line from the bottom left corner of the screen/texture\n\t--To approx mid-point. Assuming screen/texture is 1024^2\n \n\tgfx.drawLine( 0,0, 512,512 );\n\n'],
		['gfx.drawObject', 'gfx.drawObject( object_id, lat,lon,alt, p,r,h )', ' Draw an object in World Coordinates. Lat/Lon/Alt.\n'],
		['gfx.drawObjectEx', 'gfx.drawObjectEx( object_handle, x,y,z, p,r,h )', ' Draws using X-Planes OBJ8 calls _immediately_, does not force you through Gizmos Queue.\n'],
		['gfx.drawObjectGL', 'gfx.drawObjectGL( object_handle, x,y,z, p,r,h )', ' Draws using OpenGL coords.\n'],
		['gfx.drawRadial', 'gfx.drawRadial( heading, radius, length )', '\n Draws a radial line, as used on gauge faces for tick marks, properly rotated to radiate from center.\n'],
		['gfx.drawString', 'gfx.drawString( string, [x,y] )', ' Draws a string using the default X-Plane font.\n No other font is available for this function.\n x,y parameters are optional, 0,0 is the default if not specified.\n'],
		['gfx.drawTranslucentDarkBox', 'gfx.drawTranslucentDarkBox( left,bottom,width,height )', ' \n Draws a transparent dark box using the built in Plugin SDK function: XPLMDrawTranslucentDarkBox(...)\n \n'],
		['gfx.enableReflectionDrawingCalls', 'gfx.enableReflectionDrawingCalls()', ' Register your scripts with X-Planes reflection-drawing calls.\n This results in your drawing callbacks being called many times.\n'],
		['gfx.getAircraftPositionGL', 'gfx.getAircraftPositionGL()', 'Returns: x,y,z,p,r,h\nx,y,z,p,r,h = gfx.getAircraftPositionGL()\n'],
		['gfx.getDrawDebugPath', 'gfx.getDrawDebugPath()', 'Returns: true or nil\nCan be used to determine whether to draw additional debug data around the aircraft.\n'],
		['gfx.getFPS', 'gfx.getFPS()', ' Returns: Frames-per-second value, eg: 50.1\n'],
		['gfx.getFrameSpeed', 'gfx.getFrameSpeed( target_speed_per_second )', 'Returns: Distance to move this-frame in OpenGL-space to achieve desired speed per second given.\n'],
		['gfx.getIsViewInsideCockpit', 'gfx.getIsViewInsideCockpit()', ' Returns: boolean\n\n\tBUG FIX: gfx.isViewInsideCockpit() -> gfx.getIsViewInsideCockpit()\n\n \n API: >= 13.06.24\n \n'],
		['gfx.getM', 'gfx.getM()', ' gfx.getFRP()\n Returns: Special multiplier variable^. \n object_speed_for_this_frame = speed_in_meters * gfx.getM() \n \n ^ Data comes from: ( sim/operation/misc/frame_rate_period )\n'],
		['gfx.getScreenSize', 'gfx.getScreenSize()', ' Returns: width,height\n local sw,sh = gfx.getScreenSize()\n'],
		['gfx.getStringWidth', 'gfx.getStringWidth( "string" )', ' Returns: horizontal length of string in decimal pixels\n'],
		['gfx.getTexture_GizmoLogo', 'gfx.getTexture_GizmoLogo()', ' Returns: texture_id for Gizmo logo texture.\n'],
		['gfx.getTexture_GizmoUI', 'gfx.getTexture_GizmoUI()', ' Returns: texture_id for Gizmo User Interface elements texture.\n'],
		['gfx.getTexture_LiteMap', 'gfx.getTexture_LiteMap()', ' Returns: texture_id for LiteMap texture, not much use with OBJ8 detailed aircraft.\n'],
		['gfx.getTexture_LuaLogo', 'gfx.getTexture_LuaLogo()', ' Returns: texture_id for Lua logo texture.\n'],
		['gfx.getTexture_Paint', 'gfx.getTexture_Paint()', ' Returns: texture_id for Paint texture, not much use with OBJ8 detailed aircraft.\n'],
		['gfx.getTexture_UI', 'gfx.getTexture_UI()', ' Returns: texture_id for X-Plane GUI UI texture. \n Useful to restore state or draw custom widgets.\n'],
		['gfx.getTexture_XALogo', 'gfx.getTexture_XALogo()', ' Returns: texture_id for X-Aviation logo texture.\n'],
		['gfx.loadObject', 'gfx.loadObject( [object_id], "Aircraft/General Aviation/Cirrus Jet/objects/cockpit.obj" )', ' Returns: object_id or nil if object could not be loaded by X-Plane.\n \n API: >= 13.4.5\n'],
		['gfx.loadPng', 'gfx.loadPng( [texture_id], "/full/path/to/texture.png" )', ' Returns: texture_id\n Load a PNG file into the specified texture slot.\n'],
		['gfx.loadTga', 'gfx.loadTga( [texture_id], "/full/path/to/texture.tga" )', ' Returns: texture_id\n Load a TGA file into the specified texture slot. Acceptable formats: 24 or 32 bit. Do not use RLE encoding.\n'],
		['gfx.loadTgaBlob', 'gfx.loadTgaBlob( texture_id, blob, blob_size )', ' Load a TGA blob into the specified texture slot. Acceptable formats: 24 or 32 bit. Do not use RLE encoding.\n This can be used to download a texture off the disk or bake one in RAM, etc.\n'],
		['gfx.localToWorld', 'gfx.localToWorld( x,y,z )', ' Returns: lat,lon,alt\n Eg:\n lat,lon,alt = gfx.localToWorld( x,y,z )\n'],
		['gfx.matchAircraftOrientation', 'gfx.matchAircraftOrientation()', ' Performs a GL translate and rotate so that your drawing matches the aircraft exactly. \n From here you can easily translate to the nose or a wing tip.\n Note: You MUST wrap this function in calls to gl.PushMatrix() before you call and gl.PopMatrix() after you call. \n If you do not you will corrupt the drawing stack and the result is undefined. Probably junk on screen.\n'],
		['gfx.measureString', 'gfx.measureString( "string" )', ' Returns: horizontal length of string in decimal pixels\n'],
		['gfx.newFBO', 'gfx.newFBO( texture_id, width, height )', ' Returns: fbo_id\n Creates a new Frame-Buffer-Object that can be used to "render to texture".\n See also gfx.useFBO(..) and gfx.releaseFBO(..)\n'],
		['gfx.newTexture', 'gfx.newTexture()', ' Returns: texture_id\n Creates a blank texture slot that can be used to load a texture into or create an FBO with.\n'],
		['gfx.rebindFBO', 'gfx.rebindFBO( fbo_id..... )', ' BROKEN: gitbug:12\n'],
		['gfx.releaseFBO', 'gfx.releaseFBO( fbo_id )', ' \n Release active FBO and return all drawing targets to normal.\n \n Tweaked to no longer require any FBO argument: 12.12.28\n \n Retweaked to require an FBO argument so we can do mipmap gen.\n \n'],
		['gfx.setColor', 'gfx.setColor( r,g,b, a )', ' \n All arguments are 0-1\n Set the color to red, 75% opacity.\n gfx.setColor( 1,0,0, 0.75 )\n \n API >= 12.1\n gfx.setColor( {colors} )\n \n Eg:\n local red = {1,0,0, 1}\n gfx.setColor( red )\n \n'],
		['gfx.setMaskingTape', 'gfx.setMaskingTape( x,y, w,h ) //FIXME: mantis/118', ' \n This function is useful for drawing gauges.\n It will setup a masked region for you to draw inside of.\n All drawing outside of the masked region will be ignored.\n \n (Requests an OpenGL clipping box using glScissor(..))\n \n Many thanks to x-alberto@x-pilot for the code submission.\n http://forums.x-pilot.com/index.php?topic=1502.msg15474#msg15474\n\n \n API: >= 11.5.6\n \n'],
		['gfx.setState', 'gfx.setState( fog, numTexUnits, lighting, alphaTest, alphaBlend, depthTest, depthWrite )', ' Set graphics state using XPLMSetGraphicsState(..) Most flags are 0 or 1.\n numTexUnits accepts > 1\n'],
		['gfx.setTerrainMapMode_Predictive', 'gfx.setTerrainMapMode_Predictive()', ' \n Switch the coloring mode of the terrain map renderer into predictive color rendering.\n'],
		['gfx.setTerrainMapMode_Relative', 'gfx.setTerrainMapMode_Relative()', ' Switch the coloring mode of the terrain map renderer into relative color rendering.\n'],
		['gfx.setTerrainMapMode_Synthetic', 'gfx.setTerrainMapMode_Synthetic()', ' Switch the coloring mode of the terrain map renderer into Synthetic color rendering.\n'],
		['gfx.setTerrainMapMode_Topographic', 'gfx.setTerrainMapMode_Topographic()', ' Switch the coloring mode of the terrain map renderer into FAA topographic color rendering.\n'],
		['gfx.setTerrainMapOption_LookAhead', 'gfx.setTerrainMapOption_LookAhead( integer_flag )', ' Puts the map into "offset scan" mode, the airframe is approx 1/3 from the bottom edge of the map.\n'],
		['gfx.setTerrainMapOption_NorthUp', 'gfx.setTerrainMapOption_NorthUp( integer_flag )', ' Locks the map to North-Up mode, you will need to render the users vehicle symbol rotating for the map to make much sense.\n'],
		['gfx.setTerrainMapOption_Range', 'gfx.setTerrainMapOption_Range( meters_between_sample_points )', ' range * size = scan area.\n'],
		['gfx.setTerrainMapOption_RefreshRate', 'gfx.setTerrainMapOption_RefreshRate( rate_value )', ' How agressively do we try and build the map data. \n CONFIRM: I think this controls how many scan-lines of the map we try and generate per sim frame.\n The map system is sliced into shards so that low end machines dont "chug" when the map is sampling.\n'],
		['gfx.setTerrainMapOption_Size', 'gfx.setTerrainMapOption_Size( number_of_samples_along_an_edge )', ' scan area for the map = size * range\n This directly affects the OpenGL texture size. Default is 128. \n Valid values: 32,64,128,256,512,1024 etc\n Map texture is sampled and rendered "square".\n'],
		['gfx.texOff', 'gfx.texOff()', ' Turn OpenGL texturing off.\n'],
		['gfx.texOn', 'gfx.texOn()', ' Turn OpenGL texturing on.\n'],
		['gfx.useFBO', 'gfx.useFBO( fbo_id )', ' Makes an FBO object active and redirects all OpenGL drawing into that FBO. \n All drawing will be saved into the texture nominated during gfx.newFBO(..) \n You MUST call gfx.releaseFBO() when you are finished drawing.\n'],
		['gfx.useTexture', 'gfx.useTexture( texture_id )', ' Sets your nominated texture as "active" for OpenGL drawing operations.\n'],
		['gfx.worldToLocal', 'gfx.worldToLocal( lat,lon,alt )', ' Convert world-space coordinates, from a real map, into OpenGL drawing coordinates, for use in a Game Engine.\n This function makes no attempt to check if your request makes sense, if you ask for coordinates on the other side of the planet the result is undefined. Good luck.\n x,y,z = gfx.worldToLocal( lat,lon,alt )\n']
		],
	'gizmo' : [
		['gizmo.activate', 'gizmo.activate( serial_number, [write_to_disk] )', '\n Disables the Gizmo nagware dialog if the serial number is valid.\n\n This function is targeted at users of freeware or "lab users" that are using Gizmo for private projects.\n\n See also: acf.auth(...) for Payware Vendors.\n\n'],
		['gizmo.disable', 'gizmo.disable( "filename" )', '\n Basically the same as the built in Lua dofile() except we work with encrypted files inside the firmware folder.\n\n EXPERIMENTAL\n\n API >= 13.05.23\n'],
		['gizmo.dofile', 'gizmo.dofile( "filename" )', '\n Basically the same as the built in Lua dofile() except we work with encrypted files.\n\n EXPERIMENTAL\n\n API >= 11.11.03\n'],
		['gizmo.dofirmware', 'gizmo.dofirmware( "filename" )', '\n Basically the same as the built in Lua dofile() except we work with encrypted files inside the firmware folder.\n\n EXPERIMENTAL\n\n API >= 12.01.29\n'],
		['gizmo.getActivated', 'gizmo.getActivated()', '\n Returns: boolean\n\n True if Gizmo is registered.\n This can be by: User Serial -or- Aircraft Project Key-File.\n\n API: >= 11.5.18\n\n'],
		['gizmo.getBuildDate', 'gizmo.getBuildDate()', ' Returns: String containing date that the .xpl file was compiled.\n Eg:\n date_built = gizmo.getBuildDate()\n'],
		['gizmo.getDisabledEventNames', 'gizmo.getDisabledEventNames()', ' Returns: Table of strings containing all disabled event names.\n Eg:\n disabled_events = { gizmo.getDisabledEventNames() }\n'],
		['gizmo.getPossibleEventNames', 'gizmo.getPossibleEventNames()', ' Returns: Table of strings containing all possible event names.\n Eg:\n possible_events = { gizmo.getPossibleEventNames() }\n'],
		['gizmo.getRegisteredEmail', 'gizmo.getRegisteredEmail()', ' Returns: Email address of user that registered.\n\n API: >= 11.10.24\n'],
		['gizmo.getVersion', 'gizmo.getVersion()', ' Returns: "Human" friendly version string.\n'],
		['gizmo.getVersionFull', 'gizmo.getVersionFull()', ' Returns: Machine friendly version number as Integer.\n Eg: 201103141234 - 2011-03-14-1234\n'],
		['gizmo.reboot', 'gizmo.reboot()', ' Reboot the Gizmo script engine, same effect as the menu item.\n'],
		['gizmo.resetEventMap', 'gizmo.resetEventMap()', ' Reset the table of disabled events. Causes all events to be allowed another try.\n'],
		['gizmo.resetFirmware', 'gizmo.resetFirmware()', ' Reset the firmware to a copy from disk.\n (Gizmo64.plugin/scripts/firmware.lua)\n'],
		['gizmo.setDebugVerbose', 'gizmo.setDebugVerbose( flag )', ' Increase debugging messages that get in your face with dialog boxes etc.\n Good for development, not so good for shipping products sometimes.\n'],
		['gizmo.sleep', 'gizmo.sleep( duration_in_milliseconds, [power_saver] )', ' Causes the main X-Plane thread to sleep for N ms.\n\n Passing a second argument sets the Gizmo "Global Power Saver" sleep value.\n This value is NOT reset automatically when Gizmo reboots the script engine.\n This option is intended for developers and those wanting greater control over X-Planes CPU priority.\n\n API: >= 11.1 for gizmo.sleep(duration)\n API: >= 11.11 for gizmo.sleep(duration, power_saver)\n\n']
		],
	'gl' : [
		['gl.read_me', 'gl.read_me()', '\n Gizmo provides access to LuaGL, a Lua binding for OpenGL.\n This provides access to any GL commands you want to execute.\n \n You are not constrained by only what\'s in the gfx.api.\n \n http://luagl.sourceforge.net/#ref\n \n']
		],
	'glu' : [
		['glu.read_me', 'glu.read_me()', ' \n Gizmo provides access to LuaGL, a Lua binding for OpenGL.\n This provides access to any GL commands you want to execute.\n \n You are not constrained by only what\'s in the gfx.api.\n \n http://luagl.sourceforge.net/#ref\n \n API: >= 11.5.25\n \n']
		],
	'gui' : [
		['gui.blur', 'gui.blur( gui_widget_id )', ' \n Removes keyboard focus.\n \n API: >= 11.8.2\n'],
		['gui.getCustomWidgetMouseXY', 'gui.getCustomWidgetMouseXY( )', ' Returns: x,y for mouse corrected for use in Custom Widget graphics.\n \n API: > 11.5.15\n'],
		['gui.getWidgetSize', 'gui.getWidgetSize( gui_widget_id )', ' \n Returns: left,top,width,height\n \n API: >= 11.5.29\n'],
		['gui.getWidgetValue', 'gui.getWidgetValue( gui_widget_id )', ' Returns: value of gui_widget_id\n \n Basic functionality available since 11.1\n \n Enhanced in >= 11.9\n \n Returns: boolean for checkbox or radio-button widgets, text value for others.\n'],
		['gui.getWindowList', 'gui.getWindowList()', ' Returns: table of strings containing the names of all GUI Windows Gizmo is managing.\n window_list = { gui.getWindowList() }\n'],
		['gui.getWindowSize', 'gui.getWindowSize( gui_window_id )', ' \n Returns: left,top,width,height\n \n API: >= 11.5.29\n'],
		['gui.hideWidget', 'gui.hideWidget( gui_widget_id )', ''],
		['gui.hideWindow', 'gui.hideWindow( gui_window_id )', ''],
		['gui.newButton', 'gui.newButton( gui_window_id, "MyClickHandlerFunction", "Button Caption", left, top, width )', ' Returns: gui_widget_id\n When clicked the function MyClickHandlerFunction_OnClick() will be called.\n'],
		['gui.newCheckbox', 'gui.newCheckbox( gui_window_id, "MyClickHandlerFunction", "Button Caption", left, top, width )', ' Returns: gui_widget_id\n When clicked the function MyClickHandlerFunction_OnClick() will be called.\n'],
		['gui.newCustomWidget', 'gui.newCustomWidget( gui_window_id, "EventHandlerFunction", left, top, width, height )', ' Returns: gui_widget_id\n'],
		['gui.newLabel', 'gui.newLabel( gui_window_id, "EventHandlerFunction", "Button Caption", left, top, width )', ' Returns: gui_widget_id\n'],
		['gui.newListView', 'gui.newListView( gui_window_id, "EventHandlerFunction", "Button Caption", left, top, width )', ' Returns: gui_widget_id\n'],
		['gui.newPasswordBox', 'gui.newPasswordBox( gui_window_id, "EventHandlerFunction", "Button Caption", left, top, width )', ' Returns: gui_widget_id\n'],
		['gui.newRadioButton', 'gui.newRadioButton( gui_window_id, "MyClickHandlerFunction", "Button Caption", left, top, width )', ' Returns: gui_widget_id\n When clicked the function MyClickHandlerFunction_OnClick() will be called.\n \n API: Killed in >= 13.4.6\n \n http://bugs.x-plugins.com/view.php?id=136\n \n'],
		['gui.newScreen', 'gui.newScreen( gui_window_id, "MyClickHandlerFunction", "Button Caption", left, top, width )', ' Returns: gui_widget_id\n When clicked the function MyClickHandlerFunction_OnClick() will be called.\n I think this is for some kind of SDK-named sub-window. The naming sucks. Totally ambiguous/confusing.\n'],
		['gui.newSubWindow', 'gui.newSubWindow( gui_window_id, "MyClickHandlerFunction", left, top, width, height )', ' Returns: gui_widget_id\n \n When clicked the function MyClickHandlerFunction_OnClick() will be called.\n'],
		['gui.newTextBox', 'gui.newTextBox( gui_window_id, "EventHandlerFunction", "Box Contents", left, top, width )', ' Returns: gui_widget_id\n'],
		['gui.newWindow', 'gui.newWindow( "WindowIdentifier" )', ' Returns: gui_window_id\n\n Gizmo will look for and automatically call WindowIdentifier_OnCreate() to allow defered and somewhat neater code\n for creating the actual window layout.\n \n'],
		['gui.setCustomWidgetClipping', 'gui.setCustomWidgetClipping( gui_widget_id, [0|1] )', ' \n Sets GL clipping on/off for custom widget bounds.\n \n API: >= 11.11\n'],
		['gui.setFocus', 'gui.setFocus( gui_widget_id )', '\n Set keyboard focus.\n \n API: >= 11.8.2\n'],
		['gui.setPasswordMode', 'gui.setPasswordMode( gui_widget_id, int_flag )', ' Control the password-hiding mode of a text field.\n'],
		['gui.setWidgetSize', 'gui.setWidgetSize( gui_widget_id, left, top, width, height )', ' \n API: >= 11.5.29\n'],
		['gui.setWidgetValue', 'gui.setWidgetValue( gui_widget_id, "new value" )', ' Sets the value of the target widget to the value you pass in.\n Values can be strings or numbers, other data will probably fail.\n \n Basic functionality available since 11.1\n \n Enhanced in >= 11.9\n \n Now accepts 0/1 for checkbox or radio-button widgets to modify their state.\n \n'],
		['gui.setWindowCaption', 'gui.setWindowCaption( gui_window_id, "My Window Caption" )', ''],
		['gui.setWindowSize', 'gui.setWindowSize( gui_window_id, left, top, width, height )', ''],
		['gui.showWidget', 'gui.showWidget( gui_widget_id )', ' Show target Widget.\n'],
		['gui.showWindow', 'gui.showWindow( gui_window_id )', ' Show target Window.\n']
		],
	'hash' : [
		['hash.md5File', 'hash.md5File( "filename" )', ' Returns: string containing md5 hash of file.\n'],
		['hash.md5String', 'hash.md5String( "filename" )', ' Returns: string containing md5 hash of file.\n']
		],
	'http' : [
		['http.get', 'http.get( url, callback_function_name )', ' Eg:\n function cb_http_get_complete( data, url, size )\n sound.say(\'dl complete: \' .. url)\n end\n \n url = \'http://example.com/foo.htm\'\n sound.say( \'fetch: \' .. url )\n http.get( url, \'cb_http_get_complete\' )\n'],
		['http.post', 'http.post( url, callback_function_name, post_payload )', ' Eg:\n payload = string.format( "status=%s", http.urlEncode("this is a status update") ) \n \n See HTTP POST format details for more info. \n It\'s like a query string but the content isn\'t auto encoded by a browser.\n'],
		['http.resetProxy', 'http.resetProxy()', ' Resets internal proxy variables. cURL library will default to using ENV variables if any or no proxy at all.\n'],
		['http.setProxy', 'http.setProxy( "http://user:pass@proxy.host.lan:8001/" )', ' Send a blank string to force use of no proxy for all connections.\n Use http.resetProxy() to reset to default.\n'],
		['http.urlDecode', 'http.urlDecode( data, data_length )', ' Returns: url-decoded string\n See http.urlEncode for usage example.\n'],
		['http.urlEncode', 'http.urlEncode( data, data_length )', ' Returns: url-encoded string\n Eg:\n s = "raw string data to send."\n e = http.urlEncode( s, #s )\n http.post(url, cb_function, "data=" .. e)\n']
		],
	'io' : [
		['io.read_me', 'io.read_me()', '\n Gizmo exposes a sandboxed set of Lua Stadnard "io" library functions.\n See the Lua programming references available via Google for more information.\n \n IO Operations are "Sandboxed" inside the X-Plane folder.\n You may access any file _inside_ the X-Plane folder.\n \n The sandbox applies to the following functions:\n\tio.open, os.remove, os.rename\n \n All other functions behave as documented in Lua manuals.\n \n']
		],
	'logging' : [
		['logging.clear', 'logging.clear()', 'Clear the log records.\n'],
		['logging.debug', 'logging.debug( "debug message" )', ' This function writes a message to the X-Plane Log.txt file.\n'],
		['logging.error', 'logging.error( "error message" )', ' This function writes a message to the X-Plane Log.txt file.\n\nAPI: >= 12.2.1\n'],
		['logging.getMessages', 'logging.getMessages()', ' returns: table containing all logged messages.\n \n API: >= 12.2.1\n'],
		['logging.warning', 'logging.warning( "debug message" )', ' This function writes a message to the X-Plane Log.txt file.\n']
		],
	'map' : [
		['map.bake', 'map.bake( map_id, texture_id )', ' Returns: nothing\n \n API: >= 11.x\n \n'],
		['map.newMap', 'map.newMap()', ' Returns: map_id\n \n API: >= 11.x\n \n'],
		['map.setColorMode', 'map.setColorMode( map_id, map.color_mode )', ' Returns: nothing\n \n See color modes for availanle options.\n \n API: >= 11.x\n \n'],
		['map.setLookAhead', 'map.setLookAhead( map_id, look_ahead )', ' Returns: nothing\n \n API: >= 11.x\n \n'],
		['map.setNorthUp', 'map.setNorthUp( map_id, north_up )', ' Returns: nothing\n \n API: >= 11.x\n \n'],
		['map.setPosition', 'map.setPosition( map_id, lat, lon, alt_agl, heading )', ' Returns: nothing\n \n API: >= 11.x\n \n'],
		['map.setRange', 'map.setRange( map_id, range )', ' Returns: nothing\n \n API: >= 11.x\n \n']
		],
	'math' : [
		['math.abs', 'math.abs(x)', '\nReturns the absolute value of x.\n'],
		['math.acos', 'math.acos(x)', '\nReturns the arc cosine of x (in radians).\n'],
		['math.asin', 'math.asin(x)', '\nReturns the arc sine of x (in radians).\n'],
		['math.atan', 'math.atan(x)', '\nReturns the arc tangent of x (in radians).\n'],
		['math.atan2', 'math.atan2(y, x)', '\nReturns the arc tangent of y/x (in radians), but uses the signs of both parameters to find the quadrant of the result. (It also handles correctly the case of x being zero.)\n'],
		['math.ceil', 'math.ceil(x)', '\nReturns the smallest integer larger than or equal to x.\n'],
		['math.cos', 'math.cos(x)', '\nReturns the cosine of x (assumed to be in radians).\n'],
		['math.cosh', 'math.cosh(x)', '\nReturns the hyperbolic cosine of x.\n'],
		['math.deg', 'math.deg(x)', '\nReturns the angle x (given in radians) in degrees.\n'],
		['math.exp', 'math.exp(x)', '\nReturns the value ex.\n'],
		['math.floor', 'math.floor(x)', '\nReturns the largest integer smaller than or equal to x.\n'],
		['math.fmod', 'math.fmod(x, y)', '\nReturns the remainder of the division of x by y that rounds the quotient towards zero.\n'],
		['math.frexp', 'math.frexp(x)', '\nReturns m and e such that x = m2e, e is an integer and the absolute value of m is in the range [0.5, 1) (or zero when x is zero).\n'],
		['math.huge', 'math.huge', '\nThe value HUGE_VAL, a value larger than or equal to any other numerical value.\n'],
		['math.ldexp', 'math.ldexp(m, e)', '\nReturns m2e (e should be an integer).\n'],
		['math.log', 'math.log(x)', '\nReturns the natural logarithm of x.\n'],
		['math.log10', 'math.log10(x)', '\nReturns the base-10 logarithm of x.\n'],
		['math.max', 'math.max(x, ...)', '\nReturns the maximum value among its arguments.\n'],
		['math.min', 'math.min(x, ...)', '\nReturns the minimum value among its arguments.\n'],
		['math.modf', 'math.modf(x)', '\nReturns two numbers, the integral part of x and the fractional part of x.\n'],
		['math.pi', 'math.pi', '\nThe value of pi.\n'],
		['math.pow', 'math.pow(x, y)', '\nReturns xy. (You can also use the expression x^y to compute this value.)\n'],
		['math.rad', 'math.rad(x)', '\nReturns the angle x (given in degrees) in radians.\n'],
		['math.random', 'math.random([m [, n]])', '\nThis function is an interface to the simple pseudo-random generator function rand provided by ANSI C. \n(No guarantees can be given for its statistical properties.)\n\nWhen called without arguments, returns a uniform pseudo-random real number in the range [0,1). \nWhen called with an integer number m, math.random returns a uniform pseudo-random integer in the range [1, m]. \nWhen called with two integer numbers m and n, math.random returns a uniform pseudo-random integer in the range [m, n].\n'],
		['math.randomseed', 'math.randomseed(x)', '\nSets x as the "seed" for the pseudo-random generator: equal seeds produce equal sequences of numbers.\n'],
		['math.sin', 'math.sin(x)', '\nReturns the sine of x (assumed to be in radians).\n'],
		['math.sinh', 'math.sinh(x)', '\nReturns the hyperbolic sine of x.\n'],
		['math.sqrt', 'math.sqrt(x)', '\nReturns the square root of x. (You can also use the expression x^0.5 to compute this value.)\n'],
		['math.tan', 'math.tan(x)', '\nReturns the tangent of x (assumed to be in radians).\n'],
		['math.tanh', 'math.tanh(x)', '\nReturns the hyperbolic tangent of x.\n']
		],
	'matrix' : [
		['matrix.transform3D', 'matrix.transform3D( x,y,z,  tx,ty,tz,  tp,tr,th )', ' Returns: transformed_x, transformed_y, transformed_z\n \n This function can be used to apply a 3D transformation to a position vector.\n\n Submitted by x-alberto?\n \n\n API: >= 11.4\n \n']
		],
	'memcache' : [
		['memcache.get', 'memcache.get( "key name" )', ' Returns: String containing value stored in key, or nil.\n'],
		['memcache.set', 'memcache.set( "key name", string_blob )', ' Overwrites the value at "key name" with string_blob.\n']
		],
	'menu' : [
		['menu.newItem', 'menu.newItem( "Menu Label", "MenuEventName" )', ' Menu will be created at: Plugins > Gizmo > Scripts > "Menu Label"\n When clicked Gizmo will call the function: MenuEventName_OnClick()\n']
		],
	'mouse' : [
		['mouse.getXY', 'mouse.getXY()', ' Returns: Mouse X,Y location on the screen. \n\t\n Eg: \n\tm.x,m.y = mouse.getXY()\n \n'],
		['mouse.setCursor', 'mouse.setCursor( "CursorDrawingFunctionName" )', ' \n Eg: \n\t mouse.setCursor( "drawCustomCursor" )\n\t \n\t function drawCustomCursor()\n\t\t--mouse.x and mouse.y are automatically updated by Gizmo64.plugin\n\t\tgfx.drawString("mouse cursor", mouse.x, mouse.y)\n\t end\n \n']
		],
	'nav' : [
		['nav.findNavAid', 'nav.findNavAid( "name", "id", lat, lon, frequency )', ' Returns: navaid_id\n \n Combine with nav.setSearchGroups(...)\n This function can be used to search the nav database.\n \n By setting "name" or "id" to "*" you can create a wild-card search.\n By setting "name" or "id" to nil you can create a wild-card search.\n \n'],
		['nav.getFirstNavAid', 'nav.getFirstNavAid()', ' Returns: First navaid_id in the database.\n'],
		['nav.getFirstNavAidOfType', 'nav.getFirstNavAidOfType( navaid_type )', ' Returns: First navaid_id available that matches the specified type.\n'],
		['nav.getLastNavAidOfType', 'nav.getLastNavAidOfType( navaid_type )', ' Returns: Last navaid_id available that matches the specified type.\n'],
		['nav.getNavAidInfo', 'nav.getNavAidInfo( navaid_id )', ' Returns: navaid_type, lat, lon, alt, "ICAO_ID", "Name", reg, freq, heading\n \n Here is some little known info about "getNavAidInfo"...\n Returning frequency for a type of xplm_Nav_Airport is not supported.\n It is also not supported for a type of xplm_Nav_Fix.\n \n Using all other types will return the frequency.\n This is because this info is in the nav database and not the apt or fix databases\n \n API: >= 11.9 Changes the order of the returned parameters.\n Old: navaid_type, lat, lon, alt, freq, heading, "ICAO_ID", "Name", reg\n New: navaid_type, lat, lon, alt, "ICAO_ID", "Name", reg, freq, heading\n'],
		['nav.getNextNavAid', 'nav.getNextNavAid( nav_ref )', ' Returns: Next navaid_id available that matches the specified type.\n'],
		['nav.getTypeName', 'nav.getTypeName( navaid_type )', ' Returns: String representation of nav-aid type, see predefined var list at start of this API chapter for basic info.\n \n Eg:\n x = nav.airport\n name = nav.getTypeName( x )\n print(name)\n -- name is now == "airport"\n \n \n navaid_types:\n The following variables are automatically defined by Gizmo.\n \n nav.unknown\n nav.airport\n nav.ndb\n nav.vor\n nav.ils\n nav.localizer\n nav.glideslope\n nav.outermarker\n nav.middlemarker\n nav.innermarker\n nav.fix\n nav.dme\n nav.latlon\n \n API: >= 11.1(?)\n \n \n nav.not_found -- added as mapping for XPLM_NAV_NOT_FOUND from C SDK.\n See: http://www.xsquawkbox.net/xpsdk/mediawiki/XPLMNavRef\n \n API: >= 11.9.8\n \n'],
		['nav.setSearchGroups', 'nav.setSearchGroups( airports, ndbs, vors, ils, localizers, glideslopes, outermarkers, middle_markers, innermarkers, fixes, dmes, latlons )', ' \n Pass a 0 or 1 in for each option value.\n Combine this with nav.findNavAid()\n \n nav.setSearchGroups( 1,1,1,1, 0,0,0,0, 1,1,1,1 )\n'],
		['navaid_types:', 'navaid_types:', ' The following variables are automatically defined by Gizmo.\n \n nav.unknown\n nav.airport\n nav.ndb\n nav.vor\n nav.ils\n nav.localizer\n nav.glideslope\n nav.outermarker\n nav.middlemarker\n nav.innermarker\n nav.fix\n nav.dme\n nav.latlon\n \n API: >= 11.1(?)\n \n \n nav.not_found -- added as mapping for XPLM_NAV_NOT_FOUND from C SDK.\n See: http://www.xsquawkbox.net/xpsdk/mediawiki/XPLMNavRef\n\n API: >= 11.9.8\n \n \n']
		],
	'os' : [
		['os.read_me', 'os.read_me()', '\n The following functions are disabled in Gizmo64: \n\tos.execute, os.tmpname, os.exit, io.popen\n \n This is to prevent malicious scripts from causing annoyance on the users computer.\n \n All other os functions are available as documented in Lua manuals.\n\n']
		],
	'package' : [
		['package.read_me', 'package.read_me()', '\n Gizmo provides the full Lua package.api\n']
		],
	'particles' : [
		['particles.newParticles', 'particles.newParticles()', ' Returns: particles_id - handle for particle engine, useful in other particles.api functions.\n'],
		['particles.setBirthRate', 'particles.setBirthRate( particle_emitter_id, particles_per_second )', ''],
		['particles.setBounce', 'particles.setBounce( particle_emitter_id, int_flag )', ' TODO: Not sure exactly what, if any, effect particles.setBounce() has.\n'],
		['particles.setColor', 'particles.setColor( particle_emitter_id, r,g,b, a )', ' Controls the color that the next, and all subsequent, particles will be - until this is called again.\n'],
		['particles.setCount', 'particles.setCount( particle_emitter_id, max_particle_count )', ''],
		['particles.setDisabled', 'particles.setDisabled( particle_emitter_id )', ''],
		['particles.setDrag', 'particles.setDrag( particle_emitter_id, particle_drag )', ' Alter the physics parameters.\n'],
		['particles.setEnabled', 'particles.setEnabled( particle_emitter_id )', ''],
		['particles.setEnergyMax', 'particles.setEnergyMax( particle_emitter_id, emax )', ''],
		['particles.setEnergyMin', 'particles.setEnergyMin( particle_emitter_id, energy_min_value )', ' Controls the minimum possible value for new particles energy values.\n Energy values are randomized to give the illusion of life.\n'],
		['particles.setGravity', 'particles.setGravity( particle_emitter_id, float_value )', ' Control the strength of gravity. -9.8 would be standard earth gravity.\n Force is applied in GL Y axis. TODO: Align particles gravity to planet.\n'],
		['particles.setHardDeck', 'particles.setHardDeck( particle_emitter_id, deck_altitude )', ''],
		['particles.setLife', 'particles.setLife( particle_emitter_id, life_span_in_seconds )', ' Controls how long each particle will live for.\n It is possible to "run out" of particles.\n You have a finite number and you MUST balance birth-rate:life:count variables.\n'],
		['particles.setOrigin', 'particles.setOrigin( particle_emitter_id, x,y,z )', ''],
		['particles.setOriginOffset', 'particles.setOriginOffset( particle_emitter_id, off_x,off_y,off_z )', ''],
		['particles.setScaleRate', 'particles.setScaleRate( particle_emitter_id, rate_value )', ' Create a new particle emitter that has a birth-size of 1.0\n Set the scale-rate to 2.0 using this function.\n When the particle engine runs, the particles will start with a size of 1.0 and when one-second has passed, they will have grown to a total size of 3.0\n'],
		['particles.setSize', 'particles.setSize( particle_emitter_id, size )', ' Control how big new particles are when they spawn.\n'],
		['particles.setStreamHeading', 'particles.setStreamHeading( particle_emitter_id, value )', ''],
		['particles.setStreamNoise', 'particles.setStreamNoise( particle_emitter_id, value )', ''],
		['particles.setStreamPitch', 'particles.setStreamPitch( particle_emitter_id, value )', ''],
		['particles.setStuckToAcf', 'particles.setStuckToAcf( particle_emitter_id, sticky )', ''],
		['particles.setTexture', 'particles.setTexture( particle_emitter_id, texture_id )', ''],
		['particles.setTextureSpriteCount', 'particles.setTextureSpriteCount( particle_emitter_id, nx,ny )', ' Set number of sprites in the texture, eg: 3x3 = 9. texture will be sub divided into grid regions.\n FIXME: gitbug:65 particles.setTextureSpriteCount() Doesnt actually effect the output result yet.\n'],
		['particles.setType_Cubic', 'particles.setType_Cubic( particle_emitter_id )', ''],
		['particles.setType_Spherical', 'particles.setType_Spherical( particle_emitter_id )', ''],
		['particles.setType_Stream', 'particles.setType_Stream( particle_emitter_id )', ''],
		['particles.start', 'particles.start( particle_emitter_id )', ' ........ redundant, we already have disable flag.\n']
		],
	'physics' : [
		['physics.applyForce', 'physics.applyForce( object_id, x,y,z )', ' \n Apply a force to the center of the object, force is specified as a vector.\n'],
		['physics.applyImpulse', 'physics.applyImpulse( object_id, x,y,z )', ' \n Apply an impulse to the center of the object, impulse is specified as a vector.\n'],
		['physics.applyOffsetImpulse', 'physics.applyOffsetImpulse( object_id, x,y,z )', ' \n FIXME: empty hook\n Apply a  to the center of the object,  is specified as a vector.\n'],
		['physics.applyTorque', 'physics.applyTorque( object_id, x,y,z )', ' \n Apply torque the center of the object, torque is specified as a vector.\n'],
		['physics.applyTorqueImpulse', 'physics.applyTorqueImpulse( object_id, x,y,z )', ' \n FIXME: empty hook\n Apply a  to the center of the object,  is specified as a vector.\n'],
		['physics.clearForces', 'physics.clearForces( object_id )', ' Clears any force parameters for the object.\n'],
		['physics.getAngularVelocity', 'physics.getAngularVelocity( object_id )', ' \n Returns: x,y,z\n \n API: >= 11.5.25\n'],
		['physics.getLinearVelocity', 'physics.getLinearVelocity( object_id )', ' \n Returns: x,y,z\n \n API: >= 11.5.25\n'],
		['physics.getOrientationQ', 'physics.getOrientationQ( object_id )', ' \n Returns: x,y,z,angle\n \n These values represent the attitude Quarternion for the specified object_id.\n \n API: >= 11.5.25\n'],
		['physics.loadCollada', 'physics.loadCollada( "filename" )', ' \n NON functional.\n'],
		['physics.newBox', 'physics.newBox( edge_size )', ' \n Creates a new rigid body element in the physics engine.\n \n'],
		['physics.newCapsule', 'physics.newCapsule( radius, height )', ' \n Creates a new rigid body element in the physics engine.\n A capsule is a cylinder with domed ends.\n \n'],
		['physics.newCone', 'physics.newCone( radius, height )', ' \n Creates a new rigid body element in the physics engine.\n'],
		['physics.newCylinder', 'physics.newCylinder( radius, height, z )', ' \n  Creates a new rigid body element in the physics engine.\n \n'],
		['physics.newMultiSphere', 'physics.newMultiSphere( ........fubar )', ' \n Creates a new rigid body element in the physics engine.\n'],
		['physics.newSphere', 'physics.newSphere( radius )', ' \n Create a new sphere rigid body in the physics engine.\n'],
		['physics.restart', 'physics.restart()', ' \n Reset the physics engine.\n'],
		['physics.setAngularVelocity', 'physics.setAngularVelocity( id, x, y, z )', ' \n Apply force to rigid body instance.\n \n'],
		['physics.setBrush', 'physics.setBrush( object_id )', ' \n Set default brush for newly created objects.\n The brush_id controls what the physics object will look like when drawn on screen.\n It does NOT control the physics calculations for collisions.\n'],
		['physics.setBrushByID', 'physics.setBrushByID( physics_id, object_id )', ' \n Change the brush-id of a physics object.\n'],
		['physics.setCursor', 'physics.setCursor( x,y,z )', ' \n Move the physics spawn point in space.\n'],
		['physics.setDebugMode', 'physics.setDebugMode( debug_mode_flag )', ' \n Possible values:\n enum  \tDebugDrawModes { \n DBG_NoDebug = 0, \n DBG_DrawWireframe = 1, \n DBG_DrawAabb = 2, \n DBG_DrawFeaturesText = 4, \n DBG_DrawContactPoints = 8, \n DBG_NoDeactivation = 16, \n DBG_NoHelpText = 32, \n DBG_DrawText = 64, \n DBG_ProfileTimings = 128, \n DBG_EnableSatComparison = 256, \n DBG_DisableBulletLCP = 512, \n DBG_EnableCCD = 1024, \n DBG_DrawConstraints = (1 << 11), \n DBG_DrawConstraintLimits = (1 << 12), \n DBG_FastWireframe = (1<<13), \n DBG_MAX_DEBUG_DRAW_MODE \n }\n'],
		['physics.setEnabled', 'physics.setEnabled( int_flag )', ' \n Enable the physics engine.\n'],
		['physics.setGravityVector', 'physics.setGravityVector( x,y,z )', ' \n Set default graivty vector.\n Normal gravity is ( 0, -9.8, 0 )\n'],
		['physics.setInertia', 'physics.setInertia( vx,vy,vz )', ' \n Set default inertia value for newly created objects.\n'],
		['physics.setLinearVelocity', 'physics.setLinearVelocity( object_id, vx, vy, vz )', ' \n API: >= 11.5.25\n'],
		['physics.setMass', 'physics.setMass( new_default_mass )', ' \n Set the default mass value for new objects, ratio.\n'],
		['physics.setOrigin', 'physics.setOrigin( x,y,z )', ' \n Controls where in X-Planes OpenGL world the Bullet-Origin is.\n Bullets physics math works best with a 10x10x10 kilometer cube.\n Move it around.\n'],
		['physics.setPaused', 'physics.setPaused( int_flag )', ' \n Pause the physics engine.\n'],
		['physics.setPhysicsDrawingHack', 'physics.setPhysicsDrawingHack( int_flag )', ' \n Turns a physics drawing hack on and off, you MUST load an OBJ8 file (anyone will do) before turning this on.\n It\'s a _hack_.\n'],
		['physics.stepOnce', 'physics.stepOnce()', ' \n When paused, step the physics engine frame by frame.\n'],
		['physics.translate', 'physics.translate( id, x,y,z )', ' \n Translate a rigid body inside the physics world.\n \n API: >= 11.5.25\n']
		],
	'plugins' : [
		['plugins.findPlugin', 'plugins.findPlugin( "signature" )', ' Returns: boolean\n \n Eg:\n \n\tif( plugins.findPlugin( "custom_systems.xpl" ) )then\n\t\t--we could find the plugin and are capable of sending messages to it in a useful manner.\n\tend\n'],
		['plugins.getFolder', 'plugins.getFolder()', ' Returns: path to plugins folder as string.\n \n API: >= 11.5.25\n \n'],
		['plugins.sendMessage', 'plugins.sendMessage( "signature", code, "message" )', ' Returns: true if signature was found and message sent, nil otherwise.\n Eg:\n plugins.sendMessage( "xplanesdk.examples.DataRefEditor", 0x01000000, "myproject/custom/dataref_name" )\n --this would try to register a fake dataref with DRE.\n \n As of 2013.07.01 this function will auto detect the type of data you are sending as "message".\n \n If you are sending a string value it will be passed over IPC as a C-String pointer.\n \n If you are sending a numeric value (may include strings that can be cleanly converted to numeric!) then it will be sent as an unsigned  long int.\n \n']
		],
	'shaders' : [
		['shaders.compileShaders', 'shaders.compileShaders( shader_id, vertex_shader_string_blob, fragment_shader_string_blob )', ' Returns: boolean for success\n'],
		['shaders.newShader', 'shaders.newShader()', ' Returns: shader_id\n'],
		['shaders.release', 'shaders.release()', ' Return GL to "fixed function hardware" drawing.\n'],
		['shaders.setParam', 'shaders.setParam( shader_id, "param_name", value )', ' Allows passing of dynamic parameters into the shader.\n param_name is a string, value is a floating point number\n'],
		['shaders.useShader', 'shaders.useShader( shader_id )', ' Activate the specified valid shader_id.\n']
		],
	'sound' : [
		['sound.getControl', 'sound.getControl()', ''],
		['sound.load', 'sound.load( [sound_buffer_id], "sound_filename.wav" )', ' Returns: sound_id\n If called with no sound_buffer_id argument, sound.load("filename.wav") will create a new sound buffer.\n * Formats supported:\n ** 22 or 44kz, 8 or 16 bit, mono or stereo. Any combination.\n \n * Sounds do not load on PowerPC Macintosh. *\n'],
		['sound.newBuffer', 'sound.newBuffer()', ' Returns: sound_buffer_id\n Allocates a new sound buffer and returns its ID.\n'],
		['sound.newSource', 'sound.newSource()', ' Returns: sound_source_id\n Allocates a new sound source and returns its ID.\n'],
		['sound.pause', 'sound.pause( sound_source_id )', ' \n Pause the playback of the specified sound.\n'],
		['sound.play', 'sound.play( sound_source_id )', ' \n Play the specified sound. Resumes from paused state if sound was paused.\n See sound.rewind(...)\n'],
		['sound.releaseControl', 'sound.releaseControl()', ''],
		['sound.rewind', 'sound.rewind( sound_source_id )', ' \n Move the playhead for a given sample back to the start of a sample.\n'],
		['sound.say', 'sound.say( "string to vocalize" )', ' Causes X-Plane to speak your text using the text-to-speech processor like that of the built in ATC system.\n'],
		['sound.setDirection', 'sound.setDirection( sound_source_id, nx,ny,nz )', ' \n Controls the direction vector that the sound is travelling in.\n'],
		['sound.setGain', 'sound.setGain( sound_source_id, gain_ratio )', ' \n Controls the gain, or volume, of a sound sample, argument is a ratio.\n'],
		['sound.setLoop', 'sound.setLoop( sound_source_id, loop_flag )', ' \n Set loop_flag to 1 and the sound will play forever until stopped or paused.\n Set loop_flag to 0 and the sound will stop playing when the end of the sample is reached.\n'],
		['sound.setPitch', 'sound.setPitch( sound_source_id, pitch_ratio )', ' \n Alter the pitch ratio of a given sound.\n 0.5 will play at half pitch.\n 2.0 will play at twice-normal pitch.\n 1.0 will play normally.\n'],
		['sound.setPosition', 'sound.setPosition( sound_source_id, x,y,z )', ' \n Set the sounds position in 3D space.\n \n Mono files only for 3D sound-stage use.\n'],
		['sound.setVelocity', 'sound.setVelocity( sound_source_id, vx,vy,vz )', ' \n Controls the velocity of the sound in 3D space.\n Combine this with sound.setDirection(...)\n \n'],
		['sound.stop', 'sound.stop( sound_source_id )', ' \n Stops playback for a given sound, moves playhead back to start of sample.\n']
		],
	'string' : [
		['string.read_me', 'string.read_me()', ' \n Gizmo provides the full Lua string.api\n']
		],
	'table' : [
		['table.read_me', 'table.read_me()', '']
		],
	'timer' : [
		['timer.destroy', 'timer.destroy( timer_id )', ' Stops and destroys a timer.\n'],
		['timer.getHPT', 'timer.getHPT()', ' \n Returns number of microseconds that have elapsed since Gizmo started.\n \n \n Eg:\n local start_time = timer.getHPT()\n call_drawing_function()\n local stop_time = timer.getHPT()\n local delta = stop_time - start_time\n \n \n \n API >= 12.11.08\n'],
		['timer.getInterval', 'timer.getInterval( timer_id )', ' Returns: numeric timer interval.\n'],
		['timer.getValue', 'timer.getValue( timer_id )', ' Returns: numeric timber value, the current value of a timer, can be used to detect current fill %.\n'],
		['timer.newOneShot', 'timer.newOneShot( "timer_function_name", interval )', ' Returns: timer_id\n Create a timer that will fire once and die.\n'],
		['timer.newTimer', 'timer.newTimer( "timer_function_name", interval )', ' Returns: timer_id\n Create a timer that will fire repeatedly forever until stopped.\n'],
		['timer.reset', 'timer.reset( timer_id )', ' Reset the internal value of a timer so that it restarts.\n This function will restart a timer.stop()ed timer_id.\n'],
		['timer.setInterval', 'timer.setInterval( timer_id, interval )', ' Adjust a timers firing rate.\n'],
		['timer.stop', 'timer.stop( timer_id )', ' Stops a timer. The function for timer_id will not be called again.\n']
		],
	'trig' : [
		['trig.courseToLocation', 'trig.courseToLocation( x,y )', ' Returns: heading in degrees\n'],
		['trig.courseToLocation3D', 'trig.courseToLocation3D( x,y,z )', ' Returns: pitch and heading in degrees\n Eg:\n p,h = trig.courseToLocation3D( 1, 2, 3 )\n'],
		['trig.distanceBetweenPoints', 'trig.distanceBetweenPoints( a,b, x,y )', ' Returns: distance\n Uses flat plane geometry.\n'],
		['trig.distanceBetweenWorldPoints', 'trig.distanceBetweenWorldPoints( lat_a,lon_a, lat_b,lon_b )', ' Returns: Returns: distance in "degrees of latitude"\n Uses decent spherical geometry translated from web source: ...... (SDK website has it??)\n \n Multiply return value by 60 to convert to nautical miles.\n \n Core Function:\n return 2 * asin( sqrt(\n sqr( (sin( (lat1-lat2)/2 ) ) ) +\n cos(lat1) * cos(lat2) * sqr( (sin( (lon1-lon2)/2 ))  )\n )  );\n \n'],
		['trig.interpolator', 'trig.interpolator( r,s,y, x,y,z, steps )', ' Returns: Stream of x,y,z positions as stream-table.\n Eg:\n xyz_stream = { trig.interpolator( r,s,t, x,y,z, steps ) }\n xyz_stream_len = steps * 3\n \n xyz_stream contains data like this [x,y,z,x,y,z,x,y,z,x,y,z,x,y,z,x,y,z,x,y,z,x,y,z,x,y,z]\n Every 3 variables is one "step" in 3D space.\n'],
		['trig.newPositionOffset', 'trig.newPositionOffset( heading, speed )', ' Returns: x,y\n'],
		['trig.newPositionOffset3D', 'trig.newPositionOffset3D( heading, pitch, speed )', ' Returns: x,y,z\n']
		],
	'utils' : [
		['utils.expScale', 'utils.expScale( input, scale_factor )', 'Returns: exponentially scaled value.\r\n'],
		['utils.getFileInfo', 'utils.getFileInfo( file_path )', ' Returns: node_type, size_in_bytes, date_changed\r\n\r\n Eg:\r\n file_info = { utils.getFileInfo(acf.getFolder() .. acf.getFilename()) }\r\n --file_info[1] == "file"\r\n\r\n Valid node_types:\r\n\t"block_dev"\r\n\t"char_dev"\r\n\t"folder"\r\n\t"fifo"\r\n\t"symlink"\r\n\t"file"\r\n\t"socket"\r\n\t"unknown"\r\n\r\n API: 11.14+\r\n'],
		['utils.getFolderContents', 'utils.getFolderContents( folder_path )', ' Returns: Multiple strings containing the names of the items found in the folder specified.\r\n\r\n Eg:\r\n file_list = { utils.getFolderContents(acf.getFolder()) }\r\n\r\n\r\n NOTE: Due to a limit in Mac OS "Classic" the max recommended length for a filename is 31 chars.\r\n Use of filenames longer than this may result in cross-plaform issues.\r\n\r\n\r\n API: 11.11+\r\n'],
		['utils.getStringFromCPointer', 'utils.getStringFromCPointer( pointer_address, [length] )', 'Returns: String value at pointer address.\r\n\r\n WARNING: Experts only, will crash X-Plane to desktop if not used correctly.\r\n\r\n API: 11.4+\r\n'],
		['utils.newFolder', 'utils.newFolder( folder_path )', ' Returns: Attempts to create a new folder.\r\n\r\n NOTE: Due to a limit in Mac OS "Classic" the max recommended length for a filename is 31 chars.\r\n Use of filenames longer than this may result in cross-plaform issues.\r\n\r\n API: 12.01.28+\r\n'],
		['utils.popWebBrowser', 'utils.popWebBrowser( url )', ' Opens the system default web browser and sends user to specified URL.\r\n\r\n API: >= 11.5.6\r\n'],
		['utils.setClipboardText', 'utils.setClipboardText( text_chunk )', ' Copy a chunk of string data to the system clipboard.\r\n \r\n \r\n Mac/Win only.\r\n API: >= 13.02.24\r\n']
		],
	'xp' : [
		['xp.clearReplay', 'xp.clearReplay()', ' Clears the X-Plane replay buffer.\n'],
		['xp.commandBeginByName', 'xp.commandBeginByName( "sim/command" )', ' \n Equivalent to pressing a joystick button or hotkey for the sim/command.\n \n X-Plane will call the hold down event until you call gfx.commandEndByName( "sim/command" )\n'],
		['xp.commandEndByName', 'xp.commandEndByName( "sim/command" )', ' \n Equivalent to releasing a joystick button or hotkey for the sim/command.\n'],
		['xp.commandOnceByName', 'xp.commandOnceByName( "sim/command" )', ' \n Equivalent to pressing a joystick button or hotkey for the sim/command.\n This is a momentary command.\n'],
		['xp.getCycleNumber', 'xp.getCycleNumber()', ' Returns: number of frames rendered since sim started\n'],
		['xp.getDataref', 'xp.getDataref( "sim/dataref" )', ' Returns: dataref_id\n \n Does NOT accept part numbers:\n This will NOT work: xp.getDataref( "sim/dataref[99999]" )\n \n dr_parameter = xp.getDataref("sim/cockpit/switches/ice")\t\n'],
		['xp.getElapsedTime', 'xp.getElapsedTime()', ' Returns: Number of seconds since sim started, floating point number.\n'],
		['xp.getFloat', 'xp.getFloat( dataref_id )', ' Returns: value of dataref_id decimal number\n See xp.getDataref("sim/foo") and xp.newDataref("custom/dataref") for more info.\n'],
		['xp.getFloatV', 'xp.getFloatV( dataref_id, start_at, number_to_fetch )', ' Returns: multiple values for dataref_id as decimal numbers\n See xp.getDataref("sim/foo") and xp.newDataref("custom/dataref") for more info.\n start_at refers to the part number in sim/dataref[99]\n \n In X-Plane, OBJ8 and C, part numbers start at 0.\n In Lua, part numbers start at 1.\n \n For this reason, the start_at parameter also starts at 1.\n \n If you want to get sim/dataref[0] use:\n value = xp.getFloatv( dataref_id, 1, 1 )\n \n We ask Gizmo to get us one value, starting at the first item.\n \n This seems a little bit annoying, but when you start using your tables of values\n with the rest of Luas functions you will understand why there is a little "shift"\n here when we push numbers in and out of X-Planes dataref systems.\t\n'],
		['xp.getFolder', 'xp.getFolder()', ' Returns: String containing path to X-Plane folder, includes trailing slash. All slashes are set to /\n'],
		['xp.getInt', 'xp.getInt( dataref_id )', ' Returns: value of dataref_id Integer number\n See xp.getDataref("sim/foo") and xp.newDataref("custom/dataref") for more info.\n'],
		['xp.getIntV', 'xp.getIntV( dataref_id, start_at, number_to_fetch )', ' Returns: multiple values for dataref_id as numbers\n See xp.getDataref("sim/foo") and xp.newDataref("custom/dataref") for more info.\n start_at refers to the part number in sim/dataref[99]\n \n In X-Plane, OBJ8 and C, part numbers start at 0.\n In Lua, part numbers start at 1.\n \n For this reason, the start_at parameter also starts at 1.\n \n If you want to get sim/dataref[0] use:\n value = xp.getFloatv( dataref_id, 1, 1 )\n \n We ask Gizmo to get us one value, starting at the first item.\n \n This seems a little bit annoying, but when you start using your tables of values\n with the rest of Luas functions you will understand why there is a little "shift"\n here when we push numbers in and out of X-Planes dataref systems.\t\n'],
		['xp.getLanguage', 'xp.getLanguage()', ' Returns: Language as Top Level Domain Code in a string.\n Possible return values:\n "??" - Unknown\n "us" - English\n "fr" - French\n "de" - German\n "it" - Italian\n "es" - Spanish\n "kr" - Korean\n "ru" - Russian\n "gr" - Greek\n "jp" - Japanese\n "cn" - Chinese\n "?!" - Unexpected return from XPLMGetLanuage() function. SNAFU. Note the !\n'],
		['xp.getOS', 'xp.getOS()', ' Returns: "WIN", "LIN" or "MAC"\n'],
		['xp.getPaused', 'xp.getPaused()', ' Returns: boolean\n if( not xp.getPaused() )then\n --sim is NOT paused, do stuff\n else\n --sim is paused, pause custom systems\n end\n'],
		['xp.getPluginsFolder', 'xp.getPluginsFolder()', ' Returns: String containing path to plugins folder, includes trailing slash. All slashes are set to /\n'],
		['xp.getSDKVersion', 'xp.getSDKVersion()', ' Returns: X-Plane Plugin SDK version as decimal number eg: 2.00\n'],
		['xp.getTerrainData', 'xp.getTerrainData( x,y,z )', ' Returns: x,y,z, nx,ny,nz, vx,vy,vz, wet\n x,y,z, nx,ny,nz, vx,vy,vz, wet = xp.getTerrainData( x,y,z )\n'],
		['xp.getVersion', 'xp.getVersion()', ' Returns: X-Plane version as decimal number eg: 9.41\n'],
		['xp.getXPlaneFolder', 'xp.getXPlaneFolder()', ' Returns: String containing path to X-Plane folder, includes trailing slash. All slashes are set to /\n'],
		['xp.loadReplay', 'xp.loadReplay( "Output/replays/replay.mov" )', ' Loads a replay movie.\n NOTE: This will probably hang/block the sim while the replay file loads.\n This can take a while, it is recommended you display a message to the user -before- calling this function.\n'],
		['xp.loadSituation', 'xp.loadSituation( "Output/situations/capnsully.sit" )', ' Loads a pre-saved situation file.\n NOTE: This will probably hang/block the sim while the replay file loads.\n This can take a while, it is recommended you display a message to the user -before- calling this function.\n'],
		['xp.newCommand', 'xp.newCommand( command_name, description, script_function_name )', ' Registers a new custom command and makes it available for use inside X-Plane.\n xp.newCommand("my/custom/command", "Open the canopy.", "canopy_open" )\n \n function canopy_open_OnStart()\n --button or key press started\n end\n \n function canopy_open_OnHold()\n --button or key is being held down\n end\n \n function canopy_open_OnStop()\n --button or key was released\n end\n'],
		['xp.newDataref', 'xp.newDataref( dataref_name, [hook_event_name] )', ' Creates a new floating-point (decimal number) dataref.\n hook_event_name is optional and can be used to make Gizmo notify your code when your dataref changes, you do not have to \'watch\' or poll it.\n\n function hook_event_name_OnRead()\n\treturn acf.getIAS() * 10\n end\n \n function hook_event_OnWrite( newValue )\n\tsound.say("dataref changed")\n end\n'],
		['xp.newFloatingPointDataref', 'xp.newFloatingPointDataref( dataref_name, [hook_event_name] )', ' Creates a new floating-point (decimal number) dataref.\n hook_event_name is optional and can be used to make Gizmo notify your code when your dataref changes, you do not have to \'watch\' or poll it.\n\n function hook_event_name_OnRead()\n\treturn acf.getIAS() * 10\n end\n \n function hook_event_OnWrite( newValue )\n\tsound.say("dataref changed")\n end\n'],
		['xp.newIntegerDataref', 'xp.newIntegerDataref( dataref_name, [hook_event_name] )', ' Returns: dref_id\n \n Creates a new integer (no decimal allowed) dataref.\n \n hook_event_name is optional and can be used to make Gizmo notify your\n code when your dataref changes, you do not have to \'watch\' or poll it.\n\n function hook_event_name_OnRead()\n\treturn acf.getIAS() * 10\n end\n \n function hook_event_OnWrite( newValue )\n\tsound.say("dataref changed")\n end\n'],
		['xp.reloadScenery', 'xp.reloadScenery()', ' Calls for scenery system reload. Thrown in for completeness.\n'],
		['xp.saveReplay', 'xp.saveReplay( "Output/replays/filename.mov" )', ' Save a replave movie to disk.\n This is NOT a quicktime movie.\n'],
		['xp.saveSituation', 'xp.saveSituation( "Output/situations/filename.sit" )', ' Save a situation file to disk.\n'],
		['xp.setFloat', 'xp.setFloat( dataref_id, value )', ' Push a new value into a dataref. Value is a decimal number.\n vvi = vvi * 2 \n xp.setFloat( dref_VVI, vvi )\n'],
		['xp.setFloatV', 'xp.setFloatV( dataref_id, start_at, value1, value2, value3, ...., value10 )', ' OR\n tmp = { value1, value2, value3, ...., value10 }\n xp.setFloatV( dataref_id, start_at, tmp )\n \n Please also read the notes for xp.getFloatV() and xp.getIntV() functions.\n \n xp.setFloatArray(..) does the same things.\n'],
		['xp.setInt', 'xp.setInt( dataref_id, value )', ' Push a new value into a dataref. Value is a decimal number.\n vvi = vvi * 2 \n xp.setFloat( dref_VVI, vvi )\n'],
		['xp.setIntV', 'xp.setIntV( dataref_id, start_at, value1, value2, value3, ...., value10 )', ' OR\n tmp = { value1, value2, value3, ...., value10 }\n xp.setIntV( dataref_id, start_at, tmp )\n \n Please also read the notes for xp.getFloatV() and xp.getIntV() functions.\n \n xp.setIntArray(..) does the same things.\n'],
		['xp.setPaused', 'xp.setPaused( integer_flag )', ' Pause or Unpause the simulation.\n xp.setPaused( 1 ) --pause\n xp.setPaused( 0 ) --unpause\n']
		]
};